export type MessageSeverity =
    | 'warning'
    | 'info';

export type MessageKind =
    | 'deprecation'
    | 'upcoming-deprecation'
    | 'compatibility'
    | 'performance'
    | 'migration'
    | 'best-practice'
    | 'other';

/**
 * A universal message that the validator can show to the user.
 * Based on this type we split messages into warnings[] and infos[],
 * and we can also filter/ignore them by a stable code and scope.
 */
export interface PolicyMessage {
    /**
     * Message severity. Controls which array the message is placed into:
     * - warning  -> warnings[]
     * - info     -> infos[]
     */
    severity: MessageSeverity;

    /**
     * Stable message code (for example, 'DEPRECATION_BLOCK', 'DEPRECATION_PROP', 'PERF_HINT').
     * Used for ignoring specific classes of messages on both the frontend and backend.
     */
    code: string;

    /**
     * High-level message kind so the frontend can group/filter and render appropriate icons
     * (deprecation, performance, compatibility, etc.).
     */
    kind: MessageKind;

    /**
     * Human-readable message text.
     * Either generated by an adapter or taken verbatim from a registry.
     */
    text: string;

    /**
     * Message scope for precise ignore rules:
     * - blockType: which block type this message relates to.
     * - property: which specific property of the block it refers to (if applicable).
     */
    blockType?: string;
    property?: string;

    /**
     * Optional metadata. Typically comes from DeprecationInfo or generic registries.
     */
    since?: string;
    effectiveFrom?: string;
    removalPlanned?: string;
    migrationGuideUrl?: string;
}

/**
 * Aliases for readability.
 */
export type BlockTypeName = string;
export type PropertyName = string;

/**
 * Registries of universal messages.
 * - For blocks: an array of messages per block type.
 * - For properties: a nested map where each block type has a map of properties,
 *   and each property maps to an array of messages.
 */
export type BlockMessagesMap = ReadonlyMap<BlockTypeName, ReadonlyArray<PolicyMessage>>;

export type PropertyMessagesMap = ReadonlyMap<
    BlockTypeName,
    ReadonlyMap<PropertyName, ReadonlyArray<PolicyMessage>>
>;
