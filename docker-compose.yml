# https://docs.docker.com/compose/environment-variables/envvars-precedence/
# Environment leverage the gerarchy defined in the docker compose between "env_file" and "environment" attributes
# ecosystem variables defined in the "env_file" .env.${GUARDIAN_ENV}.guardian.system
# specific service variables defined by "environment" can override what is defined in the ecosystem file
services:
  mongo:
    image: mongo:6.0.16
    command: "--setParameter allowDiskUseByDefault=true"
    restart: always
    expose:
      - 27017

  mongo-express:
    image: mongo-express:1.0.2-20
    expose:
      - 8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_SITE_BASEURL: /mongo-admin # default credentials: admin/pass
    depends_on:
      - mongo

  cache:
    image: registry.redict.io/redict
    platform: linux/amd64
    restart: always
    expose:
      - 6379

#  seq:
#    image: datalust/seq
#    restart: unless-stopped
#    environment:
#      ACCEPT_EULA: "Y"
#    ports:
#      - "5341:80"
#    volumes:
#      - seq_data:/data

  ipfs-node:
    image: ipfs/kubo:v0.29.0
    ports:
      - "5001:5001"
      - "4001:4001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs:rw
      - ipfs_export:/export:rw

  message-broker:
    image: nats:2.9.25
    expose:
      - 4222
    ports:
      - '8222:8222'
    command: '-c /etc/nats/nats.conf --http_port 8222'
    volumes:
      - ./configs/nats.conf:/etc/nats/nats.conf

  vault:
    image: hashicorp/vault:1.12.11
    expose:
      - 8200
    ports:
      - '8200:8200'
    environment:
      VAULT_SERVER: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: "1234"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./file:/vault/file:rw
      - ./config:/vault/config:rw

  notification-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    init: true
    depends_on:
      - message-broker
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    volumes:
      - ./notification-service/configs:/usr/local/app/configs:ro

  logger-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./logger-service/Dockerfile
    init: true
    depends_on:
      - message-broker
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 6555
    volumes:
      - ./logger-service/configs:/usr/local/app/configs:ro

  queue-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./queue-service/Dockerfile
    init: true
    depends_on:
      - mongo
      - message-broker
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 6555

  worker-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./worker-service/Dockerfile
    init: true
    depends_on:
      queue-service:
        condition: service_started
      ipfs-node:
        condition: service_healthy
      auth-service:
        condition: service_started
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 6555
    volumes:
      - ./worker-service/tls:/usr/local/app/tls:ro
      - ./worker-service/configs:/usr/local/app/configs:ro
    deploy:
      replicas: 2

  auth-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile.demo
    init: true
    ports:
      - '5005:5005'
    volumes:
      - ./auth-service/tls:/usr/local/app/tls:ro
      - ./auth-service/configs:/usr/local/app/configs:ro
    depends_on:
      - mongo
      - vault
      - message-broker
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 6555
      - 5005

  api-gateway:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile.demo
    init: true
    expose:
      - 3002
      - 6555
    depends_on:
      - mongo
      - cache
#      - seq
      - message-broker
      - guardian-service
      - auth-service
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    volumes:
      - ./api-gateway/configs:/usr/local/app/configs:ro

  ai-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./ai-service/Dockerfile
    init: true
    expose:
      - 3013
    depends_on:
      - mongo
      - message-broker
      - logger-service
    volumes:
      - ./ai-service/faiss-vector:/usr/local/app/faiss-vector:rw
      - ./ai-service/data:/usr/local/app/data:rw
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - VECTOR_STORAGE_PATH=./faiss-vector
      - DOCS_STORAGE_PATH=./data/generated-data

  policy-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./policy-service/Dockerfile
    init: true
    ports:
      - "5006:5006"
    depends_on:
      - mongo
      - message-broker
      - auth-service
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 50000-60000
      - 5006
    volumes:
      - ./policy-service/tls:/usr/local/app/tls:ro
      - ./policy-service/configs:/usr/local/app/configs:ro

  guardian-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./guardian-service/Dockerfile
    init: true
    ports:
      - "5007:5007"
    volumes:
      - ./guardian-service/tls:/usr/local/app/tls:ro
      - ./guardian-service/configs:/usr/local/app/configs:ro
    depends_on:
      - mongo
      - message-broker
      - auth-service
      - logger-service
      - worker-service
      - policy-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 6555
      - 5007

  application-events:
    build:
      context: .
      dockerfile: application-events/Dockerfile
    init: true
    ports:
      - "3012:3012"
    depends_on:
      - mongo
      - message-broker
      - guardian-service
      - auth-service
      - logger-service
    expose:
    - 3012

  mrv-sender:
    build:
      context: .
      dockerfile: ./mrv-sender/Dockerfile
    init: true
    ports:
      - "5008:5008"
    expose:
      - 3005
      - 5008

  topic-viewer:
    build:
      context: .
      dockerfile: ./topic-viewer/Dockerfile
    init: true
    expose:
      - 3006
      - 5009
    ports:
      - "5009:5009"

  web-proxy:
    build:
      context: .
      dockerfile: ./web-proxy/Dockerfile.demo
    init: true
    environment:
      GATEWAY_CLIENT_MAX_BODY_SIZE: 1024m
      GATEWAY_HOST: api-gateway
      GATEWAY_PORT: 3002
      MRV_SENDER_HOST: mrv-sender
      MRV_SENDER_PORT: 3005
      TOPIC_VIEWER_HOST: topic-viewer
      TOPIC_VIEWER_PORT: 3006
    ports:
      - "3000:80"
    depends_on:
      - guardian-service
      - auth-service
      - api-gateway
      - mrv-sender
      - mongo-express

  prometheus:
    image: prom/prometheus:v2.44.0
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.0.10
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SERVER_HTTP_PORT=9080
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/prometheus-dashboard.json
    ports:
      - "9080:9080"
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  ipfs_data:
  ipfs_export:
#  seq_data:

networks:
  monitoring:
    driver: bridge
