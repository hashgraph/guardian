version: "3.8"
services:
  mongo:
    image: mongo:6.0.3
    command: "--setParameter allowDiskUseByDefault=true"
    restart: always
    expose:
      - 27017

  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    expose:
      - 8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_SITE_BASEURL: /mongo-admin
    depends_on:
      - mongo

  ipfs-node:
    image: ipfs/kubo:v0.18.1
    ports:
      - "5001:5001"
      - "5002:5002"
      - "4001:4001"
      - "4002:4002"
      - "8080:8080"
      - "8081:8081"
    volumes:
      - ./runtime-data/ipfs/staging:/export:rw
      - ./runtime-data/ipfs/data:/data/ipfs:rw

  message-broker:
    image: nats:2.9.8
    expose:
      - 4222
    ports:
      - '8222:8222'
    command: '--http_port 8222'

  vault:
    image: vault:1.12.2
    expose:
      - 8200
    ports:
      - '8200:8200'
    environment:
      VAULT_SERVER: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: "1234"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./file:/vault/file:rw
      - ./config:/vault/config:rw

# https://docs.docker.com/compose/environment-variables/envvars-precedence/
# Environment leverage the gerarchy defined in the docker compose between "env_file" and "environment" attributes
# ecosystem variables defined in the "env_file" .env.${GUARDIAN_ENV}.guardian.system
# specific service variables defined by "environment" can override what is defined in the ecosystem file

  notification-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    depends_on:
      - message-broker
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    volumes:
      - ./notification-service/configs:/usr/local/notification-service/configs:ro

  logger-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./logger-service/Dockerfile
    depends_on:
      - message-broker
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    volumes:
      - ./logger-service/configs:/usr/local/logger-service/configs:ro

  worker-service-1:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./worker-service/Dockerfile
    depends_on:
      ipfs-node:
        condition: service_healthy
      auth-service:
        condition: service_started
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL:"worker.1"
    expose:
      - 6555
    volumes:
      - ./worker-service/tls:/usr/local/worker-service/tls:ro
      - ./worker-service/configs:/usr/local/worker-service/configs:ro

  worker-service-2:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./worker-service/Dockerfile
    depends_on:
      ipfs-node:
        condition: service_healthy
      auth-service:
        condition: service_started
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL="worker.2"
    expose:
      - 6555
    volumes:
      - ./worker-service/tls:/usr/local/worker-service/tls:ro
      - ./worker-service/configs:/usr/local/worker-service/configs:ro

  auth-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    ports:
      - '5005:5005'
    volumes:
      - ./auth-service/tls:/usr/local/auth-service/tls:ro
      - ./auth-service/configs:/usr/local/auth-service/configs:ro
    depends_on:
      - mongo
      - vault
      - message-broker
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 6555
      - 5005

  api-gateway:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    expose:
      - 3002
      - 6555
    depends_on:
      - mongo
      - message-broker
      - guardian-service
      - auth-service
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    volumes:
      - ./api-gateway/configs:/usr/local/api-gateway/configs:ro

  policy-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./policy-service/Dockerfile
    ports:
      - "5006:5006"
    depends_on:
      - mongo
      - message-broker
      - auth-service
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 50000-60000
      - 5006
    volumes:
      - ./policy-service/tls:/usr/local/policy-service/tls:ro
      - ./policy-service/configs:/usr/local/policy-service/configs:ro


  guardian-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./guardian-service/Dockerfile
    ports:
      - "5007:5007"
    volumes:
      - ./guardian-service/tls:/usr/local/guardian-service/tls:ro
      - ./guardian-service/configs:/usr/local/guardian-service/configs:ro
    depends_on:
      - mongo
      - message-broker
      - auth-service
      - logger-service
      - worker-service-1
      - worker-service-2
      - policy-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
    expose:
      - 6555
      - 5007

  application-events:
    build:
      context: .
      dockerfile: application-events/Dockerfile
    expose:
      - 3012
    ports:
      - "3012:3012"
    depends_on:
      - mongo
      - message-broker
      - guardian-service
      - auth-service
      - logger-service


  mrv-sender:
    build:
      context: .
      dockerfile: ./mrv-sender/Dockerfile
    expose:
      - 3003
      - 5008
    ports:
      - "5008:5008"

  topic-viewer:
    build:
      context: .
      dockerfile: ./topic-viewer/Dockerfile
    expose:
      - 3006
      - 5009
    ports:
      - "5009:5009"

  web-proxy:
    build:
      context: .
      dockerfile: ./web-proxy/Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - guardian-service
      - auth-service
      - api-gateway
      - mrv-sender
      - mongo-express

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SERVER_HTTP_PORT=9080
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/prometheus-dashboard.json
    ports:
      - "9080:9080"
    networks:
      - monitoring

volumes:
  mongo:
  prometheus_data: {}
  grafana_data: {}
  branding_data:
  # volume-guardian-service:
  # volume-ui-service:
  # volume-mrv-sender:
  #  volume-message-broker:

networks:
  monitoring:
    driver: bridge
