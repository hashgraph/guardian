version: "3.8"
services:
  mongo:
    image: mongo:6.0.3
    command: "--setParameter allowDiskUseByDefault=true"
    restart: always
    expose:
      - 27017

  cache:
    image: registry.redict.io/redict
    restart: always
    expose:
      - 6379
    ports:
      - "6379:6379"

  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    expose:
      - 8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_SITE_BASEURL: /mongo-admin
    depends_on:
      - mongo

  ipfs-node:
    image: ipfs/kubo:v0.22.0
    ports:
      - "5001:5001"
      - "4001:4001"
      - "8080:8080"
    volumes:
      - ./runtime-data/ipfs/staging:/export:rw
      - ./runtime-data/ipfs/data:/data/ipfs:rw

  message-broker:
    image: nats:2.9.8
    expose:
      - 4222
    ports:
      - '8222:8222'
    command: '--http_port 8222'

  vault:
    image: vault:1.12.2
    expose:
      - 8200
    ports:
      - '8200:8200'
    environment:
      VAULT_SERVER: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: "1234"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./file:/vault/file:rw
      - ./config:/vault/config:rw


# https://docs.docker.com/compose/environment-variables/envvars-precedence/
# Environment leverage the gerarchy defined in the docker compose between "env_file" and "environment" attributes
# ecosystem variables defined in the "env_file" .env.${GUARDIAN_ENV}.guardian.system
# specific service variables defined by "environment" can override what is defined in the ecosystem file

  logger-service:
    env_file:
      - ./.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./logger-service/Dockerfile
    depends_on:
      - message-broker
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${LOGGER_SERVICE_CHANNEL}
      - DB_DATABASE=${LOGGER_DB_DATABASE}

  notification-service:
    env_file:
      - ./configs/.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    depends_on:
      - message-broker
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${NOTIFICATION_SERVICE_CHANNEL}
      - DB_DATABASE=${NOTIFICATION_DB_DATABASE}

  auth-service:
    env_file:
      - ./.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    depends_on:
      - mongo
      - vault
      - message-broker
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${AUTH_SERVICE_CHANNEL}
      - DB_DATABASE=${AUTH_DB_DATABASE}

  worker-service-1:
    env_file:
      - ./.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./worker-service/Dockerfile
    depends_on:
      ipfs-node:
        condition: service_healthy
      auth-service:
        condition: service_started
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${WORKER_1_SERVICE_CHANNEL}

  worker-service-2:
    env_file:
      - ./.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./worker-service/Dockerfile
    depends_on:
      ipfs-node:
        condition: service_healthy
      auth-service:
        condition: service_started
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${WORKER_2_SERVICE_CHANNEL}

  api-gateway:
    env_file:
      - ./.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    expose:
      - 3002
    depends_on:
      - mongo
      - cache
      - message-broker
      - guardian-service
      - auth-service
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${API_SERVICE_CHANNEL}


  policy-service:
    env_file:
      - ./.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./policy-service/Dockerfile
    depends_on:
      - mongo
      - message-broker
      - auth-service
      - logger-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${POLICY_SERVICE_CHANNEL}
      - DB_DATABASE=${POLICY_DB_DATABASE}
      - LOG_LEVEL=${POLICY_LOG_LEVEL}
      - MULTI_POLICY_SCHEDULER=${POLICY_MULTI_POLICY_SCHEDULER}
      - EXTERNAL_DOCUMENTS_SCHEDULER=${EXTERNAL_DOCUMENTS_SCHEDULER}

  guardian-service:
    env_file:
      - ./.env.${GUARDIAN_ENV}.guardian.system
    build:
      context: .
      dockerfile: ./guardian-service/Dockerfile
    depends_on:
      - mongo
      - message-broker
      - auth-service
      - logger-service
      - worker-service-1
      - worker-service-2
      - policy-service
    environment:
      - GUARDIAN_ENV=${GUARDIAN_ENV}
      - SERVICE_CHANNEL=${GUARDIAN_SERVICE_CHANNEL}
      - DB_DATABASE=${GUARDIAN_DB_DATABASE}
      - LOG_LEVEL=${GUARDIAN_LOG_LEVEL}
      - MULTI_POLICY_SCHEDULER=${GUARDIAN_MULTI_POLICY_SCHEDULER}

  mrv-sender:
    build:
      context: .
      dockerfile: ./mrv-sender/Dockerfile
    expose:
      - 3005

  topic-viewer:
    build:
      context: .
      dockerfile: ./topic-viewer/Dockerfile
    expose:
      - 3006

  web-proxy:
    build:
      context: .
      dockerfile: ./web-proxy/Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - guardian-service
      - auth-service
      - api-gateway
      - mrv-sender
      - mongo-express
volumes:
  mongo:
  # volume-guardian-service:
  # volume-ui-service:
  # volume-mrv-sender:
  #  volume-message-broker:
