openapi: 3.0.0
paths:
  /accounts/session:
    get:
      description: Returns current user session.
      operationId: AccountApi_getSession
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsSessionResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns current session of the user.
      tags:
        - accounts
  /accounts/register:
    post:
      description: Object that contain username, password and role (optional) fields.
      operationId: AccountApi_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Registers a new user account.
      tags:
        - accounts
  /accounts/login:
    post:
      operationId: AccountApi_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsSessionResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Logs user into the system.
      tags:
        - accounts
  /accounts/change-password:
    post:
      operationId: AccountApi_changePassword
      parameters: []
      requestBody:
        required: true
        description: User credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsSessionResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Change user password.
      tags:
        - accounts
  /accounts/access-token:
    post:
      description: Returns access token.
      operationId: AccountApi_getAccessToken
      parameters: []
      responses:
        '200':
          description: Successful operation.
      summary: Returns access token.
      tags:
        - accounts
  /accounts:
    get:
      description: >-
        Returns all users except those with roles Standard Registry and Auditor.
        Only users with the Standard Registry role are allowed to make the
        request.
      operationId: AccountApi_getAllAccounts
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of users, excluding Standard Registry and Auditors.
      tags:
        - accounts
  /accounts/standard-registries:
    get:
      description: Returns all Standard Registries.
      operationId: AccountApi_getStandardRegistries
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns all Standard Registries.
      tags:
        - accounts
  /accounts/standard-registries/aggregated:
    get:
      description: Returns all Standard Registries aggregated with polices and vcDocuments
      operationId: AccountApi_getAggregatedStandardRegistries
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AggregatedDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns all Standard Registries aggregated with polices and vcDocuments.
      tags:
        - accounts
  /accounts/balance:
    get:
      description: Requests current Hedera account balance.
      operationId: AccountApi_getBalance
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns user's Hedera account balance.
      tags:
        - accounts
  /analytics/search/policies:
    post:
      description: >-
        Search policies. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: AnalyticsApi_searchPolicies
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSearchPoliciesDTO'
            examples:
              Filter:
                value:
                  policyId: '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPoliciesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Search policies.
      tags:
        - analytics
  /analytics/compare/policies:
    post:
      description: >-
        Compare policies. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: AnalyticsApi_comparePolicies
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPoliciesDTO'
            examples:
              Filter1:
                value:
                  policyId1: '000000000000000000000001'
                  policyId2: '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter2:
                value:
                  policyIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter3:
                value:
                  policies:
                    - type: id
                      value: '000000000000000000000001'
                    - type: message
                      value: '0000000000.000000001'
                    - type: file
                      value:
                        id: 00000000-0000-0000-0000-000000000000
                        name: File Name
                        value: base64...
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparePoliciesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare policies.
      tags:
        - analytics
  /analytics/compare/modules:
    post:
      description: >-
        Compare modules. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: AnalyticsApi_compareModules
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterModulesDTO'
            examples:
              Filter:
                value:
                  moduleId1: '000000000000000000000001'
                  moduleId2: '000000000000000000000001'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareModulesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare modules.
      tags:
        - analytics
  /analytics/compare/schemas:
    post:
      description: >-
        Compare schemas. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: AnalyticsApi_compareSchemas
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSchemasDTO'
            examples:
              Filter:
                value:
                  schemaId1: '000000000000000000000001'
                  schemaId2: '000000000000000000000001'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareSchemasDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare schemas.
      tags:
        - analytics
  /analytics/compare/documents:
    post:
      description: >-
        Compare documents. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: AnalyticsApi_compareDocuments
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000001'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareDocumentsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare documents.
      tags:
        - analytics
  /analytics/compare/tools:
    post:
      description: >-
        Compare tools. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: AnalyticsApi_compareTools
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterToolsDTO'
            examples:
              Filter1:
                value:
                  toolId1: '000000000000000000000001'
                  toolId2: '000000000000000000000001'
              Filter2:
                value:
                  toolIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareToolsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare tools.
      tags:
        - analytics
  /analytics/compare/policies/export:
    post:
      description: >-
        Compare policies. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: AnalyticsApi_comparePoliciesExport
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          schema:
            example: csv
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPoliciesDTO'
            examples:
              Filter1:
                value:
                  policyId1: '000000000000000000000001'
                  policyId2: '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter2:
                value:
                  policyIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter3:
                value:
                  policies:
                    - type: id
                      value: '000000000000000000000001'
                    - type: message
                      value: '0000000000.000000001'
                    - type: file
                      value:
                        id: 00000000-0000-0000-0000-000000000000
                        name: File Name
                        value: base64...
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare policies.
      tags:
        - analytics
  /analytics/compare/modules/export:
    post:
      description: >-
        Compare modules. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: AnalyticsApi_compareModulesExport
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          schema:
            example: csv
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterModulesDTO'
            examples:
              Filter:
                value:
                  moduleId1: '000000000000000000000001'
                  moduleId2: '000000000000000000000001'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare modules.
      tags:
        - analytics
  /analytics/compare/schemas/export:
    post:
      description: >-
        Compare schemas. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: AnalyticsApi_compareSchemasExport
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          schema:
            example: csv
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSchemasDTO'
            examples:
              Filter:
                value:
                  schemaId1: '000000000000000000000001'
                  schemaId2: '000000000000000000000001'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare schemas.
      tags:
        - analytics
  /analytics/compare/documents/export:
    post:
      description: >-
        Compare documents. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: AnalyticsApi_compareDocumentsExport
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          schema:
            example: csv
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000001'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare documents.
      tags:
        - analytics
  /analytics/compare/tools/export:
    post:
      description: >-
        Compare tools. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: AnalyticsApi_compareToolsExport
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          schema:
            example: csv
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterToolsDTO'
            examples:
              Filter1:
                value:
                  toolId1: '000000000000000000000001'
                  toolId2: '000000000000000000000001'
              Filter2:
                value:
                  toolIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Compare tools.
      tags:
        - analytics
  /analytics/search/blocks:
    post:
      description: >-
        Search same blocks. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: AnalyticsApi_searchBlocks
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSearchBlocksDTO'
            examples:
              Filter:
                value:
                  uuid: ''
                  config: {}
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchBlocksDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Search same blocks.
      tags:
        - analytics
  /analytics/checkIndexer:
    get:
      description: Returns Indexer Availability (true/false).
      operationId: AnalyticsApi_checkIndexerAvailability
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get Indexer Availability.
      tags:
        - analytics
  /artifacts:
    get:
      description: Returns all artifacts.
      operationId: ArtifactApi_getArtifactsV2
      parameters:
        - name: id
          required: false
          in: query
          description: Artifact identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: type
          required: false
          in: query
          description: Tool|Policy
          schema:
            enum:
              - tool
              - policy
            type: string
        - name: policyId
          required: false
          in: query
          description: Policy identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: toolId
          required: false
          in: query
          description: Tool identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtifactDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns all artifacts.
      tags:
        - artifacts
  /artifacts/{parentId}:
    post:
      description: Upload artifact. For users with the Standard Registry role only.
      operationId: ArtifactApi_uploadArtifacts
      parameters:
        - name: parentId
          required: true
          in: path
          description: Parent ID
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Form data with artifacts.
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: object
                properties:
                  artifacts:
                    type: string
                    format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtifactDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Upload artifact.
      tags:
        - artifacts
  /artifacts/{artifactId}:
    delete:
      description: Delete artifact.
      operationId: ArtifactApi_deleteArtifact
      parameters:
        - name: artifactId
          required: true
          in: path
          description: Artifact ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delete artifact.
      tags:
        - artifacts
  /contracts:
    get:
      description: Returns all contracts.
      operationId: ContractsApi_getContracts
      parameters:
        - name: type
          required: true
          in: query
          description: Contract type
          schema:
            enum:
              - WIPE
              - RETIRE
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Contracts.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all contracts.
      tags:
        - contracts
    post:
      description: >-
        Create smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ContractsApi_createContract
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractConfigDTO'
      responses:
        '201':
          description: Created contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Create contract.
      tags:
        - contracts
  /contracts/import:
    post:
      description: >-
        Import smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ContractsApi_importContract
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contractId:
                  type: string
                  description: Hedera Identifier
                  example: 0.0.1
                description:
                  type: string
              required:
                - contractId
      responses:
        '200':
          description: Imported contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Import contract.
      tags:
        - contracts
  /contracts/{contractId}/permissions:
    get:
      description: >-
        Get smart-contract permissions. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ContractsApi_contractPermissions
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract Identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Contract permissions.
          content:
            application/json:
              schema:
                type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get contract permissions.
      tags:
        - contracts
  /contracts/{contractId}:
    delete:
      description: >-
        Remove smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ContractsApi_removeContract
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract Identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Remove contract.
      tags:
        - contracts
  /contracts/wipe/requests:
    get:
      description: >-
        Returns all wipe requests. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_getWipeRequests
      parameters:
        - name: contractId
          required: true
          in: query
          description: Contract identifier
          schema:
            example: 0.0.1
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WiperRequestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all wipe requests.
      tags:
        - contracts
  /contracts/wipe/{contractId}/requests/enable:
    post:
      description: >-
        Enable wipe contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ContractsApi_enableWipeRequests
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Enable wipe requests.
      tags:
        - contracts
  /contracts/wipe/{contractId}/requests/disable:
    post:
      description: >-
        Disable wipe contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ContractsApi_disableWipeRequests
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Disable wipe requests.
      tags:
        - contracts
  /contracts/wipe/requests/{requestId}/approve:
    post:
      description: >-
        Approve wipe contract request. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ContractsApi_approveWipeRequest
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Approve wipe request.
      tags:
        - contracts
  /contracts/wipe/requests/{requestId}/reject:
    delete:
      description: >-
        Reject wipe contract request. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_rejectWipeRequest
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: ban
          required: false
          in: query
          description: Reject and ban
          schema:
            example: true
            type: boolean
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Reject wipe request.
      tags:
        - contracts
  /contracts/wipe/{contractId}/requests:
    delete:
      description: >-
        Clear wipe contract requests. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_clearWipeRequests
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Clear wipe requests.
      tags:
        - contracts
  /contracts/wipe/{contractId}/requests/{hederaId}:
    delete:
      description: >-
        Clear wipe contract requests for specific hedera account. Only users
        with the Standard Registry role are allowed to make the request.
      operationId: ContractsApi_clearWipeRequestsWithHederaId
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Clear wipe requests for hedera account.
      tags:
        - contracts
  /contracts/wipe/{contractId}/admin/{hederaId}:
    post:
      description: >-
        Add wipe contract admin. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ContractsApi_wipeAddAdmin
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add wipe admin.
      tags:
        - contracts
    delete:
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_wipeRemoveAdmin
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Remove wipe admin.
      tags:
        - contracts
  /contracts/wipe/{contractId}/manager/{hederaId}:
    post:
      description: >-
        Add wipe contract manager. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_wipeAddManager
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add wipe manager.
      tags:
        - contracts
    delete:
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_wipeRemoveManager
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Remove wipe manager.
      tags:
        - contracts
  /contracts/wipe/{contractId}/wiper/{hederaId}:
    post:
      description: >-
        Add wipe contract wiper. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ContractsApi_wipeAddWiper
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add wipe wiper.
      tags:
        - contracts
    delete:
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_wipeRemoveWiper
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Remove wipe wiper.
      tags:
        - contracts
  /contracts/wipe/{contractId}/wiper/{hederaId}/{tokenId}:
    post:
      description: >-
        Add wipe contract wiper for specific token. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: ContractsApi_wipeAddWiperWithToken
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
        - name: tokenId
          required: true
          in: path
          description: Token identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add wipe wiper for token.
      tags:
        - contracts
    delete:
      description: >-
        Remove wipe contract wiper for specific token. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ContractsApi_wipeRemoveWiperWithToken
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
        - name: tokenId
          required: true
          in: path
          description: Token identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Remove wipe wiper for token.
      tags:
        - contracts
  /contracts/retire/{contractId}/pools/sync:
    post:
      description: >-
        Sync retire contract pools. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_retireSyncPools
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Sync date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Date'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Sync retire pools.
      tags:
        - contracts
  /contracts/retire/requests:
    get:
      description: Returns all retire requests.
      operationId: ContractsApi_getRetireRequests
      parameters:
        - name: contractId
          required: true
          in: query
          description: Contract identifier
          schema:
            example: 0.0.1
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetireRequestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all retire requests.
      tags:
        - contracts
  /contracts/retire/pools:
    get:
      description: Returns all retire pools.
      operationId: ContractsApi_getRetirePools
      parameters:
        - name: contractId
          required: true
          in: query
          description: Contract identifier
          schema:
            example: 0.0.1
            type: string
        - name: tokens
          required: true
          in: query
          description: Tokens
          schema:
            example: 0.0.1,0.0.2,0.0.3
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetirePoolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all retire pools.
      tags:
        - contracts
  /contracts/retire/{contractId}/requests:
    delete:
      description: >-
        Clear retire contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ContractsApi_clearRetireRequests
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Clear retire requests.
      tags:
        - contracts
  /contracts/retire/{contractId}/pools:
    delete:
      description: >-
        Clear retire contract pools. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_clearRetirePools
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Clear retire pools.
      tags:
        - contracts
    post:
      description: >-
        Set retire contract pool. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ContractsApi_setRetirePool
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetirePoolTokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetirePoolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Set retire pool.
      tags:
        - contracts
  /contracts/retire/pools/{poolId}:
    delete:
      description: >-
        Unset retire contract pool. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_unsetRetirePool
      parameters:
        - name: poolId
          required: true
          in: path
          description: Pool Identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Unset retire pool.
      tags:
        - contracts
  /contracts/retire/requests/{requestId}:
    delete:
      description: >-
        Unset retire contract request. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ContractsApi_unsetRetireRequest
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request Identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Unset retire request.
      tags:
        - contracts
  /contracts/retire/pools/{poolId}/retire:
    post:
      description: Retire tokens.
      operationId: ContractsApi_retire
      parameters:
        - name: poolId
          required: true
          in: path
          description: Pool Identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetireRequestTokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retire tokens.
      tags:
        - contracts
  /contracts/retire/requests/{requestId}/approve:
    post:
      description: >-
        Approve retire contract request. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ContractsApi_approveRetire
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Approve retire request.
      tags:
        - contracts
  /contracts/retire/requests/{requestId}/cancel:
    delete:
      description: Cancel retire contract request.
      operationId: ContractsApi_cancelRetireRequest
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Cancel retire request.
      tags:
        - contracts
  /contracts/retire/{contractId}/admin/{hederaId}:
    post:
      description: >-
        Add retire contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_retireAddAdmin
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add retire admin.
      tags:
        - contracts
    delete:
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ContractsApi_retireRemoveAdmin
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          schema:
            example: 652745597a7b53526de37c05
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Remove wipe admin.
      tags:
        - contracts
  /contracts/retire:
    get:
      description: Returns all retire vcs.
      operationId: ContractsApi_getRetireVCs
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all retire vcs.
      tags:
        - contracts
  /contracts/retireIndexer:
    get:
      description: Returns all retire vcs from Indexer.
      operationId: ContractsApi_getRetireVCsFromIndexer
      parameters:
        - name: contractTopicId
          required: true
          in: query
          description: The topic id of contract
          schema:
            example: 0.0.0000000
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all retire vcs from Indexer.
      tags:
        - contracts
  /demo/registered-users:
    get:
      description: Returns list of registered users.
      operationId: DemoApi_registeredUsers
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredUsersDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Returns list of registered users.
      tags:
        - demo
  /demo/random-key:
    get:
      description: Generate demo key.
      operationId: DemoApi_randomKey
      parameters: []
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Generate demo key.
      tags:
        - demo
  /demo/push/random-key:
    get:
      description: Generate demo key.
      operationId: DemoApi_pushRandomKey
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Generate demo key.
      tags:
        - demo
  /external/{policyId}/{blockTag}:
    post:
      description: Sends data from an external source.
      operationId: ExternalApi_receiveExternalDataCustom
      parameters:
        - name: policyId
          required: true
          in: path
          schema:
            type: string
        - name: blockTag
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains a VC Document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalDocumentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Sends data from an external source.
      tags:
        - external
  /external:
    post:
      description: Sends data from an external source.
      operationId: ExternalApi_receiveExternalData
      parameters: []
      requestBody:
        required: true
        description: Object that contains a VC Document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalDocumentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Sends data from an external source.
      tags:
        - external
  /ipfs/file:
    post:
      description: Add file from ipfs.
      operationId: IpfsApi_postFile
      parameters: []
      requestBody:
        required: true
        description: Binary data.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add file from ipfs.
      tags:
        - ipfs
  /ipfs/file/dry-run/{policyId}:
    post:
      description: Add file from ipfs for dry run mode.
      operationId: IpfsApi_postFileDryRun
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Binary data.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add file from ipfs for dry run mode.
      tags:
        - ipfs
  /ipfs/file/{cid}:
    get:
      description: Get file from ipfs.
      operationId: IpfsApi_getFile
      parameters:
        - name: cid
          required: true
          in: path
          description: File cid
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get file from ipfs.
      tags:
        - ipfs
  /ipfs/file/{cid}/dry-run:
    get:
      description: Get file from ipfs for dry run mode.
      operationId: IpfsApi_getFileDryRun
      parameters:
        - name: cid
          required: true
          in: path
          description: File cid
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get file from ipfs for dry run mode.
      tags:
        - ipfs
  /logs:
    post:
      description: >-
        Return a list of all logs. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: LoggerApi_getLogs
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogFilterDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResultDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all logs.
      tags:
        - logs
  /logs/attributes:
    get:
      description: >-
        Return a list of attributes. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: LoggerApi_getAttributes
      parameters:
        - name: name
          required: false
          in: query
          description: Name
          schema:
            example: Search
            type: number
        - name: existingAttributes
          required: false
          in: query
          description: Existing attributes
          schema:
            example:
              - WORKER
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of attributes.
      tags:
        - logs
  /logs/seq:
    get:
      description: >-
        Return url on seq store. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: LoggerApi_getSeqUrl
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  seq_url:
                    type: string
                    example: http://localhost:5341
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return url on seq store.
      tags:
        - logs
  /map/key:
    get:
      description: Return map API key.
      operationId: MapApi_getKey
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get map API key.
      tags:
        - map
  /map/sh:
    get:
      description: Return sentinel API key.
      operationId: MapApi_getSentinelKey
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get sentinel API key.
      tags:
        - map
  /metrics:
    get:
      operationId: MetricsApi_getMetrics
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - metrics
  /modules:
    post:
      description: >-
        Creates a new module. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ModulesApi_postModules
      parameters: []
      requestBody:
        required: true
        description: Module config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Created module.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new module.
      tags:
        - modules
    get:
      description: >-
        Returns all modules. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ModulesApi_getModulesV2
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all modules.
      tags:
        - modules
  /modules/schemas:
    get:
      description: >-
        Returns all module schemas. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ModulesApi_getModuleSchemas
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: topicId
          required: false
          in: query
          description: Topic id
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all module schemas.
      tags:
        - modules
    post:
      description: >-
        Creates a new module schema. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ModulesApi_postSchemas
      parameters: []
      requestBody:
        required: true
        description: Schema config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '201':
          description: Created schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new module schema.
      tags:
        - modules
  /modules/{uuid}:
    delete:
      description: >-
        Deletes the module with the provided module ID. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ModulesApi_deleteModule
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the module.
      tags:
        - modules
    get:
      description: >-
        Retrieves module configuration for the specified module ID. Only users
        with the Standard Registry role are allowed to make the request.
      operationId: ModulesApi_getModule
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves module configuration.
      tags:
        - modules
    put:
      description: >-
        Updates module configuration for the specified module ID. Only users
        with the Standard Registry role are allowed to make the request.
      operationId: ModulesApi_putModule
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      requestBody:
        required: true
        description: Module config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates module configuration.
      tags:
        - modules
  /modules/menu:
    get:
      description: >-
        Returns modules menu. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ModulesApi_getMenu
      parameters: []
      responses:
        '200':
          description: Modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of modules.
      tags:
        - modules
  /modules/{uuid}/export/file:
    get:
      description: >-
        Returns a zip file containing the published module and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ModulesApi_moduleExportFile
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: File.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: >-
        Return module and its artifacts in a zip file format for the specified
        module.
      tags:
        - modules
  /modules/{uuid}/export/message:
    get:
      description: >-
        Returns the Hedera message ID for the specified module published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: ModulesApi_moduleExportMessage
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportMessageDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return Heder message ID for the specified published module.
      tags:
        - modules
  /modules/import/message:
    post:
      description: >-
        Imports new module and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: ModulesApi_moduleImportMessage
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Created module.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new module from IPFS.
      tags:
        - modules
  /modules/import/file:
    post:
      description: >-
        Imports new module and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ModulesApi_moduleImportFile
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Created module.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new module from a zip file.
      tags:
        - modules
  /modules/import/message/preview:
    post:
      description: >-
        Imports new module and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: ModulesApi_moduleImportMessagePreview
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Module preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModulePreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new module from IPFS.
      tags:
        - modules
  /modules/import/file/preview:
    post:
      description: >-
        Imports new module and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ModulesApi_moduleImportFilePreview
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Module preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModulePreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new module from a zip file.
      tags:
        - modules
  /modules/{uuid}/publish:
    put:
      description: >-
        Publishes the module with the specified (internal) module ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      operationId: ModulesApi_publishModule
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      requestBody:
        required: true
        description: Module.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the module onto IPFS.
      tags:
        - modules
  /modules/validate:
    post:
      description: >-
        Validates selected module. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ModulesApi_validateModule
      parameters: []
      requestBody:
        required: true
        description: Module config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Validation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Validates selected module.
      tags:
        - modules
  /tools:
    post:
      description: >-
        Creates a new tool. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ToolsApi_createNewTool
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new tool.
      tags:
        - tools
    get:
      description: >-
        Returns all tools. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ToolsApi_getToolsV2
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all tools.
      tags:
        - tools
  /tools/push:
    post:
      description: >-
        Creates a new tool. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ToolsApi_createNewToolAsync
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new tool.
      tags:
        - tools
  /tools/{id}:
    delete:
      description: Deletes the tool.
      operationId: ToolsApi_deleteTool
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: >-
        Deletes the tool with the provided tool ID. Only users with the Standard
        Registry role are allowed to make the request.
      tags:
        - tools
    get:
      description: >-
        Retrieves tool configuration for the specified tool ID. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: ToolsApi_getToolById
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves tool configuration.
      tags:
        - tools
    put:
      description: >-
        Updates tool configuration for the specified tool ID. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: ToolsApi_updateTool
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates tool configuration.
      tags:
        - tools
  /tools/{id}/publish:
    put:
      description: >-
        Publishes the tool with the specified (internal) tool ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      operationId: ToolsApi_publishTool
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the tool onto IPFS.
      tags:
        - tools
  /tools/{id}/push/publish:
    put:
      description: >-
        Publishes the tool with the specified (internal) tool ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      operationId: ToolsApi_publishToolAsync
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the tool onto IPFS.
      tags:
        - tools
  /tools/validate:
    post:
      description: >-
        Validates selected tool. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ToolsApi_validateTool
      parameters: []
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Validation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Validates selected tool.
      tags:
        - tools
  /tools/{id}/export/file:
    get:
      description: >-
        Returns a zip file containing the published tool and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: ToolsApi_toolExportFile
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: >-
        Return tool and its artifacts in a zip file format for the specified
        tool.
      tags:
        - tools
  /tools/{id}/export/message:
    get:
      description: >-
        Returns the Hedera message ID for the specified tool published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: ToolsApi_toolExportMessage
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportMessageDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return Heder message ID for the specified published tool.
      tags:
        - tools
  /tools/import/message/preview:
    post:
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: ToolsApi_toolImportMessagePreview
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Tool preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from IPFS.
      tags:
        - tools
  /tools/import/message:
    post:
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: ToolsApi_toolImportMessage
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from IPFS.
      tags:
        - tools
  /tools/import/file/preview:
    post:
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ToolsApi_toolImportFilePreview
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Module preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from a zip file.
      tags:
        - tools
  /tools/import/file:
    post:
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ToolsApi_toolImportFile
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from a zip file.
      tags:
        - tools
  /tools/import/file-metadata:
    post:
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ToolsApi_toolImportFileWithMetadata
      parameters: []
      requestBody:
        required: true
        description: Form data with tool file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from a zip file.
      tags:
        - tools
  /tools/push/import/file:
    post:
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ToolsApi_toolImportFileAsync
      parameters: []
      requestBody:
        required: true
        description: A zip file containing tool config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from a zip file.
      tags:
        - tools
  /tools/push/import/file-metadata:
    post:
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ToolsApi_toolImportFileWithMetadataAsync
      parameters: []
      requestBody:
        required: true
        description: Form data with tool file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from a zip file.
      tags:
        - tools
  /tools/push/import/message:
    post:
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: ToolsApi_toolImportMessageAsync
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new tool from IPFS.
      tags:
        - tools
  /tools/menu/all:
    get:
      description: >-
        Returns tools menu. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ToolsApi_getMenu
      parameters: []
      responses:
        '200':
          description: Modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of tools.
      tags:
        - tools
  /profiles/{username}:
    get:
      description: >-
        Returns user account information. For users with the Standard Registry
        role it also returns address book and VC document information.
      operationId: ProfileApi_getProfile
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to fetch the information
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns user account info.
      tags:
        - profiles
    put:
      description: >-
        Sets Hedera credentials for the user. For users with the Standard
        Registry role it also creates an address book.
      operationId: ProfileApi_setUserProfile
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to update the information.
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Sets Hedera credentials for the user.
      tags:
        - profiles
  /profiles/push/{username}:
    put:
      description: >-
        Sets Hedera credentials for the user. For users with the Standard
        Registry role it also creates an address book.
      operationId: ProfileApi_setUserProfileAsync
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to update the information.
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Sets Hedera credentials for the user.
      tags:
        - profiles
  /profiles/{username}/balance:
    get:
      description: >-
        Requests Hedera account balance. Only users with the Installer role are
        allowed to make the request.
      operationId: ProfileApi_getUserBalance
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to fetch the balance.
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns user's Hedera account balance.
      tags:
        - profiles
  /profiles/restore/{username}:
    put:
      description: Restore user data (policy, DID documents, VC documents).
      operationId: ProfileApi_restoreUserProfile
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to restore the information.
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Restore user data (policy, DID documents, VC documents).
      tags:
        - profiles
  /profiles/restore/topics/{username}:
    put:
      description: List of available recovery topics.
      operationId: ProfileApi_restoreTopic
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to restore the information.
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: List of available recovery topics.
      tags:
        - profiles
  /profiles/did-document/validate:
    post:
      description: Validate DID document format.
      operationId: ProfileApi_validateDidDocument
      parameters: []
      requestBody:
        required: true
        description: DID Document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DidDocumentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DidDocumentStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Validate DID document format.
      tags:
        - profiles
  /profiles/did-keys/validate:
    post:
      description: Validate DID document keys.
      operationId: ProfileApi_validateDidKeys
      parameters: []
      requestBody:
        required: true
        description: DID Document and keys.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DidDocumentWithKeyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DidKeyStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Validate DID document keys.
      tags:
        - profiles
  /policies:
    get:
      description: Returns all policies.
      operationId: PolicyApi_getPoliciesV2
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all policies.
      tags:
        - policies
    post:
      description: >-
        Creates a new policy. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_createPolicy
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new policy.
      tags:
        - policies
  /policies/migrate-data:
    post:
      description: >-
        Migrate policy data. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_migrateData
      parameters: []
      requestBody:
        required: true
        description: Migration config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationConfigDTO'
      responses:
        '200':
          description: Errors while migration.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    error:
                      type: string
                    id:
                      type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Migrate policy data.
      tags:
        - policies
  /policies/push/migrate-data:
    post:
      description: >-
        Migrate policy data asynchronous. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: PolicyApi_migrateDataAsync
      parameters: []
      requestBody:
        required: true
        description: Migration configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationConfigDTO'
      responses:
        '202':
          description: Created task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Migrate policy data asynchronous.
      tags:
        - policies
  /policies/push:
    post:
      description: >-
        Creates a new policy. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_createPolicyAsync
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new policy.
      tags:
        - policies
  /policies/push/{policyId}:
    post:
      description: >-
        Clones policy. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: PolicyApi_updatePolicyAsync
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Clones policy.
      tags:
        - policies
    delete:
      description: >-
        Remove policy. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: PolicyApi_deletePolicyAsync
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Remove policy.
      tags:
        - policies
  /policies/{policyId}:
    get:
      description: >-
        Retrieves policy configuration for the specified policy ID. Only users
        with the Standard Registry role are allowed to make the request.
      operationId: PolicyApi_getPolicy
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Policy configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves policy configuration.
      tags:
        - policies
    put:
      description: >-
        Updates policy configuration for the specified policy ID. Only users
        with the Standard Registry role are allowed to make the request.
      operationId: PolicyApi_updatePolicy
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Policy configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates policy configuration.
      tags:
        - policies
  /policies/{policyId}/publish:
    put:
      description: >-
        Publishes the policy with the specified (internal) policy ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      operationId: PolicyApi_publishPolicy
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the policy onto IPFS.
      tags:
        - policies
  /policies/push/{policyId}/publish:
    put:
      description: >-
        Publishes the policy with the specified (internal) policy ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      operationId: PolicyApi_publishPolicyAsync
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the policy onto IPFS.
      tags:
        - policies
  /policies/{policyId}/dry-run:
    put:
      description: >-
        Run policy without making any persistent changes or executing
        transaction. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: PolicyApi_dryRunPolicy
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Dry Run policy.
      tags:
        - policies
  /policies/{policyId}/discontinue:
    put:
      description: >-
        Discontinue policy. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_discontinuePolicy
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Discontinue details.
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Discontinue policy.
      tags:
        - policies
  /policies/{policyId}/draft:
    put:
      description: >-
        Return policy to editing. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_draftPolicy
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return policy to editing.
      tags:
        - policies
  /policies/validate:
    post:
      description: >-
        Validates selected policy. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: PolicyApi_validatePolicy
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Validation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Validates policy.
      tags:
        - policies
  /policies/{policyId}/navigation:
    get:
      description: Returns a policy navigation.
      operationId: PolicyApi_getPolicyNavigation
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a policy navigation.
      tags:
        - policies
  /policies/{policyId}/groups:
    get:
      description: Returns a list of groups the user is a member of.
      operationId: PolicyApi_getPolicyGroups
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of groups the user is a member of.
      tags:
        - policies
    post:
      description: >-
        Makes the selected group active. if UUID is not set then returns the
        user to the default state.
      operationId: PolicyApi_setPolicyGroups
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Makes the selected group active.
      tags:
        - policies
  /policies/{policyId}/documents:
    get:
      description: >-
        Get policy documents. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_getPolicyDocuments
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: type
          required: false
          in: query
          description: Document type.
          schema:
            enum:
              - VC
              - VP
            type: string
        - name: includeDocument
          required: false
          in: query
          description: Include document field.
          schema:
            example: true
            type: boolean
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Documents.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get policy documents.
      tags:
        - policies
  /policies/{policyId}/data:
    get:
      description: >-
        Get policy data. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: PolicyApi_downloadPolicyData
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Policy data.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get policy data.
      tags:
        - policies
  /policies/data:
    post:
      description: >-
        Upload policy data. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_uploadPolicyData
      parameters: []
      requestBody:
        required: true
        description: Policy data file
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Uploaded policy.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Upload policy data.
      tags:
        - policies
  /policies/{policyId}/virtual-keys:
    get:
      description: >-
        Get policy virtual keys. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_downloadVirtualKeys
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Policy virtual keys.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get policy virtual keys.
      tags:
        - policies
    post:
      description: >-
        Upload policy virtual keys. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: PolicyApi_uploadVirtualKeys
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Virtual keys file
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Operation completed.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Upload policy virtual keys.
      tags:
        - policies
  /policies/{policyId}/tag-block-map:
    get:
      description: >-
        Get policy tag block map. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_getTagBlockMap
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Policy tag block map.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get policy tag block map.
      tags:
        - policies
  /policies/{policyId}/blocks:
    get:
      description: >-
        Returns data from the root policy block. Only users with the Standard
        Registry and Installer role are allowed to make the request.
      operationId: PolicyApi_getPolicyBlocks
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
        '503':
          description: Block Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableErrorDTO'
      security:
        - bearer: []
      summary: Retrieves data for the policy root block.
      tags:
        - policies
  /policies/{policyId}/blocks/{uuid}:
    get:
      description: >-
        Requests block data. Only users with a role that described in block are
        allowed to make the request.
      operationId: PolicyApi_getBlockData
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: uuid
          required: true
          in: path
          description: Block Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
        '503':
          description: Block Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableErrorDTO'
      security:
        - bearer: []
      summary: Requests block data.
      tags:
        - policies
    post:
      description: Sends data to the specified block.
      operationId: PolicyApi_setBlockData
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: uuid
          required: true
          in: path
          description: Block Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      requestBody:
        required: true
        description: Data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
        '503':
          description: Block Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableErrorDTO'
      security:
        - bearer: []
      summary: Sends data to the specified block.
      tags:
        - policies
  /policies/{policyId}/tag/{tagName}/blocks:
    post:
      description: Sends data to the specified block.
      operationId: PolicyApi_setBlocksByTagName
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: tagName
          required: true
          in: path
          description: Block name (Tag)
          schema:
            example: block-tag
            type: string
      requestBody:
        required: true
        description: Data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
        '503':
          description: Block Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableErrorDTO'
      security:
        - bearer: []
      summary: Sends data to the specified block.
      tags:
        - policies
    get:
      description: >-
        Requests block data by tag. Only users with a role that described in
        block are allowed to make the request.
      operationId: PolicyApi_getBlocksByTagName
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: tagName
          required: true
          in: path
          description: Block name (Tag)
          schema:
            example: block-tag
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
        '503':
          description: Block Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableErrorDTO'
      security:
        - bearer: []
      summary: Requests block data.
      tags:
        - policies
  /policies/{policyId}/tag/{tagName}:
    get:
      description: >-
        Requests block data by tag. Only users with a role that described in
        block are allowed to make the request.
      operationId: PolicyApi_getBlockByTagName
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: tagName
          required: true
          in: path
          description: Block name (Tag)
          schema:
            example: block-tag
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Requests block config.
      tags:
        - policies
  /policies/{policyId}/blocks/{uuid}/parents:
    get:
      description: >-
        Requests block's parents. Only users with a role that described in block
        are allowed to make the request.
      operationId: PolicyApi_getBlockParents
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: uuid
          required: true
          in: path
          description: Block Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Requests block's parents.
      tags:
        - policies
  /policies/blocks/about:
    get:
      description: >-
        Returns block descriptions. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: PolicyApi_getBlockAbout
      parameters: []
      responses:
        '200':
          description: Block descriptions.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns block descriptions.
      tags:
        - policies
  /policies/{policyId}/export/file:
    get:
      description: >-
        Returns a zip file containing the published policy and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: PolicyApi_getPolicyExportFile
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: >-
        Return policy and its artifacts in a zip file format for the specified
        policy.
      tags:
        - policies
  /policies/{policyId}/export/message:
    get:
      description: >-
        Returns the Hedera message ID for the specified policy published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: PolicyApi_getPolicyExportMessage
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportMessageDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return Heder message ID for the specified published policy.
      tags:
        - policies
  /policies/{policyId}/export/xlsx:
    get:
      description: >-
        Returns a xlsx file containing the published policy and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: PolicyApi_getPolicyExportXlsx
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: >-
        Return policy and its artifacts in a xlsx file format for the specified
        policy.
      tags:
        - policies
  /policies/import/message:
    post:
      description: >-
        Imports new policy and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: PolicyApi_importPolicyFromMessage
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          schema:
            example: 0.0.00000001
            type: string
        - name: demo
          required: false
          in: query
          description: Import policy in demo mode.
          schema:
            example: true
            type: boolean
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Created policy.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from IPFS.
      tags:
        - policies
  /policies/push/import/message:
    post:
      description: >-
        Imports new policy and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: PolicyApi_importPolicyFromMessageAsync
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          schema:
            example: 0.0.00000001
            type: string
        - name: demo
          required: false
          in: query
          description: Import policy in demo mode.
          schema:
            example: true
            type: boolean
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from IPFS.
      tags:
        - policies
  /policies/import/message/preview:
    post:
      description: >-
        Previews the policy from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importMessage
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Policy preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Policy preview from IPFS.
      tags:
        - policies
  /policies/push/import/message/preview:
    post:
      description: >-
        Previews the policy from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importFromMessagePreview
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Policy preview from IPFS.
      tags:
        - policies
  /policies/import/file:
    post:
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importPolicyFromFile
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          schema:
            example: 0.0.00000001
            type: string
        - name: demo
          required: false
          in: query
          description: Import policy in demo mode.
          schema:
            example: true
            type: boolean
      requestBody:
        required: true
        description: A zip file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Created policy.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from a zip file.
      tags:
        - policies
  /policies/import/file-metadata:
    post:
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importPolicyFromFileWithMetadata
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          schema:
            example: 0.0.00000001
            type: string
        - name: demo
          required: false
          in: query
          description: Import policy in demo mode.
          schema:
            example: true
            type: boolean
      requestBody:
        required: true
        description: Form data with policy file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                policyFile:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from a zip file with metadata.
      tags:
        - policies
  /policies/push/import/file:
    post:
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importPolicyFromFileAsync
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          schema:
            example: 0.0.00000001
            type: string
        - name: demo
          required: false
          in: query
          description: Import policy in demo mode.
          schema:
            example: true
            type: boolean
      requestBody:
        required: true
        description: A zip file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from a zip file.
      tags:
        - policies
  /policies/push/import/file-metadata:
    post:
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importPolicyFromFileWithMetadataAsync
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          schema:
            example: 0.0.00000001
            type: string
        - name: demo
          required: false
          in: query
          description: Import policy in demo mode.
          schema:
            example: true
            type: boolean
      requestBody:
        required: true
        description: Form data with policy file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                policyFile:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from a zip file with metadata.
      tags:
        - policies
  /policies/import/file/preview:
    post:
      description: >-
        Previews the policy from a zip file without loading it into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: PolicyApi_importPolicyFromFilePreview
      parameters: []
      requestBody:
        required: true
        description: A zip file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Policy preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Policy preview from a zip file.
      tags:
        - policies
  /policies/import/xlsx:
    post:
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided xlsx file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importPolicyFromXlsx
      parameters:
        - name: policyId
          required: true
          in: query
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from a xlsx file.
      tags:
        - policies
  /policies/push/import/xlsx:
    post:
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided xlsx file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: PolicyApi_importPolicyFromXlsxAsync
      parameters:
        - name: policyId
          required: true
          in: query
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new policy from a xlsx file.
      tags:
        - policies
  /policies/import/xlsx/preview:
    post:
      description: >-
        Previews the policy from a xlsx file without loading it into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      operationId: PolicyApi_importPolicyFromXlsxPreview
      parameters: []
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Policy preview from a xlsx file.
      tags:
        - policies
  /policies/{policyId}/dry-run/users:
    get:
      description: >-
        Returns virtual users. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_getDryRunUsers
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Virtual users.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns virtual users.
      tags:
        - policies
  /policies/{policyId}/dry-run/user:
    post:
      description: >-
        Creates virtual users. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_setDryRunUser
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Virtual users.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates virtual users.
      tags:
        - policies
  /policies/{policyId}/dry-run/login:
    post:
      description: >-
        Change active virtual user. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: PolicyApi_loginDryRunUser
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Virtual users.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Change active virtual user.
      tags:
        - policies
  /policies/{policyId}/savepoint/create:
    post:
      description: >-
        Create dry-run savepoint. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_createSavepoint
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: .
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: .
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Create dry-run savepoint.
      tags:
        - policies
  /policies/{policyId}/savepoint/delete:
    post:
      description: >-
        Delete dry-run savepoint. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_deleteSavepoint
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: .
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: .
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delete dry-run savepoint.
      tags:
        - policies
  /policies/{policyId}/savepoint/restore:
    get:
      description: >-
        Get savepoint state. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_getSavepointState
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: .
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: .
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get savepoint state.
      tags:
        - policies
    post:
      description: >-
        Restore dry-run savepoint. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: PolicyApi_restoreSavepoint
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: .
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: .
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Restore dry-run savepoint.
      tags:
        - policies
  /policies/{policyId}/dry-run/restart:
    post:
      description: >-
        Clear dry-run state. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_restartDryRun
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: .
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: .
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Clear dry-run state.
      tags:
        - policies
  /policies/{policyId}/dry-run/transactions:
    get:
      description: >-
        Get dry-run details (Transactions). Only users with the Standard
        Registry role are allowed to make the request.
      operationId: PolicyApi_getDryRunTransactions
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Transactions.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get dry-run details (Transactions).
      tags:
        - policies
  /policies/{policyId}/dry-run/artifacts:
    get:
      description: >-
        Get dry-run details (Artifacts). Only users with the Standard Registry
        role are allowed to make the request.
      operationId: PolicyApi_getDryRunArtifacts
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Artifacts.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get dry-run details (Artifacts).
      tags:
        - policies
  /policies/{policyId}/dry-run/ipfs:
    get:
      description: >-
        Get dry-run details (Files). Only users with the Standard Registry role
        are allowed to make the request.
      operationId: PolicyApi_getDryRunIpfs
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 20
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Files.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get dry-run details (Files).
      tags:
        - policies
  /policies/{policyId}/multiple:
    get:
      description: >-
        Requests policy links. Only users with a role that described in block
        are allowed to make the request.
      operationId: PolicyApi_getMultiplePolicies
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Requests policy links.
      tags:
        - policies
    post:
      description: >-
        Creates policy link. Only users with a role that described in block are
        allowed to make the request.
      operationId: PolicyApi_setMultiplePolicies
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates policy link.
      tags:
        - policies
  /policies/{policyId}/test:
    post:
      description: >-
        Add policy test.  Only users with the Standard Registry role are allowed
        to make the request.
      operationId: PolicyApi_addPolicyTest
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Form data with tests.
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: object
                properties:
                  tests:
                    type: string
                    format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyTestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Add policy test.
      tags:
        - policies
  /policies/{policyId}/test/{testId}:
    get:
      description: >-
        Get policy test.  Only users with the Standard Registry role are allowed
        to make the request.
      operationId: PolicyApi_getPolicyTest
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: testId
          required: true
          in: path
          description: Test Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyTestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get policy test.
      tags:
        - policies
    delete:
      description: >-
        Delete policy test.  Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_deletePolicyTest
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: testId
          required: true
          in: path
          description: Test Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delete policy test.
      tags:
        - policies
  /policies/{policyId}/test/{testId}/start:
    post:
      description: >-
        Start policy test.  Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_startPolicyTest
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: testId
          required: true
          in: path
          description: Test Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyTestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Start policy test.
      tags:
        - policies
  /policies/{policyId}/test/{testId}/stop:
    post:
      description: >-
        Stop policy test.  Only users with the Standard Registry role are
        allowed to make the request.
      operationId: PolicyApi_stopPolicyTest
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: testId
          required: true
          in: path
          description: Test Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyTestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Stop policy test.
      tags:
        - policies
  /policies/{policyId}/test/{testId}/details:
    get:
      description: >-
        Get test details. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: PolicyApi_getTestDetails
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: testId
          required: true
          in: path
          description: Test Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningDetailsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get test details.
      tags:
        - policies
  /policies/methodologies/categories:
    get:
      description: Get all categories
      operationId: PolicyApi_getPolicyCategoriesAsync
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyCategoryDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Get all categories
      tags:
        - policies
  /policies/methodologies/search:
    post:
      description: Get policies by categories and text
      operationId: PolicyApi_getPoliciesByCategory
      parameters: []
      requestBody:
        required: true
        description: Filters
        content:
          application/json:
            schema:
              type: string
            examples:
              Filter1:
                value:
                  categoryIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
                  text: abc
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Get filtered policies
      tags:
        - policies
  /schema/{schemaId}:
    get:
      description: >-
        Returns schema by schema ID. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SingleSchemaApi_getSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns schema by schema ID.
      tags:
        - schema
  /schema/{schemaId}/parents:
    get:
      description: Returns all parent schemas.
      operationId: SingleSchemaApi_getSchemaParents
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema identifier
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns all parent schemas.
      tags:
        - schema
  /schema/{schemaId}/tree:
    get:
      description: Returns schema tree.
      operationId: SingleSchemaApi_getSchemaTree
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema identifier
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
                  children:
                    type: array
                    items:
                      type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns schema tree.
      tags:
        - schema
  /schemas:
    get:
      description: Returns all schemas.
      operationId: SchemaApi_getSchemasPageV2
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: category
          required: false
          in: query
          description: Schema category
          schema:
            example: POLICY
            type: string
        - name: policyId
          required: false
          in: query
          description: Policy id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: moduleId
          required: false
          in: query
          description: Module id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: toolId
          required: false
          in: query
          description: Tool id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: topicId
          required: false
          in: query
          description: Topic id
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all schemas.
      tags:
        - schemas
    put:
      description: >-
        Updates the schema. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: SchemaApi_setSchema
      parameters: []
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates the schema.
      tags:
        - schemas
  /schemas/{topicId}:
    get:
      description: Returns all schemas.
      operationId: SchemaApi_getSchemasPageByTopicId
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: category
          required: false
          in: query
          description: Schema category
          schema:
            example: POLICY
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all schemas.
      tags:
        - schemas
    post:
      description: >-
        Creates a new schema. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: SchemaApi_createNewSchema
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new schema.
      tags:
        - schemas
  /schemas/type/{schemaType}:
    get:
      description: Finds the schema using the json document type.
      operationId: SchemaApi_getSchemaByType
      parameters:
        - name: schemaType
          required: true
          in: path
          description: Type
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Finds the schema using the json document type.
      tags:
        - schemas
  /schemas/type-by-user/{schemaType}:
    get:
      description: Finds the schema using the json document type.
      operationId: SchemaApi_getSchemaByTypeAndUser
      parameters:
        - name: schemaType
          required: true
          in: path
          description: Type
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Finds the schema using the json document type.
      tags:
        - schemas
  /schemas/list/all:
    get:
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SchemaApi_getAll
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of schemas.
      tags:
        - schemas
  /schemas/list/sub:
    get:
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SchemaApi_getSub
      parameters:
        - name: category
          required: false
          in: query
          description: Schema category
          schema:
            example: POLICY
            type: string
        - name: topicId
          required: false
          in: query
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of schemas.
      tags:
        - schemas
  /schemas/schema-with-sub-schemas:
    get:
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SchemaApi_getSchemaWithSubSchemas
      parameters:
        - name: category
          required: false
          in: query
          description: Schema category
          schema:
            example: POLICY
            type: string
        - name: topicId
          required: false
          in: query
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
        - name: schemaId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of schemas.
      tags:
        - schemas
  /schemas/push/copy:
    post:
      description: >-
        Copy schema. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: SchemaApi_copySchemaAsync
      parameters: []
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Copy schema.
      tags:
        - schemas
  /schemas/push/{topicId}:
    post:
      description: >-
        Creates a new schema. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: SchemaApi_createNewSchemaAsync
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new schema.
      tags:
        - schemas
  /schemas/{schemaId}:
    delete:
      description: >-
        Deletes the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: SchemaApi_deleteSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the schema with the provided schema ID.
      tags:
        - schemas
  /schemas/{schemaId}/publish:
    put:
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      operationId: SchemaApi_publishSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionSchemaDTO'
            examples:
              Version:
                value:
                  version: 1.0.0
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the schema with the provided schema ID.
      tags:
        - schemas
  /schemas/push/{schemaId}/publish:
    put:
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      operationId: SchemaApi_publishSchemaAsync
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionSchemaDTO'
            examples:
              Version:
                value:
                  version: 1.0.0
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the schema with the provided schema ID.
      tags:
        - schemas
  /schemas/import/message/preview:
    post:
      description: >-
        Previews the schema from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importFromMessagePreview
      parameters: []
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Previews the schema from IPFS without loading it into the local DB.
      tags:
        - schemas
  /schemas/push/import/message/preview:
    post:
      description: >-
        Previews the schema from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importFromMessagePreviewAsync
      parameters: []
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Previews the schema from IPFS without loading it into the local DB.
      tags:
        - schemas
  /schemas/import/file/preview:
    post:
      description: >-
        Previews the schema from a zip file. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: SchemaApi_importFromFilePreview
      parameters: []
      requestBody:
        required: true
        description: A zip file containing schema to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Previews the schema from a zip file.
      tags:
        - schemas
  /schemas/{topicId}/import/message:
    post:
      description: >-
        Imports new schema from IPFS into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importFromMessage
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new schema from IPFS into the local DB.
      tags:
        - schemas
  /schemas/push/{topicId}/import/message:
    post:
      description: >-
        Imports new schema from IPFS into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importFromMessageAsync
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new schema from IPFS into the local DB.
      tags:
        - schemas
  /schemas/{topicId}/import/file:
    post:
      description: >-
        Imports new schema from a zip file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importToTopicFromFile
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: A zip file containing schema to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new schema from a zip file into the local DB.
      tags:
        - schemas
  /schemas/push/{topicId}/import/file:
    post:
      description: >-
        Imports new schema from a zip file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importToTopicFromFileAsync
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: A zip file containing schema to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new schema from a zip file into the local DB.
      tags:
        - schemas
  /schemas/{schemaId}/export/message:
    get:
      description: >-
        Returns Hedera message IDs of the published schemas, these messages
        contain IPFS CIDs of these schema files. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: SchemaApi_exportMessage
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportSchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns Hedera message IDs of the published schemas.
      tags:
        - schemas
  /schemas/{schemaId}/export/file:
    get:
      description: >-
        Returns schema files for the schema. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: SchemaApi_exportToFile
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns schema files for the schema.
      tags:
        - schemas
  /schemas/system/{username}:
    post:
      description: >-
        Creates a new system schema. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SchemaApi_postSystemSchema
      parameters:
        - name: username
          required: true
          in: path
          description: username
          schema:
            example: username
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemSchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new system schema.
      tags:
        - schemas
    get:
      description: >-
        Returns all system schemas. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SchemaApi_getSystemSchemaV2
      parameters:
        - name: username
          required: true
          in: path
          description: username
          schema:
            example: username
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all system schemas.
      tags:
        - schemas
  /schemas/system/{schemaId}:
    delete:
      description: >-
        Deletes the system schema with the provided schema ID. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: SchemaApi_deleteSystemSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the system schema with the provided schema ID.
      tags:
        - schemas
    put:
      description: >-
        Updates the system schema. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SchemaApi_setSystemSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates the system schema.
      tags:
        - schemas
  /schemas/system/{schemaId}/active:
    put:
      description: >-
        Makes the selected scheme active. Other schemes of the same type become
        inactive Only users with the Standard Registry role are allowed to make
        the request.
      operationId: SchemaApi_activeSystemSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: >-
        Makes the selected scheme active. Other schemes of the same type become
        inactive
      tags:
        - schemas
  /schemas/system/entity/{schemaEntity}:
    get:
      description: Finds the schema using the schema type.
      operationId: SchemaApi_getSchemaEntity
      parameters:
        - name: schemaEntity
          required: true
          in: path
          description: Entity name
          schema:
            enum:
              - STANDARD_REGISTRY
              - USER
              - POLICY
              - MINT_TOKEN
              - WIPE_TOKEN
              - MINT_NFTOKEN
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Finds the schema using the schema type.
      tags:
        - schemas
  /schemas/{schemaId}/export/xlsx:
    get:
      description: >-
        Returns a xlsx file containing schemas. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: SchemaApi_getPolicyExportXlsx
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return schemas in a xlsx file format for the specified policy.
      tags:
        - schemas
  /schemas/{topicId}/import/xlsx:
    post:
      description: >-
        Imports new schema from a xlsx file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importPolicyFromXlsx
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new schema from a xlsx file into the local DB.
      tags:
        - schemas
  /schemas/push/{topicId}/import/xlsx:
    post:
      description: >-
        Imports new schema from a xlsx file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: SchemaApi_importPolicyFromXlsxAsync
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            example: 0.0.1
            type: string
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new schema from a xlsx file into the local DB.
      tags:
        - schemas
  /schemas/import/xlsx/preview:
    post:
      description: >-
        Previews the schema from a xlsx file. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: SchemaApi_importPolicyFromXlsxPreview
      parameters: []
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Previews the schema from a xlsx file.
      tags:
        - schemas
  /schemas/export/template:
    get:
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: SchemaApi_exportTemplate
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of schemas.
      tags:
        - schemas
  /settings:
    post:
      description: Set settings. For users with the Standard Registry role only.
      operationId: SettingsApi_updateSettings
      parameters: []
      requestBody:
        required: true
        description: Settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsDTO'
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Set settings.
      tags:
        - settings
    get:
      description: >-
        Returns current settings. For users with the Standard Registry role
        only.
      operationId: SettingsApi_getSettings
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns current settings.
      tags:
        - settings
  /settings/environment:
    get:
      description: Returns current environment name.
      operationId: SettingsApi_getEnvironment
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns current environment name.
      tags:
        - settings
  /settings/about:
    get:
      description: Returns package version. For users with the Standard Registry role only.
      operationId: SettingsApi_getAbout
      parameters: []
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns package version.
      tags:
        - settings
  /tags:
    post:
      description: Creates new tag.
      operationId: TagsApi_setTags
      parameters: []
      requestBody:
        required: true
        description: Object that contains tag information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDTO'
      responses:
        '200':
          description: Created tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates new tag.
      tags:
        - tags
  /tags/search:
    post:
      description: Search tags.
      operationId: TagsApi_searchTags
      parameters: []
      requestBody:
        required: true
        description: Object that contains filters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagFilterDTO'
            examples:
              Single:
                value:
                  entity: PolicyDocument
                  target: '0000000000.000000001'
              Multiple:
                value:
                  entity: PolicyDocument
                  targets:
                    - '0000000000.000000001'
                    - '0000000000.000000001'
      responses:
        '200':
          description: Created tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMapDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Search tags.
      tags:
        - tags
  /tags/{uuid}:
    delete:
      description: Delete tag.
      operationId: TagsApi_deleteTag
      parameters:
        - name: uuid
          required: true
          in: path
          description: Tag identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delete tag.
      tags:
        - tags
  /tags/synchronization:
    post:
      description: Synchronization of tags with an external network.
      operationId: TagsApi_synchronizationTags
      parameters: []
      requestBody:
        required: true
        description: Object that contains filters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagFilterDTO'
            examples:
              Single:
                value:
                  entity: PolicyDocument
                  target: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMapDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Synchronization of tags with an external network.
      tags:
        - tags
  /tags/schemas:
    get:
      description: >-
        Returns all tag schemas. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: TagsApi_getSchemasV2
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all tag schemas.
      tags:
        - tags
    post:
      description: >-
        Creates a new tag schema. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: TagsApi_postSchemas
      parameters: []
      requestBody:
        required: true
        description: Schema config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '201':
          description: Created schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new tag schema.
      tags:
        - tags
  /tags/schemas/{schemaId}:
    delete:
      description: >-
        Deletes the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: TagsApi_deleteSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the schema.
      tags:
        - tags
    put:
      description: >-
        Updates schema configuration for the specified schema ID. Only users
        with the Standard Registry role are allowed to make the request.
      operationId: TagsApi_updateSchema
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Schema config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates schema configuration.
      tags:
        - tags
  /tags/schemas/{schemaId}/publish:
    put:
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      operationId: TagsApi_publishTag
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes the schema.
      tags:
        - tags
  /tags/schemas/published:
    get:
      description: >-
        Return a list of all published schemas. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: TagsApi_getPublished
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all published schemas.
      tags:
        - tags
  /tasks/{taskId}:
    get:
      description: Returns task statuses by Id.
      operationId: TaskApi_getTask
      parameters:
        - name: taskId
          required: true
          in: path
          description: Task Id
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns task statuses by Id.
      tags:
        - tasks
  /tokens:
    get:
      description: >-
        Returns all tokens. For the Standard Registry role it returns only the
        list of tokens, for other users it also returns token balances as well
        as the KYC, Freeze, and Association statuses. Not allowed for the
        Auditor role.
      operationId: TokensApi_getTokensV2
      parameters:
        - name: policyId
          required: false
          in: query
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: status
          required: false
          in: query
          description: Token status
          schema:
            enum:
              - Associated
              - All
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of tokens.
      tags:
        - tokens
    post:
      description: >-
        Creates a new token. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: TokensApi_newToken
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new token.
      tags:
        - tokens
    put:
      description: >-
        Update token. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: TokensApi_updateToken
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Updated token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Update token.
      tags:
        - tokens
  /tokens/{tokenId}:
    get:
      description: Return the token.
      operationId: TokensApi_getTokenByIdWithPolicies
      parameters:
        - name: tokenId
          required: true
          in: path
          schema:
            type: string
        - name: policyId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a token by id.
      tags:
        - tokens
  /tokens/push:
    post:
      description: >-
        Creates a new token. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: TokensApi_pushTokenAsync
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new token.
      tags:
        - tokens
    put:
      description: >-
        Update token. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: TokensApi_updateTokenAsync
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Update token.
      tags:
        - tokens
  /tokens/push/{tokenId}:
    delete:
      description: >-
        Deletes the token with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: TokensApi_deleteTokenAsync
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the token with the provided schema ID.
      tags:
        - tokens
  /tokens/{tokenId}/associate:
    put:
      description: >-
        Associates the user with the provided Hedera token. Only users with the
        Installer role are allowed to make the request.
      operationId: TokensApi_associateToken
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Associates the user with the provided Hedera token.
      tags:
        - tokens
  /tokens/push/{tokenId}/associate:
    put:
      description: >-
        Associates the user with the provided Hedera token. Only users with the
        Installer role are allowed to make the request.
      operationId: TokensApi_associateTokenAsync
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Associates the user with the provided Hedera token.
      tags:
        - tokens
  /tokens/{tokenId}/dissociate:
    put:
      description: >-
        Disassociates the user with the provided Hedera token. Only users with
        the Installer role are allowed to make the request.
      operationId: TokensApi_dissociateToken
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Associate the user with the provided Hedera token.
      tags:
        - tokens
  /tokens/push/{tokenId}/dissociate:
    put:
      description: >-
        Disassociates the user with the provided Hedera token. Only users with
        the Installer role are allowed to make the request.
      operationId: TokensApi_dissociateTokenAsync
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Associate the user with the provided Hedera token.
      tags:
        - tokens
  /tokens/{tokenId}/{username}/grant-kyc:
    put:
      description: >-
        Sets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: TokensApi_grantKyc
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Sets the KYC flag for the user.
      tags:
        - tokens
  /tokens/push/{tokenId}/{username}/grant-kyc:
    put:
      description: >-
        Sets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: TokensApi_grantKycAsync
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Sets the KYC flag for the user.
      tags:
        - tokens
  /tokens/{tokenId}/{username}/revoke-kyc:
    put:
      description: >-
        Unsets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: TokensApi_revokeKyc
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Unsets the KYC flag for the user.
      tags:
        - tokens
  /tokens/push/{tokenId}/{username}/revoke-kyc:
    put:
      description: >-
        Unsets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: TokensApi_revokeKycAsync
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Unsets the KYC flag for the user.
      tags:
        - tokens
  /tokens/{tokenId}/{username}/freeze:
    put:
      description: >-
        Freezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: TokensApi_freezeToken
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Freeze transfers of the specified token for the user.
      tags:
        - tokens
  /tokens/{tokenId}/{username}/unfreeze:
    put:
      description: >-
        Unfreezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: TokensApi_unfreezeToken
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Unfreezes transfers of the specified token for the user.
      tags:
        - tokens
  /tokens/push/{tokenId}/{username}/freeze:
    put:
      description: >-
        Freezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: TokensApi_freezeTokenAsync
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Freeze transfers of the specified token for the user.
      tags:
        - tokens
  /tokens/push/{tokenId}/{username}/unfreeze:
    put:
      description: >-
        Unfreezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: TokensApi_unfreezeTokenAsync
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Unfreezes transfers of the specified token for the user.
      tags:
        - tokens
  /tokens/{tokenId}/{username}/info:
    get:
      description: >-
        Returns user information for the selected token. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: TokensApi_getTokenInfo
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
        - name: username
          required: true
          in: path
          description: Username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns user information for the selected token.
      tags:
        - tokens
  /tokens/{tokenId}/serials:
    get:
      description: Returns token serials of current user.
      operationId: TokensApi_getTokenSerials
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Token serials.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return token serials.
      tags:
        - tokens
  /tokens/menu/all:
    get:
      description: >-
        Returns tokens menu. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: TokensApi_getMenu
      parameters: []
      responses:
        '200':
          description: Modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of tokens.
      tags:
        - tokens
  /themes:
    post:
      description: >-
        Creates a new theme. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: ThemesApi_setThemes
      parameters: []
      requestBody:
        required: true
        description: Object that contains a theme.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new theme.
      tags:
        - themes
    get:
      description: >-
        Returns a list of all themes. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: ThemesApi_getThemes
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of all themes.
      tags:
        - themes
  /themes/{themeId}:
    put:
      description: >-
        Updates theme configuration for the specified theme ID. Only users with
        the Standard Registry role are allowed to make the request.
      operationId: ThemesApi_updateTheme
      parameters:
        - name: themeId
          required: true
          in: path
          description: Theme Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains a theme.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates theme configuration.
      tags:
        - themes
    delete:
      description: >-
        Deletes the theme with the provided theme ID. Only users with the
        Standard Registry role are allowed to make the request.
      operationId: ThemesApi_deleteTheme
      parameters:
        - name: themeId
          required: true
          in: path
          description: Theme Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the theme.
      tags:
        - themes
  /themes/import/file:
    post:
      description: >-
        Imports new theme from the provided zip file into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      operationId: ThemesApi_importTheme
      parameters: []
      requestBody:
        required: true
        description: A zip file containing theme to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new theme from a zip file.
      tags:
        - themes
  /themes/{themeId}/export/file:
    get:
      description: >-
        Returns a zip file containing the theme. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: ThemesApi_exportTheme
      parameters:
        - name: themeId
          required: true
          in: path
          description: Theme Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a zip file containing the theme.
      tags:
        - themes
  /trust-chains:
    get:
      description: >-
        Returns a list of all VP documents. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: TrustChainsApi_getTrustChains
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: policyId
          required: false
          in: query
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
        - name: policyOwner
          required: false
          in: query
          description: Policy Owner
          schema:
            example: >-
              #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VpDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a list of all VP documents.
      tags:
        - trust-chains
  /trust-chains/{hash}:
    get:
      description: >-
        Builds and returns a trustchain, from the VP to the root VC document.
        Only users with the Standard Registry role are allowed to make the
        request.
      operationId: TrustChainsApi_getTrustChainByHash
      parameters:
        - name: hash
          required: true
          in: path
          description: Hash
          schema:
            example: hash
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  chain:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        tag:
                          type: string
                        label:
                          type: string
                        schema:
                          type: string
                        owner:
                          type: string
                        document:
                          type: object
                      required:
                        - id
                        - type
                        - tag
                        - label
                        - schema
                        - owner
                        - document
                  userMap:
                    type: array
                    items:
                      type: object
                      properties:
                        did:
                          type: string
                        username:
                          type: string
                      required:
                        - did
                        - username
                required:
                  - chain
                  - userMap
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Builds and returns a trustchain, from the VP to the root VC document.
      tags:
        - trust-chains
  /wizard/policy:
    post:
      description: >-
        Creates a new policy by wizard. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: WizardApi_setPolicy
      parameters: []
      requestBody:
        required: true
        description: Object that contains wizard configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfigDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WizardResultDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new policy.
      tags:
        - wizard
  /wizard/push/policy:
    post:
      description: >-
        Creates a new policy by wizard. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: WizardApi_setPolicyAsync
      parameters: []
      requestBody:
        required: true
        description: Object that contains wizard configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfigAsyncDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new policy.
      tags:
        - wizard
  /wizard/{policyId}/config:
    post:
      description: >-
        Get policy config by wizard. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: WizardApi_setPolicyConfig
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains wizard configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfigDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WizardPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get policy config.
      tags:
        - wizard
  /branding:
    post:
      description: >-
        Update branding. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: BrandingApi_setBranding
      parameters: []
      requestBody:
        required: true
        description: Object that contains config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandingDTO'
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Update branding.
      tags:
        - branding
    get:
      operationId: BrandingApi_getBranding
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandingDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags:
        - branding
  /suggestions:
    post:
      description: >-
        Get next and nested suggested block types. Only users with the Standard
        Registry role are allowed to make the request.
      operationId: SuggestionsApi_policySuggestions
      parameters: []
      requestBody:
        required: true
        description: Data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestionsInputDTO'
      responses:
        '200':
          description: >-
            Successful operation. Suggested next and nested block types
            respectively.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsOutputDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get next and nested suggested block types
      tags:
        - suggestions
  /suggestions/config:
    post:
      description: >-
        Set suggestions config. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: SuggestionsApi_setPolicySuggestionsConfig
      parameters: []
      requestBody:
        required: true
        description: Suggestions config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestionsConfigDTO'
      responses:
        '201':
          description: Successful operation. Response setted suggestions config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsConfigDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Set suggestions config
      tags:
        - suggestions
    get:
      description: >-
        Get suggestions config. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: SuggestionsApi_getPolicySuggestionsConfig
      parameters: []
      responses:
        '200':
          description: Successful operation. Response suggestions config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsConfigDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get suggestions config
      tags:
        - suggestions
  /notifications:
    get:
      description: Returns all notifications.
      operationId: NotificationsApi_getAllNotifications
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation. Returns notifications and count.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get all notifications
      tags:
        - notifications
  /notifications/new:
    get:
      description: Returns new notifications.
      operationId: NotificationsApi_getNewNotifications
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns new notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get new notifications
      tags:
        - notifications
  /notifications/progresses:
    get:
      description: Returns progresses.
      operationId: NotificationsApi_getProgresses
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns progresses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgressDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get progresses
      tags:
        - notifications
  /notifications/read/all:
    post:
      description: Returns new notifications.
      operationId: NotificationsApi_readAll
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Read all notifications
      tags:
        - notifications
  /notifications/delete/{notificationId}:
    delete:
      description: Returns deleted notifications count.
      operationId: NotificationsApi_delete
      parameters:
        - name: notificationId
          required: true
          in: path
          description: Notification Identifier
          schema:
            example: 00000000-0000-0000-0000-000000000000
            type: string
      responses:
        '200':
          description: Successful operation. Returns deleted notifications count.
          content:
            application/json:
              schema:
                type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delete notifications up to this point
      tags:
        - notifications
  /projects/search:
    post:
      description: Search projects by filters
      operationId: ProjectsAPI_projectSearch
      parameters: []
      requestBody:
        required: true
        description: The question of choosing a methodology
        content:
          application/json:
            schema:
              type: string
            examples:
              q:
                value: >-
                  What methodology can I use for production of electricity using
                  renewable energy technologies?
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Search projects
      tags:
        - projects
  /projects/compare/documents:
    post:
      description: Compare documents.
      operationId: ProjectsAPI_compareDocumentsV2
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000001'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareDocumentsV2DTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Compare documents.
      tags:
        - projects
  /projects/properties:
    get:
      description: Get all properties
      operationId: ProjectsAPI_getPolicyProperties
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertiesDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Get all properties
      tags:
        - projects
  /record/{policyId}/status:
    get:
      description: >-
        Get recording or running status. Only users with the Standard Registry
        role are allowed to make the request.
      operationId: RecordApi_getRecordStatus
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get recording or running status.
      tags:
        - record
  /record/{policyId}/recording/start:
    post:
      description: >-
        Start recording. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: RecordApi_startRecord
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Start recording.
      tags:
        - record
  /record/{policyId}/recording/stop:
    post:
      description: >-
        Stop recording. Only users with the Standard Registry role are allowed
        to make the request.
      operationId: RecordApi_stopRecord
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Stop recording.
      tags:
        - record
  /record/{policyId}/recording/actions:
    get:
      description: >-
        Get recorded actions. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: RecordApi_getRecordActions
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordActionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get recorded actions.
      tags:
        - record
  /record/{policyId}/running/start:
    post:
      description: >-
        Run record from a zip file. Only users with the Standard Registry role
        are allowed to make the request.
      operationId: RecordApi_runRecord
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: A zip file containing record to be run.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Record UUID.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Run record from a zip file.
      tags:
        - record
  /record/{policyId}/running/stop:
    post:
      description: >-
        Stop running. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: RecordApi_stopRunning
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Stop running.
      tags:
        - record
  /record/{policyId}/running/results:
    get:
      description: >-
        Get running results. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: RecordApi_getRecordResults
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningResultDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get running results.
      tags:
        - record
  /record/{policyId}/running/details:
    get:
      description: >-
        Get running details. Only users with the Standard Registry role are
        allowed to make the request.
      operationId: RecordApi_getRecordDetails
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningDetailsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get running details.
      tags:
        - record
  /record/{policyId}/running/fast-forward:
    post:
      description: >-
        Fast Forward. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: RecordApi_fastForward
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Fast Forward.
      tags:
        - record
  /record/{policyId}/running/retry:
    post:
      description: >-
        Retry step. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: RecordApi_retryStep
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retry step.
      tags:
        - record
  /record/{policyId}/running/skip:
    post:
      description: >-
        Skip step. Only users with the Standard Registry role are allowed to
        make the request.
      operationId: RecordApi_skipStep
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Skip step.
      tags:
        - record
  /ai-suggestions/ask:
    get:
      description: Returns AI response to the current question
      operationId: AISuggestionsAPI_getAIAnswer
      parameters:
        - name: q
          required: true
          in: query
          description: The question of choosing a methodology
          schema:
            example: Find me large scale projects
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                example: ACM0001, ACM0002, ACM0006, ACM0007, ACM0018
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Get methodology suggestion
      tags:
        - ai-suggestions
  /ai-suggestions/rebuild-vector:
    put:
      description: Rebuilds vector based on policy data in the DB
      operationId: AISuggestionsAPI_rebuildVector
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      summary: Rebuild AI vector
      tags:
        - ai-suggestions
  /permissions:
    get:
      description: Returns all permissions.
      operationId: PermissionsApi_getPermissions
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all permissions.
      tags:
        - permissions
  /permissions/roles:
    get:
      description: Returns all roles.
      operationId: PermissionsApi_getRoles
      parameters:
        - name: name
          required: false
          in: query
          description: Filter by role name
          schema:
            example: name
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all roles.
      tags:
        - permissions
    post:
      description: Creates new role.
      operationId: PermissionsApi_createRole
      parameters: []
      requestBody:
        required: true
        description: Object that contains role information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
      responses:
        '200':
          description: Created role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates new role.
      tags:
        - permissions
  /permissions/roles/{id}:
    put:
      description: Updates role configuration for the specified role ID.
      operationId: PermissionsApi_updateRole
      parameters:
        - name: id
          required: true
          in: path
          description: Role Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Role configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
      responses:
        '200':
          description: Role configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates role configuration.
      tags:
        - permissions
    delete:
      description: Deletes the role with the provided role ID.
      operationId: PermissionsApi_deleteModule
      parameters:
        - name: id
          required: true
          in: path
          description: Role Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the role.
      tags:
        - permissions
  /permissions/roles/default:
    post:
      description: Set the role as default for new users.
      operationId: PermissionsApi_setDefaultRole
      parameters: []
      requestBody:
        required: true
        description: Object that contains role information.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Role Identifier
                  example: '000000000000000000000001'
              required:
                - id
            examples:
              Default:
                value:
                  id: '000000000000000000000001'
      responses:
        '200':
          description: Created role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Set default role.
      tags:
        - permissions
  /permissions/users:
    get:
      description: Returns all users.
      operationId: PermissionsApi_getUsers
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: role
          required: false
          in: query
          description: Filter by role
          schema:
            example: '000000000000000000000001'
            type: string
        - name: status
          required: false
          in: query
          description: Filter by status
          schema:
            enum:
              - Active
              - Inactive
            type: string
        - name: username
          required: false
          in: query
          description: Filter by username
          schema:
            example: username
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all users.
      tags:
        - permissions
  /permissions/users/{username}:
    get:
      description: Updates user permissions for the specified username.
      operationId: PermissionsApi_getUser
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          schema:
            example: username
            type: string
      responses:
        '200':
          description: User permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates user permissions.
      tags:
        - permissions
    put:
      description: Updates user permissions for the specified username.
      operationId: PermissionsApi_updateUser
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: User permissions.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Roles:
                value:
                  - '000000000000000000000001'
                  - '000000000000000000000001'
      responses:
        '200':
          description: User permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates user permissions.
      tags:
        - permissions
  /permissions/users/{username}/policies:
    get:
      description: Returns all roles.
      operationId: PermissionsApi_getAssignedPolicies
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          schema:
            example: username
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: status
          required: false
          in: query
          description: Filter by status
          schema:
            enum:
              - DRY-RUN
              - DRAFT
              - PUBLISH_ERROR
              - PUBLISH
              - DISCONTINUED
              - DEMO
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all roles.
      tags:
        - permissions
  /permissions/users/{username}/policies/assign:
    post:
      description: Assign policy.
      operationId: PermissionsApi_assignPolicy
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: Options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignPolicyDTO'
      responses:
        '200':
          description: Assigned policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Assign policy.
      tags:
        - permissions
  /permissions/users/{username}/delegate:
    put:
      description: Delegate user permissions for the specified username.
      operationId: PermissionsApi_delegateRole
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: User permissions.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Roles:
                value:
                  - '000000000000000000000001'
                  - '000000000000000000000001'
      responses:
        '200':
          description: User permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delegate user permissions.
      tags:
        - permissions
  /permissions/users/{username}/policies/delegate:
    post:
      description: Delegate policy.
      operationId: PermissionsApi_delegatePolicy
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          schema:
            example: username
            type: string
      requestBody:
        required: true
        description: Options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignPolicyDTO'
      responses:
        '200':
          description: Assigned policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delegate policy.
      tags:
        - permissions
  /policy-statistics:
    post:
      description: Creates a new statistic definition.
      operationId: PolicyStatisticsApi_createStatisticDefinition
      parameters: []
      requestBody:
        required: true
        description: Configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticDefinitionDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDefinitionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new statistic definition.
      tags:
        - policy-statistics
    get:
      description: Returns all statistic definitions.
      operationId: PolicyStatisticsApi_getStatisticDefinitions
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: policyInstanceTopicId
          required: false
          in: query
          description: Policy Instance Topic Id
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticDefinitionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all statistic definitions.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}:
    get:
      description: Retrieves statistic definition for the specified ID.
      operationId: PolicyStatisticsApi_getStatisticDefinitionById
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDefinitionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves statistic definition.
      tags:
        - policy-statistics
    put:
      description: >-
        Updates statistic definition configuration for the specified statistic
        ID.
      operationId: PolicyStatisticsApi_updateStatisticDefinition
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains a configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticDefinitionDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDefinitionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates statistic definition.
      tags:
        - policy-statistics
    delete:
      description: Deletes the statistic definition with the provided ID.
      operationId: PolicyStatisticsApi_deleteStatisticDefinition
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the statistic definition.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}/publish:
    put:
      description: Publishes statistic definition for the specified statistic ID.
      operationId: PolicyStatisticsApi_publishStatisticDefinition
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDefinitionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes statistic definition.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}/relationships:
    get:
      description: Retrieves statistic relationships for the specified ID.
      operationId: PolicyStatisticsApi_getStatisticRelationships
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDefinitionRelationshipsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves statistic relationships.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}/documents:
    get:
      description: Returns all documents.
      operationId: PolicyStatisticsApi_getStatisticDocuments
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VcDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all documents.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}/assessment:
    post:
      description: Creates a new statistic assessment.
      operationId: PolicyStatisticsApi_createStatisticAssessment
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatisticAssessmentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticAssessmentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new statistic assessment.
      tags:
        - policy-statistics
    get:
      description: Returns all statistic assessment.
      operationId: PolicyStatisticsApi_getStatisticAssessments
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticAssessmentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all statistic assessment.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}/assessment/{assessmentId}:
    get:
      description: Retrieves statistic assessment for the specified ID.
      operationId: PolicyStatisticsApi_getStatisticAssessment
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: assessmentId
          required: true
          in: path
          description: Statistic Assessment Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticAssessmentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves statistic assessment.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}/assessment/{assessmentId}/relationships:
    get:
      description: Retrieves assessment relationships for the specified ID.
      operationId: PolicyStatisticsApi_getStatisticAssessmentRelationships
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: assessmentId
          required: true
          in: path
          description: Statistic Assessment Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticAssessmentRelationshipsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves assessment relationships.
      tags:
        - policy-statistics
  /policy-statistics/{policyId}/import/file:
    post:
      description: >-
        Imports new statistic definition from the provided zip file into the
        local DB.
      operationId: PolicyStatisticsApi_importStatisticDefinition
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: A zip file containing statistic definition to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDefinitionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new statistic definition from a zip file.
      tags:
        - policy-statistics
  /policy-statistics/{definitionId}/export/file:
    get:
      description: Returns a zip file containing statistic definition.
      operationId: PolicyStatisticsApi_exportStatisticDefinition
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a zip file containing statistic definition.
      tags:
        - policy-statistics
  /policy-statistics/import/file/preview:
    post:
      description: Imports a zip file containing statistic definition.
      operationId: PolicyStatisticsApi_previewStatisticDefinition
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Statistic definition preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDefinitionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports a zip file containing statistic definition.
      tags:
        - policy-statistics
  /schema-rules:
    post:
      description: Creates a new schema rule.
      operationId: SchemaRulesApi_createSchemaRule
      parameters: []
      requestBody:
        required: true
        description: Configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaRuleDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new schema rule.
      tags:
        - schema-rules
    get:
      description: Returns all schema rules.
      operationId: SchemaRulesApi_getSchemaRules
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: policyInstanceTopicId
          required: false
          in: query
          description: Policy Instance Topic Id
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all schema rules.
      tags:
        - schema-rules
  /schema-rules/{ruleId}:
    get:
      description: Retrieves schema rule for the specified ID.
      operationId: SchemaRulesApi_getSchemaRuleById
      parameters:
        - name: ruleId
          required: true
          in: path
          description: Schema rule Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves schema rule.
      tags:
        - schema-rules
    put:
      description: Updates schema rule configuration for the specified rule ID.
      operationId: SchemaRulesApi_updateSchemaRule
      parameters:
        - name: ruleId
          required: true
          in: path
          description: Schema Rule Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains a configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaRuleDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates schema rule.
      tags:
        - schema-rules
    delete:
      description: Deletes the schema rule with the provided ID.
      operationId: SchemaRulesApi_deleteSchemaRule
      parameters:
        - name: ruleId
          required: true
          in: path
          description: Schema Rule Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the schema rule.
      tags:
        - schema-rules
  /schema-rules/{ruleId}/activate:
    put:
      description: Activates schema rule for the specified rule ID.
      operationId: SchemaRulesApi_activateSchemaRule
      parameters:
        - name: ruleId
          required: true
          in: path
          description: Schema Rule Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Activates schema rule.
      tags:
        - schema-rules
  /schema-rules/{ruleId}/inactivate:
    put:
      description: Inactivates schema rule for the specified rule ID.
      operationId: SchemaRulesApi_inactivateSchemaRule
      parameters:
        - name: ruleId
          required: true
          in: path
          description: Schema Rule Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Inactivates schema rule.
      tags:
        - schema-rules
  /schema-rules/{ruleId}/relationships:
    get:
      description: Retrieves schema rule relationships for the specified ID.
      operationId: SchemaRulesApi_getSchemaRuleRelationships
      parameters:
        - name: ruleId
          required: true
          in: path
          description: Schema Rule Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleRelationshipsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves schema rule relationships.
      tags:
        - schema-rules
  /schema-rules/data:
    post:
      description: ''
      operationId: SchemaRulesApi_getSchemaRuleData
      parameters: []
      requestBody:
        required: true
        description: Options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaRuleOptionsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaRuleDataDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: ''
      tags:
        - schema-rules
  /schema-rules/{policyId}/import/file:
    post:
      description: Imports new rules from the provided zip file into the local DB.
      operationId: SchemaRulesApi_importSchemaRule
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: A zip file containing rules to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new rules from a zip file.
      tags:
        - schema-rules
  /schema-rules/{ruleId}/export/file:
    get:
      description: Returns a zip file containing rules.
      operationId: SchemaRulesApi_exportSchemaRule
      parameters:
        - name: ruleId
          required: true
          in: path
          description: Schema Rule Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a zip file containing rules.
      tags:
        - schema-rules
  /schema-rules/import/file/preview:
    post:
      description: Imports a zip file containing rules.
      operationId: SchemaRulesApi_previewSchemaRule
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Schema rule preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports a zip file containing rules.
      tags:
        - schema-rules
  /formulas:
    post:
      description: Creates a new formula.
      operationId: FormulasApi_createFormula
      parameters: []
      requestBody:
        required: true
        description: Configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormulaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new formula.
      tags:
        - formulas
    get:
      description: Returns all formulas.
      operationId: FormulasApi_getFormulas
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: policyId
          required: false
          in: query
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormulaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all formulas.
      tags:
        - formulas
  /formulas/{formulaId}:
    get:
      description: Retrieves formula for the specified ID.
      operationId: FormulasApi_getFormulaById
      parameters:
        - name: formulaId
          required: true
          in: path
          description: Formula Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves formula.
      tags:
        - formulas
    put:
      description: Updates formula configuration for the specified formula ID.
      operationId: FormulasApi_updateFormula
      parameters:
        - name: formulaId
          required: true
          in: path
          description: Formula Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains a configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormulaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates formula.
      tags:
        - formulas
    delete:
      description: Deletes the formula with the provided ID.
      operationId: FormulasApi_deleteFormula
      parameters:
        - name: formulaId
          required: true
          in: path
          description: Formula Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the formula.
      tags:
        - formulas
  /formulas/{formulaId}/relationships:
    get:
      description: Retrieves Formula relationships for the specified ID.
      operationId: FormulasApi_getSchemaRuleRelationships
      parameters:
        - name: formulaId
          required: true
          in: path
          description: Formula Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulaRelationshipsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves Formula relationships.
      tags:
        - formulas
  /formulas/{policyId}/import/file:
    post:
      description: Imports new formula from the provided zip file into the local DB.
      operationId: FormulasApi_importFormula
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: A zip file containing formula to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new formula from a zip file.
      tags:
        - formulas
  /formulas/{formulaId}/export/file:
    get:
      description: Returns a zip file containing formula.
      operationId: FormulasApi_exportFormula
      parameters:
        - name: formulaId
          required: true
          in: path
          description: Formula Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a zip file containing formula.
      tags:
        - formulas
  /formulas/import/file/preview:
    post:
      description: Imports a zip file containing formula.
      operationId: FormulasApi_previewFormula
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Formula preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports a zip file containing formula.
      tags:
        - formulas
  /formulas/{formulaId}/publish:
    put:
      description: Publishes formula for the specified formula ID.
      operationId: FormulasApi_publishPolicyLabel
      parameters:
        - name: formulaId
          required: true
          in: path
          description: Formula Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes formula.
      tags:
        - formulas
  /formulas/data:
    post:
      description: ''
      operationId: FormulasApi_getSchemaRuleData
      parameters: []
      requestBody:
        required: true
        description: Options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormulasOptionsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormulasDataDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: ''
      tags:
        - formulas
  /policy-labels:
    post:
      description: Creates a new policy label.
      operationId: PolicyLabelsApi_createPolicyLabel
      parameters: []
      requestBody:
        required: true
        description: Configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyLabelDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new policy label.
      tags:
        - policy-labels
    get:
      description: Returns all policy labels.
      operationId: PolicyLabelsApi_getPolicyLabels
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
        - name: policyInstanceTopicId
          required: false
          in: query
          description: Policy Instance Topic Id
          schema:
            example: 0.0.1
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all policy labels.
      tags:
        - policy-labels
  /policy-labels/{definitionId}:
    get:
      description: Retrieves policy label for the specified ID.
      operationId: PolicyLabelsApi_getPolicyLabelById
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves policy label.
      tags:
        - policy-labels
    put:
      description: Updates policy label configuration for the specified label ID.
      operationId: PolicyLabelsApi_updatePolicyLabel
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Object that contains a configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyLabelDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Updates policy label.
      tags:
        - policy-labels
    delete:
      description: Deletes the policy label with the provided ID.
      operationId: PolicyLabelsApi_deletePolicyLabel
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Deletes the policy label.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/publish:
    put:
      description: Publishes policy label for the specified label ID.
      operationId: PolicyLabelsApi_publishPolicyLabel
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes policy label.
      tags:
        - policy-labels
  /policy-labels/push/{definitionId}/publish:
    put:
      description: Publishes policy label for the specified label ID.
      operationId: PolicyLabelsApi_publishPolicyLabelAsync
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Publishes policy label.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/relationships:
    get:
      description: Retrieves policy label relationships for the specified ID.
      operationId: PolicyLabelsApi_getPolicyLabelRelationships
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelRelationshipsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves policy label relationships.
      tags:
        - policy-labels
  /policy-labels/{policyId}/import/file:
    post:
      description: Imports new labels from the provided zip file into the local DB.
      operationId: PolicyLabelsApi_importPolicyLabel
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: A zip file containing labels to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports new labels from a zip file.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/export/file:
    get:
      description: Returns a zip file containing labels.
      operationId: PolicyLabelsApi_exportPolicyLabel
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Returns a zip file containing labels.
      tags:
        - policy-labels
  /policy-labels/import/file/preview:
    post:
      description: Imports a zip file containing labels.
      operationId: PolicyLabelsApi_previewPolicyLabel
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: policy label preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Imports a zip file containing labels.
      tags:
        - policy-labels
  /policy-labels/components:
    post:
      description: Return a list of other labels ans statistics.
      operationId: PolicyLabelsApi_searchComponents
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyLabelFiltersDTO'
      responses:
        '200':
          description: A list of labels ans statistics.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Search labels ans statistics.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/tokens:
    get:
      description: Returns all documents.
      operationId: PolicyLabelsApi_getPolicyLabelTokens
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VcDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all documents.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/tokens/{documentId}:
    get:
      description: Returns all documents.
      operationId: PolicyLabelsApi_getPolicyLabelDocument
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: documentId
          required: true
          in: path
          description: Document Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VcDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all documents.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/documents:
    post:
      description: Creates a new label document.
      operationId: PolicyLabelsApi_createStatisticDocument
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      requestBody:
        required: true
        description: Configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyLabelDocumentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Creates a new label document.
      tags:
        - policy-labels
    get:
      description: Returns all label documents.
      operationId: PolicyLabelsApi_getLabelDocuments
      parameters:
        - name: definitionId
          required: true
          in: path
          description: policy label Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyLabelDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Return a list of all label documents.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/documents/{documentId}:
    get:
      description: Retrieves label document for the specified ID.
      operationId: PolicyLabelsApi_getLabelDocument
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Label Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: documentId
          required: true
          in: path
          description: Label Document Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves label document.
      tags:
        - policy-labels
  /policy-labels/{definitionId}/documents/{documentId}/relationships:
    get:
      description: Retrieves documents relationships for the specified ID.
      operationId: PolicyLabelsApi_getStatisticAssessmentRelationships
      parameters:
        - name: definitionId
          required: true
          in: path
          description: Statistic Definition Identifier
          schema:
            example: '000000000000000000000001'
            type: string
        - name: documentId
          required: true
          in: path
          description: Label Document Identifier
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLabelDocumentRelationshipsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Retrieves documents relationships.
      tags:
        - policy-labels
  /worker-tasks:
    get:
      description: Returns all worker tasks.
      operationId: WorkerTasksController_getAllWorkerTasks
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            example: 0
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            example: 20
            type: number
      responses:
        '200':
          description: Successful operation. Returns notifications and count.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkersTasksDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Get all worker tasks
      tags:
        - worker-tasks
  /worker-tasks/restart:
    post:
      description: Restart task
      operationId: WorkerTasksController_restartTask
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns notifications.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Restart task
      tags:
        - worker-tasks
  /worker-tasks/delete/{taskId}:
    delete:
      description: Delete task
      operationId: WorkerTasksController_deleteTask
      parameters:
        - name: taskId
          required: true
          in: path
          description: Task Id
          schema:
            example: '000000000000000000000001'
            type: string
      responses:
        '200':
          description: Successful operation. Returns notifications.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      security:
        - bearer: []
      summary: Delete task
      tags:
        - worker-tasks
info:
  title: Guardian
  description: >-
    The Guardian is a modular open-source solution that includes best-in-class
    identity management and decentralized ledger technology (DLT) libraries. At
    the heart of the Guardian solution is a sophisticated Policy Workflow Engine
    (PWE) that enables applications to offer a requirements-based tokenization
    implementation.
  version: 3.1.1
  contact:
    name: API developer
    url: https://envisionblockchain.com
    email: info@envisionblockchain.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags: []
servers:
  - url: /api/v1
    description: version 1.0
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AccountsSessionResponseDTO:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
        accessToken:
          type: string
      required:
        - username
        - role
        - accessToken
    InternalServerErrorDTO:
      type: object
      properties:
        code:
          type: number
          example: 500
        message:
          type: string
          example: Error message
      required:
        - code
        - message
    AccountsResponseDTO:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
        did:
          type: string
      required:
        - username
        - role
        - did
    RegisterUserDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        role:
          type: string
      required:
        - username
        - password
        - password_confirmation
        - role
    LoginUserDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    ChangePasswordDTO:
      type: object
      properties:
        username:
          type: string
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - username
        - oldPassword
        - newPassword
    ProofDTO:
      type: object
      properties:
        type:
          type: string
        created:
          format: date-time
          type: string
        verificationMethod:
          type: string
        proofPurpose:
          type: string
        jws:
          type: string
      required:
        - type
        - created
        - verificationMethod
        - proofPurpose
        - jws
    VcDTO:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
          nullable: true
        '@context':
          type: array
          items:
            type: string
        type:
          type: array
          items:
            type: string
        credentialSubject:
          items:
            type: array
          type: array
        issuer:
          oneOf:
            - type: string
            - type: object
              additionalProperties: true
        issuanceDate:
          type: string
        proof:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ProofDTO'
      required:
        - id
        - '@context'
        - type
        - credentialSubject
        - issuer
        - issuanceDate
        - proof
    VpDTO:
      type: object
      properties:
        '@context':
          type: array
          items:
            type: string
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        type:
          type: array
          items:
            type: string
        verifiableCredential:
          type: array
        proof:
          $ref: '#/components/schemas/ProofDTO'
      required:
        - '@context'
        - id
        - type
        - verifiableCredential
        - proof
    VcDocumentDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        hash:
          type: string
          example: hash
        signature:
          type: number
          example: 0
        status:
          type: string
          enum:
            - NEW
            - ISSUE
            - REVOKE
            - SUSPEND
            - RESUME
            - FAILED
          example: NEW
        tag:
          type: string
          example: Block tag
        type:
          type: string
          example: Document type
        createDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        updateDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        document:
          $ref: '#/components/schemas/VpDTO'
      required:
        - id
        - policyId
        - hash
        - signature
        - status
        - tag
        - type
        - createDate
        - updateDate
        - owner
        - document
    PolicyTestDTO:
      type: object
      properties:
        id:
          type: string
          description: Test ID
          example: '000000000000000000000001'
        uuid:
          type: string
          description: Test UUID
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          description: Test Name
          example: Test Name
        policyId:
          type: string
          description: Policy ID
          example: '000000000000000000000001'
        owner:
          type: string
          description: Test owner
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        status:
          type: string
          description: Test status
          enum:
            - New
            - Running
            - Stopped
            - Success
            - Failure
          example: New
        date:
          type: string
          description: Last start date
          example: '1900-01-01T00:00:00.000Z'
        duration:
          type: string
          description: Test duration
          example: 0
        progress:
          type: string
          description: Test progress
          example: 0
        resultId:
          type: string
          description: Test result
          example: 00000000-0000-0000-0000-000000000000
        result:
          type: string
          description: Test result
      required:
        - id
        - uuid
        - name
        - policyId
        - owner
        - status
        - date
        - duration
        - progress
        - resultId
        - result
    PolicyDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Policy name
        description:
          type: string
          example: Description
        topicDescription:
          type: string
          example: Description
        policyTag:
          type: string
          example: Tag
        status:
          type: string
          enum:
            - DRY-RUN
            - DRAFT
            - PUBLISH_ERROR
            - PUBLISH
            - DISCONTINUED
            - DEMO
          example: DRAFT
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        codeVersion:
          type: string
          example: 1.0.0
        createDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        version:
          type: string
          example: 1.0.0
        config:
          type: object
          additionalProperties: true
        userRole:
          type: string
          example: Installer
        userRoles:
          example:
            - Installer
          type: array
          items:
            type: string
        userGroup:
          type: object
          additionalProperties: true
          example:
            uuid: 00000000-0000-0000-0000-000000000000
            role: Installer
            groupLabel: Label
            groupName: Name
            active: true
        userGroups:
          example:
            - uuid: 00000000-0000-0000-0000-000000000000
              role: Installer
              groupLabel: Label
              groupName: Name
              active: true
          type: array
          items:
            type: array
        policyRoles:
          example:
            - Registrant
          type: array
          items:
            type: string
        policyNavigation:
          example:
            - role: Registrant
              steps:
                - block: Block tag
                  level: 1
                  name: Step name
          type: array
          items:
            type: array
        policyTopics:
          example:
            - name: Project
              description: Project
              memoObj: topic
              static: false
              type: any
          type: array
          items:
            type: array
        policyTokens:
          example:
            - tokenName: Token name
              tokenSymbol: Token symbol
              tokenType: non-fungible
              decimals: ''
              changeSupply: true
              enableAdmin: true
              enableFreeze: true
              enableKYC: true
              enableWipe: true
              templateTokenTag: token_template_0
          type: array
          items:
            type: array
        policyGroups:
          example:
            - name: Group name
              creator: Registrant
              groupAccessType: Private
              groupRelationshipType: Multiple
              members:
                - Registrant
          type: array
          items:
            type: array
        categories:
          type: array
          items:
            type: string
        projectSchema:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        tests:
          type: array
          items:
            $ref: '#/components/schemas/PolicyTestDTO'
      required:
        - id
        - uuid
        - name
        - description
        - topicDescription
        - policyTag
        - status
        - creator
        - owner
        - topicId
        - messageId
        - codeVersion
        - createDate
        - version
        - config
        - userRole
        - userRoles
        - userGroup
        - userGroups
        - policyRoles
        - policyNavigation
        - policyTopics
        - policyTokens
        - policyGroups
        - categories
        - projectSchema
        - tests
    AggregatedDTOItem:
      type: object
      properties:
        did:
          type: string
        hederaAccountId:
          type: string
        vcDocument:
          $ref: '#/components/schemas/VcDocumentDTO'
        policies:
          $ref: '#/components/schemas/PolicyDTO'
      required:
        - did
        - hederaAccountId
        - vcDocument
        - policies
    UserDTO:
      type: object
      properties:
        username:
          type: string
          example: username
        role:
          type: string
          enum:
            - STANDARD_REGISTRY
            - USER
            - AUDITOR
          example: USER
        permissionsGroup:
          example:
            - {}
          type: array
          items:
            type: string
        permissions:
          example:
            - POLICIES_POLICY_READ
          type: array
          items:
            type: string
        did:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        parent:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        hederaAccountId:
          type: string
          example: 0.0.1
      required:
        - username
        - role
        - permissions
    BalanceResponseDTO:
      type: object
      properties:
        balance:
          type: number
        unit:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'
      required:
        - balance
        - unit
        - user
    FilterSearchPoliciesDTO:
      type: object
      properties:
        policyId:
          type: string
          example: '000000000000000000000001'
        type:
          type: string
          enum:
            - Owned
            - Local
            - Global
          example: Local
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        minVcCount:
          type: number
          example: 0
        minVpCount:
          type: number
          example: 0
        minTokensCount:
          type: number
          example: 0
        text:
          type: string
          example: Policy name
        threshold:
          type: number
          minimum: 0
          maximum: 100
          example: 0
    SearchPolicyDTO:
      type: object
      properties:
        type:
          type: string
          enum:
            - Local
            - Global
          example: Local
        id:
          type: string
          example: '000000000000000000000001'
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Policy name
        description:
          type: string
          example: Policy description
        version:
          type: string
          example: 1.0.0
        status:
          type: string
          enum:
            - DRY-RUN
            - DRAFT
            - PUBLISH_ERROR
            - PUBLISH
            - DISCONTINUED
            - DEMO
          example: DRAFT
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        tags:
          example: Tag
          additionalProperties: true
          type: array
          items:
            type: array
        vcCount:
          type: number
          example: 0
        vpCount:
          type: number
          example: 0
        tokensCount:
          type: number
          example: 0
        rate:
          type: number
          example: 0
    SearchPoliciesDTO:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/SearchPolicyDTO'
        result:
          type: array
          items:
            $ref: '#/components/schemas/SearchPolicyDTO'
      required:
        - target
        - result
    CompareFileDTO:
      type: object
      properties:
        id:
          type: string
          description: File ID
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          description: File Name
          example: File Name
        value:
          type: string
          description: Buffer
          example: base64...
      required:
        - id
        - name
        - value
    FilterPolicyDTO:
      type: object
      properties:
        type:
          type: string
          description: Identifier type
          enum:
            - id
            - message
            - file
          example: id
        value:
          oneOf:
            - type: string
              description: Policy ID
            - type: string
              description: Policy Message ID
            - $ref: '#/components/schemas/CompareFileDTO'
              description: Policy File
          example: '000000000000000000000001'
      required:
        - type
        - value
    FilterPoliciesDTO:
      type: object
      properties:
        idLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        eventsLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        propLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        childrenLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        policyId1:
          type: string
          example: '000000000000000000000001'
        policyId2:
          type: string
          example: '000000000000000000000001'
        policyIds:
          example:
            - '000000000000000000000001'
            - '000000000000000000000001'
          type: array
          items:
            type: string
        policies:
          example:
            - type: id
              value: '000000000000000000000001'
            - type: message
              value: '0000000000.000000001'
            - type: file
              value:
                id: 00000000-0000-0000-0000-000000000000
                name: File Name
                value: base64...
          type: array
          items:
            $ref: '#/components/schemas/FilterPolicyDTO'
    ComparePoliciesDTO:
      type: object
      properties:
        blocks:
          type: object
        groups:
          type: object
        left:
          type: object
        right:
          type: object
        roles:
          type: object
        tokens:
          type: object
        topics:
          type: object
        total:
          type: object
      required:
        - blocks
        - groups
        - left
        - right
        - roles
        - tokens
        - topics
        - total
    FilterModulesDTO:
      type: object
      properties:
        idLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        eventsLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        propLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        childrenLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        moduleId1:
          type: string
          example: '000000000000000000000001'
        moduleId2:
          type: string
          example: '000000000000000000000001'
      required:
        - moduleId1
        - moduleId2
    CompareModulesDTO:
      type: object
      properties:
        blocks:
          type: object
        left:
          type: object
        right:
          type: object
        inputEvents:
          type: object
        outputEvents:
          type: object
        variables:
          type: object
        total:
          type: object
      required:
        - blocks
        - left
        - right
        - inputEvents
        - outputEvents
        - variables
        - total
    FilterSchemaDTO:
      type: object
      properties:
        type:
          type: string
          description: Identifier type
          enum:
            - id
            - policy-message
            - policy-file
          example: id
        value:
          type: string
          description: Schema ID
          example: '000000000000000000000001'
        policy:
          oneOf:
            - description: Policy Message ID
              type: string
            - $ref: '#/components/schemas/CompareFileDTO'
              description: Policy File
          example: '000000000000000000000001'
      required:
        - type
        - value
    FilterSchemasDTO:
      type: object
      properties:
        schemaId1:
          type: string
          example: '000000000000000000000001'
        schemaId2:
          type: string
          example: '000000000000000000000001'
        schemas:
          example:
            - type: id
              value: '000000000000000000000001'
            - type: policy-message
              value: 00000000-0000-0000-0000-000000000000
              policy: '0000000000.000000001'
            - type: policy-file
              value: 00000000-0000-0000-0000-000000000000
              policy:
                id: 00000000-0000-0000-0000-000000000000
                name: File Name
                value: base64...
          type: array
          items:
            $ref: '#/components/schemas/FilterSchemaDTO'
        idLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
    CompareSchemasDTO:
      type: object
      properties:
        fields:
          type: object
        left:
          type: object
        right:
          type: object
        total:
          type: object
      required:
        - fields
        - left
        - right
        - total
    FilterDocumentsDTO:
      type: object
      properties:
        idLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        eventsLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        propLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        childrenLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        documentId1:
          type: string
          example: '000000000000000000000001'
        documentId2:
          type: string
          example: '000000000000000000000001'
        documentIds:
          example:
            - '000000000000000000000001'
            - '000000000000000000000001'
          type: array
          items:
            type: string
    CompareDocumentsDTO:
      type: object
      properties:
        documents:
          type: object
        left:
          type: object
        right:
          type: object
        total:
          type: object
      required:
        - documents
        - left
        - right
        - total
    FilterToolsDTO:
      type: object
      properties:
        idLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        eventsLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
        propLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        childrenLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
            - 2
          example: 0
        toolId1:
          type: string
          example: '000000000000000000000001'
        toolId2:
          type: string
          example: '000000000000000000000001'
        toolIds:
          example:
            - '000000000000000000000001'
            - '000000000000000000000001'
          type: array
          items:
            type: string
    CompareToolsDTO:
      type: object
      properties:
        blocks:
          type: object
        left:
          type: object
        right:
          type: object
        inputEvents:
          type: object
        outputEvents:
          type: object
        variables:
          type: object
        total:
          type: object
      required:
        - blocks
        - left
        - right
        - inputEvents
        - outputEvents
        - variables
        - total
    FilterSearchBlocksDTO:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        config:
          type: object
          required: []
          additionalProperties: {}
      required:
        - id
    SearchBlocksDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: string
        owner:
          type: string
        topicId:
          type: string
        messageId:
          type: string
        hash:
          type: string
        chains:
          type: object
      required:
        - name
        - description
        - version
        - owner
        - topicId
        - messageId
        - hash
        - chains
    ArtifactDTOItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uuid:
          type: string
        extention:
          type: string
        type:
          type: string
      required:
        - id
        - name
        - uuid
        - extention
        - type
    ContractDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        description:
          type: string
        owner:
          type: string
        permissions:
          type: number
        topicId:
          type: string
        type:
          type: string
          enum:
            - WIPE
            - RETIRE
        syncRequestsDate:
          format: date-time
          type: string
        syncPoolsDate:
          format: date-time
          type: string
        lastSyncEventTimeStamp:
          type: string
        wipeContractIds:
          type: array
          items:
            type: string
        wipeTokenIds:
          type: array
          items:
            type: string
      required:
        - id
        - contractId
        - description
        - owner
        - permissions
        - topicId
        - type
        - syncRequestsDate
        - syncPoolsDate
        - lastSyncEventTimeStamp
        - wipeContractIds
        - wipeTokenIds
    ContractConfigDTO:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
      required:
        - type
        - description
    WiperRequestDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        user:
          type: string
        token:
          type: string
      required:
        - id
        - contractId
        - user
        - token
    RetireRequestDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        tokens:
          type: object
          required:
            - token
            - count
            - serials
            - decimals
            - type
            - tokenSymbol
          properties:
            token:
              type: string
            count:
              type: number
            serials:
              type: array
              items:
                type: number
            decimals:
              type: number
            type:
              enum:
                - non-fungible
                - fungible
            tokenSymbol:
              type: string
        tokenIds:
          type: array
          items:
            type: string
        user:
          type: string
      required:
        - id
        - contractId
        - tokenIds
        - user
    Date:
      type: object
      properties: {}
    RetirePoolDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        tokens:
          type: object
          required:
            - token
            - contract
            - count
            - decimals
            - type
            - tokenSymbol
          properties:
            token:
              type: string
            contract:
              type: string
            count:
              type: number
            decimals:
              type: number
            type:
              enum:
                - non-fungible
                - fungible
            tokenSymbol:
              type: string
        tokenIds:
          type: array
          items:
            type: string
        immediately:
          type: boolean
        enabled:
          type: boolean
      required:
        - id
        - contractId
        - tokenIds
        - immediately
        - enabled
    RetirePoolTokenDTO:
      type: object
      properties:
        token:
          type: string
        count:
          type: number
      required:
        - token
        - count
    RetireRequestTokenDTO:
      type: object
      properties:
        token:
          type: string
        count:
          type: number
        serials:
          type: array
          items:
            type: string
      required:
        - token
        - count
        - serials
    RegisteredUsersDTO:
      type: object
      properties:
        username:
          type: string
        did:
          type: string
        parent:
          type: string
        role:
          type: string
        policyRoles:
          type: array
          items:
            type: string
      required:
        - username
        - did
        - parent
        - role
        - policyRoles
    TaskDTO:
      type: object
      properties:
        taskId:
          type: string
          description: Task Id
          example: 00000000-0000-0000-0000-000000000000
        expectation:
          type: number
          description: Expected count of task phases
          example: 0
      required:
        - taskId
        - expectation
    ExternalDocumentDTO:
      type: object
      properties:
        owner:
          type: string
        policyTag:
          type: string
        document:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/VcDTO'
      required:
        - owner
        - policyTag
        - document
    LogFilterDTO:
      type: object
      properties:
        type:
          type: string
          nullable: true
        startDate:
          type: string
          nullable: true
        endDate:
          type: string
          nullable: true
        attributes:
          nullable: true
          type: array
          items:
            type: string
        message:
          type: string
          nullable: true
        pageSize:
          type: number
          nullable: true
        pageIndex:
          type: number
          nullable: true
        sortDirection:
          type: string
          nullable: true
      required:
        - type
        - startDate
        - endDate
        - attributes
        - message
        - pageSize
        - pageIndex
        - sortDirection
    LogResultDTO:
      type: object
      properties:
        totalCount:
          type: number
        logs:
          type: array
          items:
            type: array
      required:
        - totalCount
        - logs
    ModuleDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        uuid:
          type: string
          nullable: false
        type:
          type: string
          nullable: false
        name:
          type: string
          nullable: false
        description:
          type: string
          nullable: false
        status:
          type: string
          nullable: false
        creator:
          type: string
          nullable: false
        owner:
          type: string
          nullable: false
        topicId:
          type: string
          nullable: false
        messageId:
          type: string
          nullable: false
        codeVersion:
          type: string
          nullable: false
        createDate:
          type: string
          nullable: false
        config:
          type: object
          additionalProperties: true
          nullable: true
      required:
        - id
        - uuid
        - type
        - name
        - description
        - status
        - creator
        - owner
        - topicId
        - messageId
        - codeVersion
        - createDate
        - config
    SchemaDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Schema name
        description:
          type: string
          example: Description
        entity:
          type: string
          enum:
            - NONE
            - VC
            - EVC
            - STANDARD_REGISTRY
            - USER
            - POLICY
            - MINT_TOKEN
            - RETIRE
            - WIPE_TOKEN
            - MINT_NFTOKEN
            - ISSUER
            - USER_ROLE
            - CHUNK
            - ACTIVITY_IMPACT
            - TOKEN_DATA_SOURCE
            - ROLE
            - USER_PERMISSIONS
          example: POLICY
        iri:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - UNPUBLISHED
            - ERROR
            - DEMO
          example: DRAFT
        topicId:
          type: string
          example: 0.0.1
        version:
          type: string
          example: 1.0.0
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        messageId:
          type: string
          example: '0000000000.000000001'
        category:
          type: string
          enum:
            - POLICY
            - MODULE
            - SYSTEM
            - TAG
            - TOOL
            - STATISTIC
            - LABEL
          example: POLICY
        documentURL:
          type: string
          example: ipfs://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        contextURL:
          type: string
          example: ipfs://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        document:
          type: object
          additionalProperties: true
        context:
          type: object
          additionalProperties: true
      required:
        - id
        - uuid
        - name
        - description
        - entity
        - iri
        - status
        - topicId
        - version
        - owner
        - messageId
        - category
        - documentURL
        - contextURL
        - document
        - context
    ExportMessageDTO:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        messageId:
          type: string
        owner:
          type: string
      required:
        - uuid
        - name
        - description
        - messageId
        - owner
    ImportMessageDTO:
      type: object
      properties:
        messageId:
          type: string
        metadata:
          type: object
          additionalProperties: true
          nullable: true
      required:
        - messageId
        - metadata
    ModulePreviewDTO:
      type: object
      properties:
        module:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ModuleDTO'
        messageId:
          type: string
        schemas:
          nullable: true
          type: array
          items:
            type: array
        tags:
          nullable: true
          type: array
          items:
            type: array
        moduleTopicId:
          type: string
          nullable: true
      required:
        - module
        - messageId
        - schemas
        - tags
        - moduleTopicId
    BlockErrorsDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        errors:
          type: array
          items:
            type: string
        isValid:
          type: boolean
      required:
        - id
        - name
        - errors
        - isValid
    ValidationErrorsDTO:
      type: object
      properties:
        blocks:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/BlockErrorsDTO'
        errors:
          nullable: true
          type: array
          items:
            type: string
      required:
        - blocks
        - errors
    ModuleValidationDTO:
      type: object
      properties:
        module:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ModuleDTO'
        results:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - module
        - results
    BlockDTO:
      type: object
      properties:
        id:
          type: string
        blockType:
          type: string
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockDTO'
      required:
        - id
        - blockType
        - blocks
    ToolDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tool name
        description:
          type: string
          example: Description
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - PUBLISH_ERROR
          example: NEW
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        codeVersion:
          type: string
          example: 1.0.0
        createDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        config:
          $ref: '#/components/schemas/BlockDTO'
      required:
        - id
        - uuid
        - name
        - description
        - status
        - creator
        - owner
        - topicId
        - messageId
        - codeVersion
        - createDate
        - config
    ToolValidationDTO:
      type: object
      properties:
        tool:
          $ref: '#/components/schemas/ToolDTO'
        results:
          $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - tool
        - results
    ToolPreviewDTO:
      type: object
      properties:
        tool:
          $ref: '#/components/schemas/ToolDTO'
        schemas:
          type: array
          items:
            type: array
        tags:
          type: array
          items:
            type: array
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ToolDTO'
      required:
        - tool
        - schemas
        - tags
        - tools
    ProfileDTO:
      type: object
      properties:
        username:
          type: string
          example: username
        role:
          type: string
          enum:
            - STANDARD_REGISTRY
            - USER
            - AUDITOR
          example: USER
        permissionsGroup:
          example:
            - {}
          type: array
          items:
            type: string
        permissions:
          example:
            - POLICIES_POLICY_READ
          type: array
          items:
            type: string
        did:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        parent:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        hederaAccountId:
          type: string
          example: 0.0.1
        confirmed:
          type: boolean
          example: true
        failed:
          type: boolean
          example: true
        topicId:
          type: string
          example: 0.0.1
        parentTopicId:
          type: string
          example: 0.0.1
        didDocument:
          type: object
          nullable: true
          additionalProperties: true
        vcDocument:
          type: object
          nullable: true
          additionalProperties: true
      required:
        - username
        - role
        - permissions
        - didDocument
        - vcDocument
    SubjectDTO:
      type: object
      properties:
        '@context':
          nullable: true
          type: array
          items:
            type: string
        id:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
      required:
        - '@context'
    DidDocumentDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        context:
          nullable: true
          type: array
          items:
            type: string
        alsoKnownAs:
          nullable: true
          type: array
          items:
            type: string
        controller:
          nullable: true
          type: array
          items:
            type: string
        verificationMethod:
          nullable: true
          type: array
          items:
            type: array
        authentication:
          nullable: true
          type: array
          items:
            type: array
        assertionMethod:
          nullable: true
          type: array
          items:
            type: array
        keyAgreement:
          nullable: true
          type: array
          items:
            type: array
        capabilityInvocation:
          nullable: true
          type: array
          items:
            type: array
        capabilityDelegation:
          nullable: true
          type: array
          items:
            type: array
        service:
          nullable: true
          type: array
          items:
            type: array
      required:
        - id
        - context
        - alsoKnownAs
        - controller
        - verificationMethod
        - authentication
        - assertionMethod
        - keyAgreement
        - capabilityInvocation
        - capabilityDelegation
        - service
    DidKeyDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        key:
          type: string
          nullable: false
      required:
        - id
        - key
    CredentialsDTO:
      type: object
      properties:
        entity:
          type: string
          nullable: false
        hederaAccountId:
          type: string
          nullable: false
        hederaAccountKey:
          type: string
          nullable: false
        parent:
          type: string
          nullable: true
        vcDocument:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/SubjectDTO'
        didDocument:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/DidDocumentDTO'
        didKeys:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/DidKeyDTO'
      required:
        - entity
        - hederaAccountId
        - hederaAccountKey
    DidDocumentStatusDTO:
      type: object
      properties:
        valid:
          type: boolean
          nullable: false
        error:
          type: string
          nullable: true
        didDocument:
          type: object
          nullable: false
          required: []
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/DidKeyDTO'
      required:
        - valid
        - error
    DidKeyStatusDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        key:
          type: string
          nullable: false
        valid:
          type: boolean
          nullable: false
      required:
        - id
        - key
        - valid
    DidDocumentWithKeyDTO:
      type: object
      properties:
        document:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/DidDocumentDTO'
        keys:
          nullable: false
          type: array
          items:
            $ref: '#/components/schemas/DidKeyDTO'
      required:
        - document
        - keys
    MigrationConfigPoliciesDTO:
      type: object
      properties:
        src:
          type: string
        dst:
          type: string
      required:
        - src
        - dst
    MigrationConfigDTO:
      type: object
      properties:
        policies:
          $ref: '#/components/schemas/MigrationConfigPoliciesDTO'
        vcs:
          type: array
          items:
            type: string
        vps:
          type: array
          items:
            type: string
        schemas:
          type: object
          additionalProperties:
            type: string
        groups:
          type: object
          additionalProperties:
            type: string
        roles:
          type: object
          additionalProperties:
            type: string
        blocks:
          type: object
          additionalProperties:
            type: string
        tokens:
          type: object
          additionalProperties:
            type: string
        migrateState:
          type: boolean
        migrateRetirePools:
          type: boolean
        editedVCs:
          type: object
          additionalProperties:
            type: string
        retireContractId:
          type: string
      required:
        - policies
        - vcs
        - vps
        - schemas
        - groups
        - roles
        - blocks
        - tokens
        - migrateState
        - migrateRetirePools
        - editedVCs
        - retireContractId
    PoliciesValidationDTO:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyDTO'
        isValid:
          type: string
        errors:
          $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - policies
        - isValid
        - errors
    PolicyValidationDTO:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/PolicyDTO'
        results:
          $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - policy
        - results
    Object:
      type: object
      properties: {}
    ServiceUnavailableErrorDTO:
      type: object
      properties:
        code:
          type: number
          example: 503
        message:
          type: string
          example: Error message
      required:
        - code
        - message
    PolicyPreviewDTO:
      type: object
      properties:
        module:
          $ref: '#/components/schemas/PolicyDTO'
        messageId:
          type: string
          example: '0000000000.000000001'
        schemas:
          type: array
          items:
            type: array
        tags:
          type: array
          items:
            type: array
        moduleTopicId:
          type: string
          example: 0.0.1
      required:
        - module
        - messageId
        - schemas
        - tags
        - moduleTopicId
    RunningDetailsDTO:
      type: object
      properties:
        left:
          type: object
        right:
          type: object
        total:
          type: number
        documents:
          type: object
      required:
        - left
        - right
        - total
        - documents
    PolicyCategoryDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        name:
          type: string
          example: Large-Scale
        type:
          type: string
          example: PROJECT_SCALE
      required:
        - id
        - name
        - type
    VersionSchemaDTO:
      type: object
      properties:
        version:
          type: string
          example: 1.0.0
      required:
        - version
    MessageSchemaDTO:
      type: object
      properties:
        messageId:
          type: string
          example: '0000000000.000000001'
      required:
        - messageId
    ExportSchemaDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        name:
          type: string
          example: Schema name
        description:
          type: string
          example: Description
        version:
          type: string
          example: 1.0.0
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        messageId:
          type: string
          example: '0000000000.000000001'
      required:
        - id
        - name
        - description
        - version
        - owner
        - messageId
    SystemSchemaDTO:
      type: object
      properties:
        name:
          type: string
          example: Schema name
        entity:
          type: string
          enum:
            - STANDARD_REGISTRY
            - USER
          example: STANDARD_REGISTRY
      required:
        - name
        - entity
    SettingsDTO:
      type: object
      properties:
        ipfsStorageApiKey:
          type: string
        operatorId:
          type: string
        operatorKey:
          type: string
      required:
        - ipfsStorageApiKey
        - operatorId
        - operatorKey
    TagDTO:
      type: object
      properties:
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tag label
        description:
          type: string
          example: Description
        owner:
          type: string
          example: DID
        date:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        status:
          type: string
          enum:
            - Draft
            - Published
            - History
          example: Published
        operation:
          type: string
          enum:
            - Create
            - Delete
          example: Create
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        uri:
          type: string
          example: ipfs://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        target:
          type: string
          example: '0000000000.000000001'
        localTarget:
          type: string
          example: '000000000000000000000001'
        document:
          type: object
          additionalProperties: true
      required:
        - uuid
        - name
        - description
        - owner
        - date
        - entity
        - status
        - operation
        - topicId
        - messageId
        - policyId
        - uri
        - target
        - localTarget
        - document
    TagFilterDTO:
      type: object
      properties:
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        target:
          type: string
          example: '0000000000.000000001'
        targets:
          example: '0000000000.000000001'
          type: array
          items:
            type: string
      required:
        - entity
        - target
        - targets
    TagMapDTO:
      type: object
      properties:
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        target:
          type: string
          example: '0000000000.000000001'
        refreshDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagDTO'
      required:
        - entity
        - target
        - refreshDate
        - tags
    StatusDTO:
      type: object
      properties:
        message:
          type: string
          description: Text
        type:
          type: string
          description: Type
          enum:
            - Processing
            - Completed
            - Info
          example: Info
      required:
        - message
        - type
    TaskStatusDTO:
      type: object
      properties:
        action:
          type: string
          description: Task type
          example: Create policy
        userId:
          type: string
          description: User Id
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        expectation:
          type: number
          description: Expected count of task phases
          example: 0
        taskId:
          type: string
          description: Task Id
          example: 00000000-0000-0000-0000-000000000000
        date:
          type: string
          description: Date
          example: '1900-01-01T00:00:00.000Z'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/StatusDTO'
        result:
          type: object
          additionalProperties: true
        error:
          type: object
          additionalProperties: true
      required:
        - action
        - userId
        - expectation
        - taskId
        - date
        - statuses
        - result
        - error
    TokenDTO:
      type: object
      properties:
        tokenId:
          type: string
          example: 0.0.1
        tokenName:
          type: string
          example: Token name
        tokenSymbol:
          type: string
          example: Token symbol
        tokenType:
          type: string
          enum:
            - fungible
            - non-fungible
          example: non-fungible
        initialSupply:
          type: string
          example: '0'
        decimals:
          type: string
          example: '0'
        changeSupply:
          type: boolean
          description: Add Supply key
          example: true
        enableAdmin:
          type: boolean
          description: Add Admin key
          example: true
        enableFreeze:
          type: boolean
          description: Add Freeze key
          example: true
        enableKYC:
          type: boolean
          description: Add KYC key
          example: true
        enableWipe:
          type: boolean
          description: Add Wipe key
          example: true
      required:
        - tokenId
        - tokenName
        - tokenSymbol
        - tokenType
        - initialSupply
        - decimals
        - changeSupply
        - enableAdmin
        - enableFreeze
        - enableKYC
        - enableWipe
    TokenInfoDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        tokenId:
          type: string
          example: 0.0.1
        tokenName:
          type: string
          example: Token name
        tokenSymbol:
          type: string
          example: Token symbol
        tokenType:
          type: string
          enum:
            - fungible
            - non-fungible
          example: non-fungible
        decimals:
          type: string
          example: '0'
        associated:
          type: boolean
          description: ''
          example: true
        frozen:
          type: boolean
          description: ''
          example: true
        kyc:
          type: boolean
          description: ''
          example: true
        balance:
          type: string
          description: User balance
          example: '0'
        enableAdmin:
          type: boolean
          description: There is an Admin key
          example: true
        enableFreeze:
          type: boolean
          description: There is an Freeze key
          example: true
        enableKYC:
          type: boolean
          description: There is an KYC key
          example: true
        enableWipe:
          type: boolean
          description: There is an Wipe key
          example: true
      required:
        - id
        - tokenId
        - tokenName
        - tokenSymbol
        - tokenType
        - decimals
        - associated
        - frozen
        - kyc
        - balance
        - enableAdmin
        - enableFreeze
        - enableKYC
        - enableWipe
    ThemeRoleDTO:
      type: object
      properties:
        description:
          type: string
          example: Description
        text:
          type: string
          description: Text color
          pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
          example: '#000000'
        background:
          type: string
          description: Background color
          pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
          example: '#000000'
        border:
          type: string
          description: Border color
          pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
          example: '#000000'
        shape:
          type: string
          description: Object shape
          enum:
            - '0'
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
          example: '0'
        borderWidth:
          type: string
          description: Border width
          enum:
            - 0px
            - 1px
            - 2px
            - 3px
            - 4px
            - 5px
            - 6px
            - 7px
          example: 2px
        filterType:
          type: string
          description: Filter by type
          enum:
            - type
            - api
            - role
          example: type
        filterValue:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
      required:
        - description
        - text
        - background
        - border
        - shape
        - borderWidth
        - filterType
        - filterValue
    ThemeDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Theme name
        rules:
          type: array
          items:
            $ref: '#/components/schemas/ThemeRoleDTO'
      required:
        - id
        - uuid
        - name
        - rules
    VpDocumentDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        hash:
          type: string
          example: hash
        signature:
          type: number
          example: 0
        status:
          type: string
          enum:
            - NEW
            - ISSUE
            - REVOKE
            - SUSPEND
            - RESUME
            - FAILED
          example: NEW
        tag:
          type: string
          example: Block tag
        type:
          type: string
          example: Document type
        createDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        updateDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        document:
          $ref: '#/components/schemas/VpDTO'
      required:
        - id
        - policyId
        - hash
        - signature
        - status
        - tag
        - type
        - createDate
        - updateDate
        - owner
        - document
    WizardConfigDTO:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
        policy:
          type: object
          additionalProperties: false
          required:
            - name
            - description
            - topicDescription
            - policyTag
          properties:
            name:
              type: string
            description:
              type: string
            topicDescription:
              type: string
            policyTag:
              type: string
        schemas:
          additionalProperties: false
          items:
            type: array
          type: array
        trustChain:
          items:
            type: array
          type: array
      required:
        - roles
        - schemas
        - trustChain
    WizardResultDTO:
      type: object
      properties:
        policyId:
          type: string
        wizardConfig:
          $ref: '#/components/schemas/WizardConfigDTO'
      required:
        - policyId
        - wizardConfig
    WizardConfigAsyncDTO:
      type: object
      properties:
        saveState:
          type: boolean
        wizardConfig:
          $ref: '#/components/schemas/WizardConfigDTO'
      required:
        - saveState
        - wizardConfig
    WizardPreviewDTO:
      type: object
      properties:
        policyConfig:
          $ref: '#/components/schemas/PolicyDTO'
        wizardConfig:
          $ref: '#/components/schemas/WizardConfigDTO'
      required:
        - policyConfig
        - wizardConfig
    BrandingDTO:
      type: object
      properties:
        headerColor:
          type: string
        primaryColor:
          type: string
        companyName:
          type: string
        companyLogoUrl:
          type: string
        loginBannerUrl:
          type: string
        faviconUrl:
          type: string
        headerColor1:
          type: string
        termsAndConditions:
          type: string
      required:
        - headerColor
        - primaryColor
        - companyName
        - companyLogoUrl
        - loginBannerUrl
        - faviconUrl
        - headerColor1
        - termsAndConditions
    SuggestionsInputDTO:
      type: object
      properties:
        blockType:
          type: string
        children:
          nullable: true
          items:
            type: array
          type: array
      required:
        - blockType
        - children
    SuggestionsOutputDTO:
      type: object
      properties:
        next:
          type: string
        nested:
          type: string
      required:
        - next
        - nested
    SuggestionsConfigItemDTO:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - Policy
            - Module
        index:
          type: number
      required:
        - id
        - type
        - index
    SuggestionsConfigDTO:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/SuggestionsConfigItemDTO'
      required:
        - items
    NotificationDTO:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum:
            - INFO
            - ERROR
            - WARN
            - SUCCESS
        action:
          type: string
          enum:
            - POLICY_CONFIGURATION
            - POLICY_VIEW
            - POLICIES_PAGE
            - SCHEMAS_PAGE
            - TOKENS_PAGE
            - PROFILE_PAGE
            - POLICY_LABEL_PAGE
        result:
          type: object
        read:
          type: boolean
        old:
          type: boolean
      required:
        - title
        - message
        - type
        - action
        - result
        - read
        - old
    ProgressDTO:
      type: object
      properties:
        action:
          type: string
        message:
          type: string
        progress:
          type: number
        type:
          type: string
          enum:
            - INFO
            - ERROR
            - WARN
            - SUCCESS
        taskId:
          type: string
      required:
        - action
        - message
        - progress
        - type
        - taskId
    ProjectDTO:
      type: object
      properties:
        id:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        registered:
          type: string
        title:
          type: string
        companyName:
          type: string
        sectoralScope:
          type: string
      required:
        - id
        - policyId
        - policyName
        - registered
        - title
        - companyName
        - sectoralScope
    CompareDocumentsV2DTO:
      type: object
      properties:
        projects:
          $ref: '#/components/schemas/CompareDocumentsDTO'
        presentations:
          $ref: '#/components/schemas/CompareDocumentsDTO'
      required:
        - projects
        - presentations
    PropertiesDTO:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        value:
          type: string
      required:
        - id
        - title
        - value
    RecordStatusDTO:
      type: object
      properties:
        type:
          type: string
        policyId:
          type: string
        uuid:
          type: string
        status:
          type: string
      required:
        - type
        - policyId
        - uuid
        - status
    RecordActionDTO:
      type: object
      properties:
        uuid:
          type: string
        policyId:
          type: string
        method:
          type: string
        action:
          type: string
        time:
          type: string
        user:
          type: string
        target:
          type: string
      required:
        - uuid
        - policyId
        - method
        - action
        - time
        - user
        - target
    ResultInfoDTO:
      type: object
      properties:
        tokens:
          type: number
        documents:
          type: number
      required:
        - tokens
        - documents
    ResultDocumentDTO:
      type: object
      properties:
        type:
          type: string
        schema:
          type: string
        rate:
          type: string
        documents:
          type: object
      required:
        - type
        - schema
        - rate
        - documents
    RunningResultDTO:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/ResultInfoDTO'
        total:
          type: number
        documents:
          $ref: '#/components/schemas/ResultDocumentDTO'
      required:
        - info
        - total
        - documents
    RoleDTO:
      type: object
      properties:
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Name
        description:
          type: string
          example: Description
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        permissions:
          type: string
          enum:
            - ANALYTIC_POLICY_READ
            - ANALYTIC_MODULE_READ
            - ANALYTIC_TOOL_READ
            - ANALYTIC_SCHEMA_READ
            - ANALYTIC_DOCUMENT_READ
            - ARTIFACTS_FILE_READ
            - ARTIFACTS_FILE_CREATE
            - ARTIFACTS_FILE_DELETE
            - CONTRACTS_CONTRACT_READ
            - CONTRACTS_CONTRACT_EXECUTE
            - MODULES_MODULE_READ
            - MODULES_MODULE_CREATE
            - MODULES_MODULE_UPDATE
            - MODULES_MODULE_DELETE
            - MODULES_MODULE_REVIEW
            - POLICIES_POLICY_READ
            - POLICIES_POLICY_CREATE
            - POLICIES_POLICY_UPDATE
            - POLICIES_POLICY_DELETE
            - POLICIES_POLICY_REVIEW
            - POLICIES_POLICY_EXECUTE
            - POLICIES_POLICY_MANAGE
            - SCHEMAS_SCHEMA_READ
            - SCHEMAS_SCHEMA_CREATE
            - SCHEMAS_SCHEMA_UPDATE
            - SCHEMAS_SCHEMA_DELETE
            - SCHEMAS_SCHEMA_REVIEW
            - TOOLS_TOOL_READ
            - TOOLS_TOOL_CREATE
            - TOOLS_TOOL_UPDATE
            - TOOLS_TOOL_DELETE
            - TOOLS_TOOL_REVIEW
            - TOKENS_TOKEN_READ
            - TOKENS_TOKEN_CREATE
            - TOKENS_TOKEN_UPDATE
            - TOKENS_TOKEN_DELETE
            - TOKENS_TOKEN_EXECUTE
            - TOKENS_TOKEN_MANAGE
            - TAGS_TAG_READ
            - TAGS_TAG_CREATE
            - SUGGESTIONS_SUGGESTIONS_READ
            - SUGGESTIONS_SUGGESTIONS_UPDATE
            - PERMISSIONS_ROLE_READ
            - PERMISSIONS_ROLE_CREATE
            - PERMISSIONS_ROLE_UPDATE
            - PERMISSIONS_ROLE_DELETE
            - PERMISSIONS_ROLE_MANAGE
            - STATISTICS_STATISTIC_READ
            - STATISTICS_STATISTIC_CREATE
            - STATISTICS_LABEL_READ
            - STATISTICS_LABEL_CREATE
            - SCHEMAS_RULE_READ
            - SCHEMAS_RULE_CREATE
            - SCHEMAS_RULE_EXECUTE
            - FORMULAS_FORMULA_READ
            - FORMULAS_FORMULA_CREATE
            - ACCESS_POLICY_ALL
            - ACCESS_POLICY_ASSIGNED
            - ACCESS_POLICY_PUBLISHED
            - ACCESS_POLICY_ASSIGNED_AND_PUBLISHED
            - DELEGATION_ROLE_MANAGE
          example:
            - POLICIES_POLICY_READ
      required:
        - uuid
        - name
        - description
        - owner
        - permissions
    PermissionsDTO:
      type: object
      properties:
        name:
          type: string
          enum:
            - ANALYTIC_POLICY_READ
            - ANALYTIC_MODULE_READ
            - ANALYTIC_TOOL_READ
            - ANALYTIC_SCHEMA_READ
            - ANALYTIC_DOCUMENT_READ
            - ARTIFACTS_FILE_READ
            - ARTIFACTS_FILE_CREATE
            - ARTIFACTS_FILE_DELETE
            - CONTRACTS_CONTRACT_READ
            - CONTRACTS_CONTRACT_EXECUTE
            - MODULES_MODULE_READ
            - MODULES_MODULE_CREATE
            - MODULES_MODULE_UPDATE
            - MODULES_MODULE_DELETE
            - MODULES_MODULE_REVIEW
            - POLICIES_POLICY_READ
            - POLICIES_POLICY_CREATE
            - POLICIES_POLICY_UPDATE
            - POLICIES_POLICY_DELETE
            - POLICIES_POLICY_REVIEW
            - POLICIES_POLICY_EXECUTE
            - POLICIES_POLICY_MANAGE
            - SCHEMAS_SCHEMA_READ
            - SCHEMAS_SCHEMA_CREATE
            - SCHEMAS_SCHEMA_UPDATE
            - SCHEMAS_SCHEMA_DELETE
            - SCHEMAS_SCHEMA_REVIEW
            - TOOLS_TOOL_READ
            - TOOLS_TOOL_CREATE
            - TOOLS_TOOL_UPDATE
            - TOOLS_TOOL_DELETE
            - TOOLS_TOOL_REVIEW
            - TOKENS_TOKEN_READ
            - TOKENS_TOKEN_CREATE
            - TOKENS_TOKEN_UPDATE
            - TOKENS_TOKEN_DELETE
            - TOKENS_TOKEN_EXECUTE
            - TOKENS_TOKEN_MANAGE
            - TAGS_TAG_READ
            - TAGS_TAG_CREATE
            - SUGGESTIONS_SUGGESTIONS_READ
            - SUGGESTIONS_SUGGESTIONS_UPDATE
            - PERMISSIONS_ROLE_READ
            - PERMISSIONS_ROLE_CREATE
            - PERMISSIONS_ROLE_UPDATE
            - PERMISSIONS_ROLE_DELETE
            - PERMISSIONS_ROLE_MANAGE
            - STATISTICS_STATISTIC_READ
            - STATISTICS_STATISTIC_CREATE
            - STATISTICS_LABEL_READ
            - STATISTICS_LABEL_CREATE
            - SCHEMAS_RULE_READ
            - SCHEMAS_RULE_CREATE
            - SCHEMAS_RULE_EXECUTE
            - FORMULAS_FORMULA_READ
            - FORMULAS_FORMULA_CREATE
            - ACCESS_POLICY_ALL
            - ACCESS_POLICY_ASSIGNED
            - ACCESS_POLICY_PUBLISHED
            - ACCESS_POLICY_ASSIGNED_AND_PUBLISHED
            - DELEGATION_ROLE_MANAGE
          example: ANALYTIC_POLICY_READ
        category:
          type: string
          enum:
            - ACCOUNTS
            - SESSION
            - PROFILES
            - ANALYTIC
            - ARTIFACTS
            - POLICIES
            - BRANDING
            - CONTRACTS
            - DEMO
            - IPFS
            - LOG
            - MODULES
            - SETTINGS
            - SUGGESTIONS
            - TAGS
            - SCHEMAS
            - TOKENS
            - AUDIT
            - TOOLS
            - PERMISSIONS
            - ACCESS
            - DELEGATION
            - STATISTICS
            - FORMULAS
          example: ANALYTIC
        entity:
          type: string
          enum:
            - ACCOUNT
            - STANDARD_REGISTRY
            - USER
            - BALANCE
            - RESTORE
            - RECORD
            - POLICY
            - TOOL
            - DOCUMENT
            - SCHEMA
            - MODULE
            - FILE
            - CONFIG
            - CONTRACT
            - WIPE_REQUEST
            - WIPE_ADMIN
            - WIPE_MANAGER
            - WIPER
            - POOL
            - RETIRE_REQUEST
            - RETIRE_ADMIN
            - PERMISSIONS
            - KEY
            - LOG
            - MIGRATION
            - SETTINGS
            - SUGGESTIONS
            - TAG
            - SYSTEM_SCHEMA
            - THEME
            - TOKEN
            - TRUST_CHAIN
            - ROLE
            - STATISTIC
            - RULE
            - LABEL
            - FORMULA
          example: POLICY
        action:
          type: string
          enum:
            - ALL
            - READ
            - CREATE
            - UPDATE
            - DELETE
            - REVIEW
            - AUDIT
            - EXECUTE
            - MANAGE
            - ASSIGNED
            - PUBLISHED
            - ASSIGNED_AND_PUBLISHED
          example: READ
        disabled:
          type: boolean
          example: false
        dependOn:
          example:
            - POLICIES_POLICY_READ
          type: array
          items:
            type: string
      required:
        - name
        - category
        - entity
        - action
        - disabled
        - dependOn
    AssignPolicyDTO:
      type: object
      properties:
        policyIds:
          example:
            - '000000000000000000000001'
          type: array
          items:
            type: string
        assign:
          type: boolean
          example: true
      required:
        - policyIds
        - assign
    StatisticDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tool name
        description:
          type: string
          example: Description
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        policyTopicId:
          type: string
          example: 0.0.1
        policyInstanceTopicId:
          type: string
          example: 0.0.1
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - ERROR
            - ACTIVE
          example: DRAFT
        config:
          type: object
          nullable: true
          additionalProperties: true
      required:
        - name
        - config
    StatisticDefinitionRelationshipsDTO:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/PolicyDTO'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaDTO'
        schema:
          $ref: '#/components/schemas/SchemaDTO'
    StatisticAssessmentDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        definitionId:
          type: string
          example: '000000000000000000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        policyTopicId:
          type: string
          example: 0.0.1
        policyInstanceTopicId:
          type: string
          example: 0.0.1
        topicId:
          type: string
          example: 0.0.1
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        messageId:
          type: string
          example: '0000000000.000000001'
        target:
          type: string
          example: '0000000000.000000001'
        relationships:
          example:
            - '0000000000.000000001'
          type: array
          items:
            type: string
        document:
          type: object
          nullable: true
          additionalProperties: true
      required:
        - document
    StatisticAssessmentRelationshipsDTO:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/VcDocumentDTO'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/VcDocumentDTO'
    SchemaRuleDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tool name
        description:
          type: string
          example: Description
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        policyId:
          type: string
          example: '000000000000000000000001'
        policyTopicId:
          type: string
          example: 0.0.1
        policyInstanceTopicId:
          type: string
          example: 0.0.1
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - ERROR
            - ACTIVE
          example: DRAFT
        config:
          type: object
          nullable: true
          additionalProperties: true
      required:
        - name
        - config
    SchemaRuleRelationshipsDTO:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/PolicyDTO'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaDTO'
    SchemaRuleOptionsDTO:
      type: object
      properties:
        policyId:
          type: string
          example: '000000000000000000000001'
        schemaId:
          type: string
          example: '000000000000000000000001'
        documentId:
          type: string
          example: '000000000000000000000001'
        parentId:
          type: string
          example: '000000000000000000000001'
    SchemaRuleDataDTO:
      type: object
      properties:
        rules:
          $ref: '#/components/schemas/SchemaRuleDTO'
        document:
          $ref: '#/components/schemas/VcDocumentDTO'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/VcDocumentDTO'
    FormulaDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tool name
        description:
          type: string
          example: Description
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        messageId:
          type: string
          example: '0000000000.000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        policyTopicId:
          type: string
          example: 0.0.1
        policyInstanceTopicId:
          type: string
          example: 0.0.1
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - ERROR
            - ACTIVE
          example: DRAFT
        config:
          type: object
          nullable: true
          additionalProperties: true
      required:
        - name
        - config
    FormulaRelationshipsDTO:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/PolicyDTO'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaDTO'
        formulas:
          type: array
          items:
            $ref: '#/components/schemas/FormulaDTO'
    FormulasDataDTO:
      type: object
      properties:
        formulas:
          type: array
          items:
            $ref: '#/components/schemas/FormulaDTO'
        document:
          $ref: '#/components/schemas/VcDocumentDTO'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/VcDocumentDTO'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaDTO'
    FormulasOptionsDTO:
      type: object
      properties:
        policyId:
          type: string
          example: '000000000000000000000001'
        schemaId:
          type: string
          example: '000000000000000000000001'
        documentId:
          type: string
          example: '000000000000000000000001'
        parentId:
          type: string
          example: '000000000000000000000001'
    PolicyLabelDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tool name
        description:
          type: string
          example: Description
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        policyTopicId:
          type: string
          example: 0.0.1
        policyInstanceTopicId:
          type: string
          example: 0.0.1
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - ERROR
            - ACTIVE
          example: DRAFT
        config:
          type: object
          additionalProperties: true
          nullable: true
      required:
        - name
        - config
    PolicyLabelRelationshipsDTO:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/PolicyDTO'
        policySchemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaDTO'
        documentsSchemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaDTO'
    PolicyLabelFiltersDTO:
      type: object
      properties:
        text:
          type: string
          example: Name
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        components:
          type: string
          description: Component type
          enum:
            - all
            - label
            - statistic
          example: all
    PolicyLabelComponentsDTO:
      type: object
      properties:
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/StatisticDefinitionDTO'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/PolicyLabelDTO'
    PolicyLabelDocumentDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        definitionId:
          type: string
          example: '000000000000000000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        policyTopicId:
          type: string
          example: 0.0.1
        policyInstanceTopicId:
          type: string
          example: 0.0.1
        topicId:
          type: string
          example: 0.0.1
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        messageId:
          type: string
          example: '0000000000.000000001'
        target:
          type: string
          example: '0000000000.000000001'
        relationships:
          example:
            - '0000000000.000000001'
          type: array
          items:
            type: string
        document:
          type: object
          nullable: true
          additionalProperties: true
      required:
        - document
    PolicyLabelDocumentRelationshipsDTO:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/VpDocumentDTO'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/VcDocumentDTO'
    WorkersTasksDTO:
      type: object
      properties:
        createDate:
          type: string
        done:
          type: boolean
        id:
          type: string
        isRetryableTask:
          type: boolean
        processedTime:
          type: string
        sent:
          type: boolean
        taskId:
          type: string
        type:
          type: string
        updateDate:
          type: string
      required:
        - createDate
        - done
        - id
        - isRetryableTask
        - processedTime
        - sent
        - taskId
        - type
        - updateDate
    CredentialSubjectDTO:
      type: object
      properties:
        geography:
          type: string
        law:
          type: string
        tags:
          type: string
        ISIC:
          type: string
        '@context':
          type: array
          items:
            type: string
        id:
          type: string
        type:
          type: string
      required:
        - geography
        - law
        - tags
        - ISIC
        - '@context'
        - id
        - type
