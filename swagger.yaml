openapi: 3.0.0
paths:
  /accounts/session:
    get:
      operationId: AccountApi_getSession
      summary: Returns current session of the user.
      description: Returns current user session.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsSessionResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_0
        - accounts
      security:
        - bearer: []
  /accounts/register:
    post:
      operationId: AccountApi_register
      summary: Registers a new user account.
      description: Object that contain username, password and role (optional) fields.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
  /accounts/login:
    post:
      operationId: AccountApi_login
      summary: Logs user into the system.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsSessionResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
  /accounts/access-token:
    post:
      operationId: AccountApi_getAccessToken
      summary: Returns access token.
      description: Returns access token.
      parameters: []
      responses:
        '200':
          description: Successful operation.
      tags: *ref_0
  /accounts:
    get:
      operationId: AccountApi_getAllAccounts
      summary: Returns a list of users, excluding Standard Registry and Auditors.
      description: >-
        Returns all users except those with roles Standard Registry and Auditor.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearerAuth: []
  /accounts/standard-registries:
    get:
      operationId: AccountApi_getStandatdRegistries
      summary: Returns all Standard Registries.
      description: Returns all Standard Registries.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearerAuth: []
  /accounts/standard-registries/aggregated:
    get:
      operationId: AccountApi_getAggregatedStandardRegistries
      summary: Returns all Standard Registries aggregated with polices and vcDocuments.
      description: Returns all Standard Registries aggregated with polices and vcDocuments
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AggregatedDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearerAuth: []
  /accounts/balance:
    get:
      operationId: AccountApi_getBalance
      summary: Returns user's Hedera account balance.
      description: Requests current Hedera account balance.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearerAuth: []
  /analytics/search/policies:
    post:
      operationId: AnalyticsApi_searchPolicies
      summary: Search policies.
      description: >-
        Search policies. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSearchPoliciesDTO'
            examples:
              Filter:
                value:
                  policyId: '000000000000000000000000'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPoliciesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_1
        - analytics
      security:
        - bearerAuth: []
  /analytics/compare/policies:
    post:
      operationId: AnalyticsApi_comparePolicies
      summary: Compare policies.
      description: >-
        Compare policies. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPoliciesDTO'
            examples:
              Filter1:
                value:
                  policyId1: '000000000000000000000001'
                  policyId2: '000000000000000000000002'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter2:
                value:
                  policyIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparePoliciesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/modules:
    post:
      operationId: AnalyticsApi_compareModules
      summary: Compare modules.
      description: >-
        Compare modules. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterModulesDTO'
            examples:
              Filter:
                value:
                  moduleId1: '000000000000000000000001'
                  moduleId2: '000000000000000000000002'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareModulesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/schemas:
    post:
      operationId: AnalyticsApi_compareSchemas
      summary: Compare schemas.
      description: >-
        Compare schemas. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSchemasDTO'
            examples:
              Filter:
                value:
                  schemaId1: '000000000000000000000001'
                  schemaId2: '000000000000000000000002'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareSchemasDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/documents:
    post:
      operationId: AnalyticsApi_compareDocuments
      summary: Compare documents.
      description: >-
        Compare documents. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000002'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareDocumentsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/tools:
    post:
      operationId: AnalyticsApi_compareTools
      summary: Compare tools.
      description: >-
        Compare tools. Only users with the Standard Registry role are allowed to
        make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterToolsDTO'
            examples:
              Filter1:
                value:
                  toolId1: '000000000000000000000001'
                  toolId2: '000000000000000000000002'
              Filter2:
                value:
                  toolIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareToolsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/policies/export:
    post:
      operationId: AnalyticsApi_comparePoliciesExport
      summary: Compare policies.
      description: >-
        Compare policies. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPoliciesDTO'
            examples:
              Filter1:
                value:
                  policyId1: '000000000000000000000001'
                  policyId2: '000000000000000000000002'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter2:
                value:
                  policyIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/modules/export:
    post:
      operationId: AnalyticsApi_compareModulesExport
      summary: Compare modules.
      description: >-
        Compare modules. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterModulesDTO'
            examples:
              Filter:
                value:
                  moduleId1: '000000000000000000000001'
                  moduleId2: '000000000000000000000002'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/schemas/export:
    post:
      operationId: AnalyticsApi_compareSchemasExport
      summary: Compare schemas.
      description: >-
        Compare schemas. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSchemasDTO'
            examples:
              Filter:
                value:
                  schemaId1: '000000000000000000000001'
                  schemaId2: '000000000000000000000002'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/documents/export:
    post:
      operationId: AnalyticsApi_compareDocumentsExport
      summary: Compare documents.
      description: >-
        Compare documents. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000002'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/compare/tools/export:
    post:
      operationId: AnalyticsApi_compareToolsExport
      summary: Compare tools.
      description: >-
        Compare tools. Only users with the Standard Registry role are allowed to
        make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterToolsDTO'
            examples:
              Filter1:
                value:
                  toolId1: '000000000000000000000001'
                  toolId2: '000000000000000000000002'
              Filter2:
                value:
                  toolIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /analytics/search/blocks:
    post:
      operationId: AnalyticsApi_searchBlocks
      summary: Search same blocks.
      description: >-
        Search same blocks. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSearchPoliciesDTO'
            examples:
              Filter:
                value:
                  uuid: ''
                  config: {}
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPoliciesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearerAuth: []
  /artifacts:
    get:
      tags:
        - artifacts
      description: Returns all artifacts.
      security:
        - bearerAuth: []
      summary: Returns all artifacts.
      parameters:
        - in: query
          name: policyId
          schema:
            type: string
          description: Policy identifier
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artifact'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artifacts/{parentId}:
    post:
      operationId: ArtifactApi_uploadArtifacts
      summary: Upload artifact.
      description: Upload artifact. For users with the Standard Registry role only.
      parameters:
        - name: parentId
          required: true
          in: path
          description: Parent ID
          schema:
            type: string
      requestBody:
        required: true
        description: Form data with artifacts.
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: object
                properties:
                  artifacts:
                    type: string
                    format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtifactDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags:
        - artifacts
      security:
        - bearerAuth: []
  /artifacts/{artifactId}:
    delete:
      tags:
        - artifacts
      description: Delete artifact.
      security:
        - bearerAuth: []
      summary: Delete artifact.
      parameters:
        - in: path
          name: artifactId
          schema:
            type: string
          required: true
          description: Artifact identifier
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /contracts:
    get:
      operationId: ContractsApi_getContracts
      summary: Return a list of all contracts.
      description: Returns all contracts.
      parameters:
        - name: type
          required: false
          in: query
          description: Contract type
          example: RETIRE
          schema:
            enum:
              - WIPE
              - RETIRE
            type: string
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
      responses:
        '200':
          description: Contracts.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_2
        - contracts
      security:
        - bearer: []
    post:
      operationId: ContractsApi_createContract
      summary: Create contract.
      description: >-
        Create smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
      responses:
        '201':
          description: Created contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/import:
    post:
      operationId: ContractsApi_importContract
      summary: Import contract.
      description: >-
        Import smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contractId:
                  type: string
                  description: Hedera Identifier
                  example: 0.0.1
                description:
                  type: string
              required:
                - contractId
      responses:
        '200':
          description: Imported contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/{contractId}/permissions:
    get:
      operationId: ContractsApi_contractPermissions
      summary: Get contract permissions.
      description: >-
        Get smart-contract permissions. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Contract permissions.
          content:
            application/json:
              schema:
                type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/{contractId}:
    delete:
      operationId: ContractsApi_removeContract
      summary: Remove contract.
      description: >-
        Remove smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/requests:
    get:
      operationId: ContractsApi_getWipeRequests
      summary: Return a list of all wipe requests.
      description: >-
        Returns all wipe requests. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: false
          in: query
          description: Contract identifier
          example: 0.0.1
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WiperRequestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/{contractId}/requests/enable:
    post:
      operationId: ContractsApi_enableWipeRequests
      summary: Enable wipe requests.
      description: >-
        Enable wipe contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: false
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/{contractId}/requests/disable:
    post:
      operationId: ContractsApi_disableWipeRequests
      summary: Disable wipe requests.
      description: >-
        Disable wipe contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: false
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/requests/{requestId}/approve:
    post:
      operationId: ContractsApi_approveWipeRequest
      summary: Approve wipe request.
      description: >-
        Approve wipe contract request. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/requests/{requestId}/reject:
    delete:
      operationId: ContractsApi_rejectWipeRequest
      summary: Reject wipe request.
      description: >-
        Reject wipe contract request. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: ban
          required: false
          in: query
          description: Reject and ban
          schema:
            type: boolean
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/{contractId}/requests:
    delete:
      operationId: ContractsApi_clearWipeRequests
      summary: Clear wipe requests.
      description: >-
        Clear wipe contract requests. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/{contractId}/admin/{hederaId}:
    post:
      operationId: ContractsApi_wipeAddAdmin
      summary: Add wipe admin.
      description: >-
        Add wipe contract admin. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_wipeRemoveAdmin
      summary: Remove wipe admin.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/{contractId}/manager/{hederaId}:
    post:
      operationId: ContractsApi_wipeAddManager
      summary: Add wipe manager.
      description: >-
        Add wipe contract manager. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_wipeRemoveManager
      summary: Remove wipe manager.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/wipe/{contractId}/wiper/{hederaId}:
    post:
      operationId: ContractsApi_wipeAddWiper
      summary: Add wipe wiper.
      description: >-
        Add wipe contract wiper. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_wipeRemoveWiper
      summary: Remove wipe wiper.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/{contractId}/pools/sync:
    post:
      operationId: ContractsApi_retireSyncPools
      summary: Sync retire pools.
      description: >-
        Sync retire contract pools. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: false
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Sync date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Date'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/requests:
    get:
      operationId: ContractsApi_getRetireRequests
      summary: Return a list of all retire requests.
      description: Returns all retire requests.
      parameters:
        - name: contractId
          required: false
          in: query
          description: Contract identifier
          example: 0.0.1
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetireRequestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/pools:
    get:
      operationId: ContractsApi_getRetirePools
      summary: Return a list of all retire pools.
      description: Returns all retire pools.
      parameters:
        - name: tokens
          required: false
          in: query
          description: Tokens
          example: 0.0.1,0.0.2,0.0.3
          schema:
            type: string
        - name: contractId
          required: false
          in: query
          description: Contract identifier
          example: 0.0.1
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetirePoolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/{contractId}/requests:
    delete:
      operationId: ContractsApi_clearRetireRequests
      summary: Clear retire requests.
      description: >-
        Clear retire contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: false
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/{contractId}/pools:
    delete:
      operationId: ContractsApi_clearRetirePools
      summary: Clear retire pools.
      description: >-
        Clear retire contract pools. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: false
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
    post:
      operationId: ContractsApi_setRetirePool
      summary: Set retire pool.
      description: >-
        Set retire contract pool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: contractId
          required: false
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetirePoolTokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetirePoolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/pools/{poolId}:
    delete:
      operationId: ContractsApi_unsetRetirePool
      summary: Unset retire pool.
      description: >-
        Unset retire contract pool. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: poolId
          required: false
          in: path
          description: Pool Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/requests/{requestId}:
    delete:
      operationId: ContractsApi_unsetRetireRequest
      summary: Unset retire request.
      description: >-
        Unset retire contract request. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: requestId
          required: false
          in: path
          description: Request Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/pools/{poolId}/retire:
    post:
      operationId: ContractsApi_retire
      summary: Retire tokens.
      description: Retire tokens.
      parameters:
        - name: poolId
          required: false
          in: path
          description: Pool Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetireRequestTokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/requests/{requestId}/approve:
    post:
      operationId: ContractsApi_approveRetire
      summary: Approve retire request.
      description: >-
        Approve retire contract request. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/requests/{requestId}/cancel:
    delete:
      operationId: ContractsApi_cancelRetireRequest
      summary: Cancel retire request.
      description: Cancel retire contract request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire/{contractId}/admin/{hederaId}:
    post:
      operationId: ContractsApi_retireAddAdmin
      summary: Add retire admin.
      description: >-
        Add retire contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_retireRemoveAdmin
      summary: Remove wipe admin.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts/retire:
    get:
      operationId: ContractsApi_getRetireVCs
      summary: Return a list of all retire vcs.
      description: Returns all retire vcs.
      parameters:
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /demo/registered-users:
    get:
      operationId: DemoApi_registeredUsers
      summary: Returns list of registered users.
      description: Returns list of registered users.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredUsersDTO'
      tags:
        - demo
  /demo/random-key:
    get:
      tags:
        - demo
      description: Generates a new Hedera account with a random private key.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HederaAccount'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /demo/push/random-key:
    get:
      tags:
        - demo
      description: Generates a new Hedera account with a random private key.
      security:
        - bearerAuth: []
      summary: Generates a new Hedera account with a random private key.
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /external:
    post:
      tags:
        - external
      description: Sends data from an external source.
      summary: Sends data from an external source.
      requestBody:
        description: Object that contains a VC Document.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalData'
      responses:
        '200':
          description: Successful operation.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ipfs/file:
    post:
      operationId: IpfsApi_postFile
      summary: Add file from ipfs.
      description: Add file from ipfs.
      parameters: []
      responses:
        '401':
          description: Unauthorized
      tags: &ref_3
        - ipfs
      security:
        - bearer: []
  /ipfs/file/dry-run/{policyId}:
    post:
      operationId: IpfsApi_postFileDryRun
      summary: Add file from ipfs for dry run mode.
      description: Add file from ipfs for dry run mode.
      parameters: []
      responses:
        '401':
          description: Unauthorized
      tags: *ref_3
      security:
        - bearer: []
  /ipfs/file/{cid}:
    get:
      tags:
        - ipfs
      description: Get file from ipfs.
      summary: Get file from ipfs.
      parameters:
        - in: path
          name: cid
          schema:
            type: string
          required: true
          description: File CID.
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created.
          content:
            binary/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ipfs/file/{cid}/dry-run:
    get:
      operationId: IpfsApi_getFileDryRun
      summary: Get file from ipfs for dry run mode.
      description: Get file from ipfs for dry run mode.
      parameters:
        - name: cid
          required: true
          in: path
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
      tags: *ref_3
      security:
        - bearer: []
  /logs:
    post:
      tags:
        - logs
      description: Returns logs. For users with the Standard Registry role only.
      security:
        - bearerAuth: []
      requestBody:
        description: Log filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogFilters'
      summary: Returns logs.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                  logs:
                    $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logs/attributes:
    get:
      tags:
        - logs
      description: Returns logs attributes. For users with the Standard Registry role only.
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Part of name.
        - in: query
          name: existingAttributes
          schema:
            type: array
            items:
              type: string
          description: Attributes to exclude.
      security:
        - bearerAuth: []
      summary: Returns logs attributes.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /map/key:
    get:
      tags:
        - maps
      description: Returns map api key.
      security:
        - bearerAuth: []
      summary: Returns map api key.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /map/sh:
    get:
      operationId: MapApi_getSentinelKey
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - map
  /metrics:
    get:
      operationId: MetricsApi_getMetrics
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - metrics
  /modules:
    get:
      tags:
        - modules
      description: >-
        Returns all modules. Only users with the Standard Registry and Installer
        role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Return a list of all modules.
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - modules
      description: >-
        Creates a new module. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Creates a new module.
      requestBody:
        description: Object that contains module configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '201':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/schemas:
    get:
      operationId: ModulesApi_getModuleSchemas
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_4
        - modules
    post:
      operationId: ModulesApi_postSchemas
      parameters: []
      responses:
        '201':
          description: ''
      tags: *ref_4
  /modules/{uuid}:
    get:
      tags:
        - modules
      description: >-
        Retrieves module configuration for the specified module ID. Only users
        with the Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected module ID.
      summary: Retrieves module configuration.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - modules
      description: >-
        Updates module configuration for the specified module ID. Only users
        with the Standard Registry role are allowed to make the request.
      summary: Updates module configuration.
      parameters:
        - in: path
          name: uuid
          description: Selected module ID.
          required: true
          schema:
            type: string
      requestBody:
        description: Object that contains module configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - modules
      description: >-
        Deletes the module with the provided module ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Module ID.
      security:
        - bearerAuth: []
      summary: Deletes the module.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/menu:
    get:
      tags:
        - modules
      description: >-
        Returns modules menu. Only users with the Standard Registry and
        Installer role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Return a list of modules.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Module'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/{uuid}/export/file:
    get:
      tags:
        - modules
      description: >-
        Returns a zip file containing the published module and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected module ID.
      security:
        - bearerAuth: []
      summary: >-
        Return module and its artifacts in a zip file format for the specified
        module.
      responses:
        '200':
          description: Successful operation. Response zip file
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/{uuid}/export/message:
    get:
      tags:
        - modules
      description: >-
        Returns the Hedera message ID for the specified module published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected module ID.
      security:
        - bearerAuth: []
      summary: Return Heder message ID for the specified published module.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportModule'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/import/message:
    post:
      tags:
        - modules
      description: >-
        Imports new module and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      security:
        - bearerAuth: []
      summary: Imports new module from IPFS.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the module.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/import/file:
    post:
      tags:
        - modules
      description: >-
        Imports new module and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Imports new module from a zip file.
      requestBody:
        description: >-
          A zip file that contains the module and associated schemas and VCs to
          be imported.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/import/message/preview:
    post:
      tags:
        - modules
      description: >-
        Previews the module from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      summary: Module preview from IPFS.
      security:
        - bearerAuth: []
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the module.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewModule'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/import/file/preview:
    post:
      tags:
        - modules
      description: >-
        Previews the module from a zip file without loading it into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      summary: Module preview from a zip file.
      security:
        - bearerAuth: []
      requestBody:
        description: >-
          A zip file that contains the module and associated schemas and VCs to
          be viewed.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewModule'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/{uuid}/publish:
    put:
      tags:
        - modules
      description: >-
        Publishes the module with the specified (internal) module ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected module ID.
      summary: Publishes the module onto IPFS.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishModule'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /modules/validate:
    post:
      tags:
        - modules
      description: >-
        Validates selected module. Only users with the Standard Registry role
        are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Validates module.
      requestBody:
        description: Object that contains module configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateModule'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tools:
    post:
      operationId: ToolsApi_createNewTool
      summary: Creates a new tool.
      description: >-
        Creates a new tool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_5
        - tools
      security:
        - bearerAuth: []
    get:
      operationId: ToolsApi_getTools
      summary: Return a list of all tools.
      description: >-
        Returns all tools. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          schema:
            type: number
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/push:
    post:
      operationId: ToolsApi_createNewToolAsync
      summary: Creates a new tool.
      description: >-
        Creates a new tool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/{id}:
    delete:
      operationId: ToolsApi_deleteTool
      summary: >-
        Deletes the tool with the provided tool ID. Only users with the Standard
        Registry role are allowed to make the request.
      description: Deletes the tool.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
    get:
      operationId: ToolsApi_getToolById
      summary: Retrieves tool configuration.
      description: >-
        Retrieves tool configuration for the specified tool ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
    put:
      operationId: ToolsApi_updateTool
      summary: Updates tool configuration.
      description: >-
        Updates tool configuration for the specified tool ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/{id}/publish:
    put:
      operationId: ToolsApi_publishTool
      summary: Publishes the tool onto IPFS.
      description: >-
        Publishes the tool with the specified (internal) tool ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/{id}/push/publish:
    put:
      operationId: ToolsApi_publishToolAsync
      summary: Publishes the tool onto IPFS.
      description: >-
        Publishes the tool with the specified (internal) tool ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/validate:
    post:
      operationId: ToolsApi_validateTool
      summary: Validates selected tool.
      description: >-
        Validates selected tool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/{id}/export/file:
    get:
      operationId: ToolsApi_toolExportFile
      summary: >-
        Return tool and its artifacts in a zip file format for the specified
        tool.
      description: >-
        Returns a zip file containing the published tool and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/{id}/export/message:
    get:
      operationId: ToolsApi_toolExportMessage
      summary: Return Heder message ID for the specified published tool.
      description: >-
        Returns the Hedera message ID for the specified tool published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/import/message/preview:
    post:
      operationId: ToolsApi_toolImportMessagePreview
      summary: Imports new tool from IPFS.
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/import/message:
    post:
      operationId: ToolsApi_toolImportMessage
      summary: Imports new tool from IPFS.
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/import/file/preview:
    post:
      operationId: ToolsApi_toolImportFilePreview
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/import/file:
    post:
      operationId: ToolsApi_toolImportFile
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/import/file-metadata:
    post:
      operationId: ToolsApi_toolImportFileWithMetadata
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Form data with tool file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/push/import/file:
    post:
      operationId: ToolsApi_toolImportFileAsync
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/push/import/file-metadata:
    post:
      operationId: ToolsApi_toolImportFileWithMetadataAsync
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Form data with tool file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/push/import/message:
    post:
      operationId: ToolsApi_toolImportMessageAsync
      summary: Imports new tool from IPFS.
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /tools/menu/all:
    get:
      operationId: ToolsApi_getMenu
      summary: Return a list of tools.
      description: >-
        Returns tools menu. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearerAuth: []
  /profiles/{username}:
    get:
      operationId: ProfileApi_getProfile
      summary: Returns user account info.
      description: >-
        Returns user account information. For users with the Standard Registry
        role it also returns address book and VC document information.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to fetch the information
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_6
        - profiles
      security:
        - bearerAuth: []
        - bearer: []
    put:
      operationId: ProfileApi_setUserProfile
      summary: Sets Hedera credentials for the user.
      description: >-
        Sets Hedera credentials for the user. For users with the Standard
        Registry role it also creates an address book.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to update the information.
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Created.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearerAuth: []
        - bearer: []
  /profiles/push/{username}:
    put:
      operationId: ProfileApi_setUserProfileAsync
      summary: Sets Hedera credentials for the user.
      description: >-
        Sets Hedera credentials for the user. For users with the Standard
        Registry role it also creates an address book.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to update the information.
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearerAuth: []
        - bearer: []
  /profiles/{username}/balance:
    get:
      operationId: ProfileApi_getUserBalance
      summary: Returns user's Hedera account balance.
      description: >-
        Requests Hedera account balance. Only users with the Installer role are
        allowed to make the request.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to fetch the balance.
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearerAuth: []
        - bearer: []
  /profiles/restore/{username}:
    put:
      operationId: ProfileApi_restoreUserProfile
      summary: Restore user data (policy, DID documents, VC documents).
      description: Restore user data (policy, DID documents, VC documents).
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to restore the information.
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearerAuth: []
        - bearer: []
  /profiles/restore/topics/{username}:
    put:
      operationId: ProfileApi_restoreTopic
      summary: List of available recovery topics.
      description: List of available recovery topics.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to restore the information.
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearerAuth: []
        - bearer: []
  /profiles/did-document/validate:
    post:
      operationId: ProfileApi_validateDidDocument
      summary: Validate DID document format.
      description: Validate DID document format.
      parameters: []
      requestBody:
        required: true
        description: DID Document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DidDocumentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DidDocumentStatusDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearerAuth: []
        - bearer: []
  /profiles/did-keys/validate:
    post:
      operationId: ProfileApi_validateDidKeys
      summary: Validate DID document keys.
      description: Validate DID document keys.
      parameters: []
      requestBody:
        required: true
        description: DID Document and keys.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DidDocumentWithKeyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DidKeyStatusDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearerAuth: []
        - bearer: []
  /policies:
    get:
      tags:
        - policies
      description: >-
        Returns all policies. Only users with the Standard Registry and
        Installer role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Return a list of all policies.
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/PolicyConfig'
                    - type: object
                      properties:
                        userRoles:
                          type: array
                          items:
                            type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - policies
      description: >-
        Creates a new policy. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Creates a new policy.
      requestBody:
        description: Object that contains policy configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyConfig'
      responses:
        '201':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/migrate-data:
    post:
      operationId: PolicyApi_migrateData
      summary: Migrate policy data.
      description: >-
        Migrate policy data. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Migration config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationConfigDTO'
      responses:
        '200':
          description: Errors while migration.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    error:
                      type: string
                    id:
                      type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_7
        - policies
      security:
        - bearerAuth: []
  /policies/push/migrate-data:
    post:
      operationId: PolicyApi_migrateDataAsync
      summary: Migrate policy data asynchronous.
      description: >-
        Migrate policy data asynchronous. Only users with the Standard Registry
        role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Migration config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationConfigDTO'
      responses:
        '202':
          description: Created task.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
  /policies/push:
    post:
      tags:
        - policies
      description: >-
        Creates a new policy. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Creates a new policy.
      requestBody:
        description: Object that contains policy configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyConfig'
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/push/{policyId}:
    post:
      operationId: PolicyApi_updatePolicyAsync
      summary: ''
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
    delete:
      operationId: PolicyApi_deletePolicyAsync
      parameters: []
      responses:
        '202':
          description: ''
      tags: *ref_7
      security:
        - bearerAuth: []
  /policies/{policyId}:
    get:
      tags:
        - policies
      description: >-
        Retrieves policy configuration for the specified policy ID. Only users
        with the Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      summary: Retrieves policy configuration.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PolicyConfig'
                  - type: object
                    properties:
                      userRoles:
                        type: array
                        items:
                          type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - policies
      description: >-
        Updates policy configuration for the specified policy ID. Only users
        with the Standard Registry role are allowed to make the request.
      summary: Updates policy configuration.
      parameters:
        - in: path
          name: policyId
          description: Selected policy ID.
          required: true
          schema:
            type: string
      requestBody:
        description: Object that contains policy configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyConfig'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/publish:
    put:
      tags:
        - policies
      description: >-
        Publishes the policy with the specified (internal) policy ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      requestBody:
        description: Object that contains policy version.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policyVersion:
                  type: string
      summary: Publishes the policy onto IPFS.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishPolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/push/{policyId}/publish:
    put:
      tags:
        - policies
      description: >-
        Publishes the policy with the specified (internal) policy ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      security:
        - bearerAuth: []
      summary: >-
        Publishes the policy with the specified (internal) policy ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      requestBody:
        description: Object that contains policy version.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policyVersion:
                  type: string
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/dry-run:
    put:
      tags:
        - policies
      description: >-
        Run policy without making any persistent changes or executing
        transaction. Only users with the Standard Registry role are allowed to
        make the request.
      security:
        - bearerAuth: []
      summary: Dry Run policy.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishPolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/discontinue:
    put:
      operationId: PolicyApi_discontinuePolicy
      summary: Discontunue policy.
      description: >-
        Discontunue policy. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy identifier.
          schema: {}
      requestBody:
        required: true
        description: Discontinue details.
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: date
      responses:
        '200':
          description: Policies.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/draft:
    put:
      tags:
        - policies
      description: >-
        Return policy to editing. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Return policy to editing.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishPolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/validate:
    post:
      tags:
        - policies
      description: >-
        Validates selected policy. Only users with the Standard Registry role
        are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Validates policy.
      requestBody:
        description: Object that contains policy configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyConfig'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatePolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/navigation:
    get:
      operationId: PolicyApi_getPolicyNavigation
      summary: Returns a policy navigation.
      description: Returns a policy navigation.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/groups:
    get:
      tags:
        - policies
      description: Returns a list of groups the user is a member of.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      summary: Returns a list of groups the user is a member of.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    uuid:
                      type: string
                    role:
                      type: string
                    groupLabel:
                      type: string
                    groupName:
                      type: string
                    active:
                      type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - policies
      description: >-
        Makes the selected group active. if UUID is not set then returns the
        user to the default state.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      summary: Makes the selected group active.
      requestBody:
        description: Selected group.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/documents:
    get:
      operationId: PolicyApi_getPolicyDocuments
      summary: Get policy documents.
      description: >-
        Get policy documents. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: pageSize
          required: true
          in: query
          description: Page size.
          schema:
            type: number
        - name: pageIndex
          required: true
          in: query
          description: Page index.
          schema:
            type: number
        - name: type
          required: true
          in: query
          description: Document type.
          schema:
            enum:
              - VC
              - VP
            type: string
        - name: includeDocument
          required: true
          in: query
          description: Include document field.
          schema:
            type: boolean
        - name: policyId
          required: true
          in: path
          description: Policy identifier.
          schema: {}
      responses:
        '200':
          description: Documents.
          headers:
            X-Total-Count:
              description: Total documents count.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/data:
    get:
      operationId: PolicyApi_downloadPolicyData
      summary: Get policy data.
      description: >-
        Get policy data. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy identifier.
          schema: {}
      responses:
        '200':
          description: Policy data.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/data:
    post:
      operationId: PolicyApi_uploadPolicyData
      summary: Upload policy data.
      description: >-
        Upload policy data. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Policy data file
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Uploaded policy.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/tag-block-map:
    get:
      operationId: PolicyApi_getTagBlockMap
      summary: Get policy tag block map.
      description: >-
        Get policy tag block map. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy identifier.
          schema: {}
      responses:
        '200':
          description: Policy tag block map.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/virtual-keys:
    get:
      operationId: PolicyApi_downloadVirtualKeys
      summary: Get policy virtual keys.
      description: >-
        Get policy virtual keys. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy identifier.
          schema: {}
      responses:
        '200':
          description: Policy virtual keys.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
    post:
      operationId: PolicyApi_uploadVirtualKeys
      summary: Upload policy virtual keys.
      description: >-
        Upload policy virtual keys. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy identifier.
          schema: {}
      requestBody:
        required: true
        description: Virtual keys file
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Operation completed.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/blocks:
    get:
      tags:
        - policies
      description: >-
        Returns data from the root policy block. Only users with the Standard
        Registry and Installer role are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      summary: Retrieves data for the policy root block.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBlock'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/blocks/{uuid}:
    get:
      tags:
        - policies
      description: >-
        Requests block data. Only users with a role that described in block are
        allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected block UUID.
      summary: Requests block data.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBlockData'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - policies
      description: Sends data to the specified block.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: Selected block UUID.
      summary: Sends data to the specified block.
      requestBody:
        description: Object with the data to be sent to the block.
        required: true
        content:
          application/json:
            schema:
              type: object
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/tag/{tagName}/blocks:
    post:
      operationId: PolicyApi_setBlocksByTagName
      summary: Sends data to the specified block.
      description: Sends data to the specified block.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
    get:
      operationId: PolicyApi_getBlocksByTagName
      summary: Requests block data.
      description: >-
        Requests block data by tag. Only users with a role that described in
        block are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/tag/{tagName}:
    get:
      operationId: PolicyApi_getBlockByTagName
      summary: Requests block data.
      description: >-
        Requests block data by tag. Only users with a role that described in
        block are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearerAuth: []
  /policies/{policyId}/blocks/{uuid}/parents:
    get:
      operationId: PolicyApi_getBlockParents
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_7
  /policies/{policyId}/export/file:
    get:
      tags:
        - policies
      description: >-
        Returns a zip file containing the published policy and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      security:
        - bearerAuth: []
      summary: >-
        Return policy and its artifacts in a zip file format for the specified
        policy.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportPolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/export/message:
    get:
      tags:
        - policies
      description: >-
        Returns the Hedera message ID for the specified policy published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
      security:
        - bearerAuth: []
      summary: Return Heder message ID for the specified published policy.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportPolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/export/xlsx:
    get:
      operationId: PolicyApi_getPolicyExportXlsx
      summary: >-
        Return policy and its artifacts in a xlsx file format for the specified
        policy.
      description: >-
        Returns a xlsx file containing the published policy and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearer: []
  /policies/import/message:
    post:
      tags:
        - policies
      description: >-
        Imports new policy and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - in: query
          name: versionOfTopicId
          schema:
            type: string
          description: The topic ID of policy version.
          examples:
            pageIndex:
              summary: Example of a topic ID of policy version.
              value: 0.0.00000001
      security:
        - bearerAuth: []
      summary: Imports new policy from IPFS.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the Policy.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/push/import/message:
    post:
      tags:
        - policies
      description: >-
        Imports new policy and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      security:
        - bearerAuth: []
      summary: >-
        Imports new policy and all associated artifacts from IPFS into the local
        DB.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the Policy.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/import/message/preview:
    post:
      tags:
        - policies
      description: >-
        Previews the policy from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      summary: Policy preview from IPFS.
      security:
        - bearerAuth: []
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the policy.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewPolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/push/import/message/preview:
    post:
      tags:
        - policies
      description: >-
        Previews the policy from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Previews the policy from IPFS without loading it into the local DB.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the policy.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/import/file:
    post:
      tags:
        - policies
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - in: query
          name: versionOfTopicId
          schema:
            type: string
          description: The topic ID of policy version.
          examples:
            pageIndex:
              summary: Example of a topic ID of policy version.
              value: 0.0.00000001
      security:
        - bearerAuth: []
      summary: Imports new policy from a zip file.
      requestBody:
        description: >-
          A zip file that contains the policy and associated schemas and VCs to
          be imported.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/import/file-metadata:
    post:
      operationId: PolicyApi_importPolicyFromFileWithMetadata
      summary: Imports new policy from a zip file with metadata.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: Topic Id
          schema:
            type: string
      requestBody:
        required: true
        description: Form data with policy file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                policyFile:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearer: []
  /policies/push/import/file:
    post:
      tags:
        - policies
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB.
      requestBody:
        description: >-
          A zip file that contains the policy and associated schemas and VCs to
          be imported.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/push/import/file-metadata:
    post:
      operationId: PolicyApi_importPolicyFromFileWithMetadataAsync
      summary: Imports new policy from a zip file with metadata.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: Topic Id
          schema:
            type: string
      requestBody:
        required: true
        description: Form data with policy file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                policyFile:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearer: []
  /policies/import/file/preview:
    post:
      tags:
        - policies
      description: >-
        Previews the policy from a zip file without loading it into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      summary: Policy preview from a zip file.
      security:
        - bearerAuth: []
      requestBody:
        description: >-
          A zip file that contains the policy and associated schemas and VCs to
          be viewed.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewPolicy'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/import/xlsx:
    post:
      operationId: PolicyApi_importPolicyFromXlsx
      summary: Imports new policy from a xlsx file.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided xlsx file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: query
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearer: []
  /policies/push/import/xlsx:
    post:
      operationId: PolicyApi_importPolicyFromXlsxAsync
      summary: Imports new policy from a xlsx file.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided xlsx file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: query
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearer: []
  /policies/import/xlsx/preview:
    post:
      operationId: PolicyApi_importPolicyFromXlsxPreview
      summary: Policy preview from a xlsx file.
      description: >-
        Previews the policy from a xlsx file without loading it into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
      security:
        - bearerAuth: []
        - bearer: []
  /policies/blocks/about:
    get:
      operationId: PolicyApi_getBlockAbout
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_7
  /policies/{policyId}/dry-run/users:
    get:
      tags:
        - policies
      description: >-
        Returns all virtual users. Only users with the Standard Registry role
        are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Returns all virtual users.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    did:
                      type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/dry-run/user:
    post:
      tags:
        - policies
      description: >-
        Create a new virtual account. Only users with the Standard Registry role
        are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Create a new virtual account.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    did:
                      type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/dry-run/login:
    post:
      tags:
        - policies
      description: >-
        Logs virtual user into the system. Only users with the Standard Registry
        role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Logs virtual user into the system.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      requestBody:
        description: Virtual user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                did:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    did:
                      type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/dry-run/restart:
    post:
      tags:
        - policies
      description: >-
        Restarts the execution of the policy. Clear data in database. Only users
        with the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Restarts the execution of the policy.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/dry-run/transactions:
    get:
      tags:
        - policies
      description: >-
        Returns lists of virtual transactions. Only users with the Standard
        Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Returns lists of virtual transactions.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    createDate:
                      type: string
                    type:
                      type: string
                    hederaAccountId:
                      type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/dry-run/artifacts:
    get:
      tags:
        - policies
      description: >-
        Returns lists of virtual artifacts. Only users with the Standard
        Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Returns lists of virtual artifacts.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    createDate:
                      type: string
                    type:
                      type: string
                    owner:
                      type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/dry-run/ipfs:
    get:
      tags:
        - policies
      description: >-
        Returns lists of virtual artifacts. Only users with the Standard
        Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Returns lists of virtual artifacts.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    createDate:
                      type: string
                    documentURL:
                      type: string
                    document:
                      type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/multiple:
    post:
      tags:
        - policies
      description: >-
        Creates a link between the current policy and the main policy. Or
        creates a group making the current policy the main one.
      security:
        - bearerAuth: []
      summary: Creates Multi policy config.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      requestBody:
        description: Multi policy config.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mainPolicyTopicId
                - synchronizationTopicId
              properties:
                mainPolicyTopicId:
                  type: string
                synchronizationTopicId:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiPolicyConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - policies
      description: Requests Multi policy config.
      security:
        - bearerAuth: []
      summary: Requests Multi policy config.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiPolicyConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/methodologies/categories:
    get:
      operationId: PolicyApi_getPolicyCategoriesAsync
      summary: Get all categories
      description: Get all categories
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyCategoryDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
  /policies/methodologies/search:
    post:
      operationId: PolicyApi_getPoliciesByCategory
      summary: Get filtered policies
      description: Get policies by categories and text
      parameters: []
      requestBody:
        required: true
        description: Filters
        content:
          application/json:
            schema:
              type: string
            examples:
              Filter1:
                value:
                  categoryIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
                  text: abc
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
  /schema/{schemaId}:
    get:
      tags:
        - schema
      description: Returns schema by schema ID.
      security:
        - bearerAuth: []
      summary: Returns schema by schema ID.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schema/{schemaId}/parents:
    get:
      operationId: SingleSchemaApi_getSchemaParents
      summary: Returns all parent schemas.
      description: Returns all parent schemas.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema identifier
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_8
        - schema
      security:
        - bearerAuth: []
  /schema/{schemaId}/tree:
    get:
      operationId: SingleSchemaApi_getSchemaTree
      summary: Returns schema tree.
      description: Returns schema tree.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema identifier
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
                  children:
                    type: array
                    items:
                      type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearerAuth: []
  /schemas:
    get:
      tags:
        - schemas
      description: Returns all schemas.
      security:
        - bearerAuth: []
      summary: Returns all schemas.
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{topicId}:
    post:
      tags:
        - schemas
      description: >-
        Creates new schema. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - in: path
          name: topicId
          schema:
            type: string
          required: true
          description: Topic ID.
          examples:
            topicId:
              summary: Example of a Topic ID
              value: 0.0.00000001
      security:
        - bearerAuth: []
      summary: Create new schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        '201':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - schemas
      description: Returns all schemas by topicId.
      security:
        - bearerAuth: []
      summary: Returns all schemas by topicId.
      parameters:
        - in: path
          name: topicId
          schema:
            type: string
          required: true
          description: Topic ID.
          examples:
            topicId:
              summary: Example of a Topic ID
              value: 0.0.00000001
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/type/{schemaType}:
    get:
      operationId: SchemaApi_getSchemaByType
      summary: Finds the schema using the json document type.
      description: Finds the schema using the json document type.
      parameters:
        - name: schemaType
          required: true
          in: path
          description: Type
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_9
        - schemas
      security:
        - bearerAuth: []
  /schemas/list/all:
    get:
      operationId: SchemaApi_getAll
      summary: Returns a list of schemas.
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearerAuth: []
  /schemas/list/sub:
    get:
      operationId: SchemaApi_getSub
      summary: Returns a list of schemas.
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: category
          required: false
          in: query
          description: Schema category
          schema:
            type: string
        - name: topicId
          required: false
          in: query
          description: Topic Id
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearerAuth: []
  /schemas/push/copy:
    post:
      operationId: SchemaApi_copySchemaAsync
      summary: Copy schema.
      description: >-
        Copy schema. Only users with the Standard Registry role are allowed to
        make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
        - bearerAuth: []
  /schemas/push/{topicId}:
    post:
      tags:
        - schemas
      description: >-
        Creates new schema. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Create new schema.
      parameters:
        - in: path
          name: topicId
          schema:
            type: string
          required: true
          description: Topic ID.
          examples:
            topicId:
              summary: Example of a Topic ID
              value: 0.0.00000001
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{schemaId}:
    put:
      tags:
        - schemas
      description: >-
        Updates the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Updates the schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - schemas
      description: >-
        Deletes the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Deletes the schema.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{schemaId}/publish:
    put:
      tags:
        - schemas
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Publishes the schema.
      requestBody:
        description: Object that contains policy version.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/push/{schemaId}/publish:
    put:
      tags:
        - schemas
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      security:
        - bearerAuth: []
      summary: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      requestBody:
        description: Object that contains policy version.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/import/message/preview:
    post:
      tags:
        - schemas
      description: >-
        Previews the schema from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Schema preview from IPFS.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the schema.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/push/import/message/preview:
    post:
      tags:
        - schemas
      description: >-
        Previews the schema from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Schema preview from IPFS.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the schema.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/import/file/preview:
    post:
      tags:
        - schemas
      description: >-
        Previews the schema from a zip file. Only users with the Standard
        Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Schema preview from a zip file.
      requestBody:
        description: A zip file containing the schema to be viewed.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{topicId}/import/message:
    post:
      tags:
        - schemas
      description: >-
        Imports new schema from IPFS into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: topicId
          schema:
            type: string
          required: true
          description: Topic ID.
          examples:
            topicId:
              summary: Example of a Topic ID
              value: 0.0.00000001
      security:
        - bearerAuth: []
      summary: Imports new schema from IPFS.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the schema.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/push/{topicId}/import/message:
    post:
      tags:
        - schemas
      description: >-
        Imports new schema from IPFS into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Imports new schema from IPFS.
      requestBody:
        description: >-
          Object that contains the identifier of the Hedera message which
          contains the IPFS CID of the schema.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
      parameters:
        - in: path
          name: topicId
          schema:
            type: string
          required: true
          description: Topic ID.
          examples:
            topicId:
              summary: Example of a Topic ID
              value: 0.0.00000001
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{topicId}/import/file:
    post:
      tags:
        - schemas
      description: >-
        Imports new schema from a zip file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: topicId
          schema:
            type: string
          required: true
          description: Topic ID.
          examples:
            topicId:
              summary: Example of a Topic ID
              value: 0.0.00000001
      security:
        - bearerAuth: []
      summary: Imports new schema from a zip file.
      requestBody:
        description: A zip file containing schema to be imported.
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/push/{topicId}/import/file:
    post:
      tags:
        - schemas
      description: >-
        Imports new schema from a zip file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Imports new schema from a zip file.
      requestBody:
        description: A zip file containing schema to be imported.
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      parameters:
        - in: path
          name: topicId
          schema:
            type: string
          required: true
          description: Topic ID.
          examples:
            topicId:
              summary: Example of a Topic ID
              value: 0.0.00000001
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{schemaId}/export/message:
    post:
      tags:
        - schemas
      description: >-
        Returns Hedera message IDs of the published schemas, these messages
        contain IPFS CIDs of these schema files. Only users with the Standard
        Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: List Hedera message IDs of published schemas.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Selected schema ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportSchema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{schemaId}/export/file:
    post:
      tags:
        - schemas
      description: >-
        Returns schema files for the schemas. Only users with the Standard
        Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Return zip file with schemas.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Selected schema ID.
      responses:
        '200':
          description: Successful operation. Response zip file
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/system/{username}:
    post:
      tags:
        - schemas
      description: >-
        Creates new system schema. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
        - bearerAuth: []
      summary: Creates new system schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        '201':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - schemas
      description: >-
        Returns all system schemas by username. Only users with the Standard
        Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Returns all system schemas by username.
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set.
          examples:
            pageIndex:
              summary: Example of a pageIndex.
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The number of items to return.
          examples:
            pageSize:
              summary: Example of a pageSize.
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total number of items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/system/{schemaId}:
    put:
      tags:
        - schemas
      description: >-
        Updates the system schema with the provided schema ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Updates the schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - schemas
      description: >-
        Deletes the system schema with the provided schema ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Deletes the schema.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/system/{schemaId}/active:
    put:
      tags:
        - schemas
      description: >-
        Makes the selected scheme active. Other schemes of the same type become
        inactive. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Publishes the schema.
      requestBody:
        description: Object that contains policy version.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/system/entity/{schemaEntity}:
    get:
      tags:
        - schemas
      description: Finds the schema using the schema type.
      parameters:
        - in: path
          name: schemaEntity
          schema:
            type: string
            enum:
              - STANDARD_REGISTRY
              - USER
              - POLICY
              - MINT_TOKEN
              - WIPE_TOKEN
              - MINT_NFTOKEN
          required: true
          description: schema type.
      security:
        - bearerAuth: []
      summary: Returns schema by schema type.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schemas/{schemaId}/export/xlsx:
    get:
      operationId: SchemaApi_getPolicyExportXlsx
      summary: Return schemas in a xlsx file format for the specified policy.
      description: >-
        Returns a xlsx file containing schemas. Only users with the Standard
        Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearerAuth: []
        - bearer: []
  /schemas/{topicId}/import/xlsx:
    post:
      operationId: SchemaApi_importPolicyFromXlsx
      summary: Imports new schema from a xlsx file into the local DB.
      description: >-
        Imports new schema from a xlsx file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearerAuth: []
        - bearer: []
  /schemas/push/{topicId}/import/xlsx:
    post:
      operationId: SchemaApi_importPolicyFromXlsxAsync
      summary: Imports new schema from a xlsx file into the local DB.
      description: >-
        Imports new schema from a xlsx file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearerAuth: []
        - bearer: []
  /schemas/import/xlsx/preview:
    post:
      operationId: SchemaApi_importPolicyFromXlsxPreview
      summary: Previews the schema from a xlsx file.
      description: >-
        Previews the schema from a xlsx file. Only users with the Standard
        Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearerAuth: []
        - bearer: []
  /schemas/export/template:
    get:
      operationId: SchemaApi_exportTemplate
      summary: Returns a list of schemas.
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearerAuth: []
        - bearer: []
  /settings:
    get:
      tags:
        - settings
      description: >-
        Returns current settings. For users with the Standard Registry role
        only.
      security:
        - bearerAuth: []
      summary: Returns current settings.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSettings'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - settings
      description: Set settings. For users with the Standard Registry role only.
      security:
        - bearerAuth: []
      summary: Set settings.
      responses:
        '201':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSettings'
  /settings/environment:
    get:
      tags:
        - settings
      description: Returns current environment name.
      security:
        - bearerAuth: []
      summary: Returns current environment name.
      responses:
        '200':
          description: Successful operation.
          content:
            text/plain:
              schema:
                type: string
                example: testnet
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /settings/about:
    get:
      operationId: SettingsApi_getAbout
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - settings
  /tags:
    post:
      operationId: TagsApi_setTags
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - tags
  /tags/search:
    post:
      tags:
        - tags
      description: Search tags.
      security:
        - bearerAuth: []
      requestBody:
        description: Object that contains filters.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - entity
                    - target
                  properties:
                    entity:
                      type: string
                      enum:
                        - Schema
                        - Policy
                        - Token
                        - Module
                        - Contract
                        - PolicyDocument
                    target:
                      type: string
                - type: object
                  required:
                    - entity
                    - targets
                  properties:
                    entity:
                      type: string
                      enum:
                        - Schema
                        - Policy
                        - Token
                        - Module
                        - Contract
                        - PolicyDocument
                    targets:
                      type: array
                      items:
                        type: string
            examples:
              Single:
                value:
                  entity: PolicyDocument
                  target: targetId1
              Multiple:
                value:
                  entity: PolicyDocument
                  targets:
                    - targetId1
                    - targetId2
      summary: Search tags.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                description: a (targetId, Tags) map. `targetId1` is an example key
                properties:
                  targetId1:
                    $ref: '#/components/schemas/TagMap'
                additionalProperties:
                  $ref: '#/components/schemas/TagMap'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/{uuid}:
    delete:
      tags:
        - tags
      description: Delete tag.
      security:
        - bearerAuth: []
      summary: Delete tag.
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
          required: true
          description: Tag identifier
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/synchronization:
    post:
      tags:
        - tags
      description: synchronization.
      security:
        - bearerAuth: []
      requestBody:
        description: Object that contains filters.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entity
                - target
              properties:
                entity:
                  type: string
                  enum:
                    - Schema
                    - Policy
                    - Token
                    - Module
                    - Contract
                    - PolicyDocument
                  example: PolicyDocument
                target:
                  type: string
                  example: targetId
      summary: synchronization.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMap'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/schemas:
    get:
      tags:
        - tags
      description: Returns all schema.
      security:
        - bearerAuth: []
      summary: Returns all schemas.
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - tags
      description: >-
        Creates new schema. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Creates new schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/schemas/{schemaId}:
    delete:
      tags:
        - tags
      description: >-
        Deletes the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Delete the schema.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - tags
      description: >-
        Updates the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Updates the schema.
      requestBody:
        description: Object that contains a valid schema.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/schemas/{schemaId}/publish:
    put:
      tags:
        - tags
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: Schema ID.
      security:
        - bearerAuth: []
      summary: Publishes the schema.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/schemas/published:
    get:
      tags:
        - tags
      description: Return a list of all published schemas.
      security:
        - bearerAuth: []
      summary: Return a list of all published schemas.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{taskId}:
    get:
      tags:
        - tasks
      description: Returns task statuses by Id.
      security:
        - bearerAuth: []
      summary: Returns task statuses.
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: Task ID.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens:
    get:
      tags:
        - tokens
      description: >-
        Returns all tokens. For the Standard Registry role it returns only the
        list of tokens, for other users it also returns token balances as well
        as the KYC, Freeze, and Association statuses. Not allowed for the
        Auditor role.
      security:
        - bearerAuth: []
      summary: Return a list of tokens.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/TokenInfo'
                    - type: object
                      properties:
                        policies:
                          type: array
                          items:
                            type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - tokens
      description: >-
        Creates a new token. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Creates a new token.
      requestBody:
        description: Object that contains token information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/TokenInfo'
                    - type: object
                      properties:
                        policies:
                          type: array
                          items:
                            type: string
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push:
    post:
      tags:
        - tokens
      description: >-
        Creates a new token. Only users with the Standard Registry role are
        allowed to make the request.
      security:
        - bearerAuth: []
      summary: Creates a new token.
      requestBody:
        description: Object that contains token information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push/{tokenId}:
    delete:
      operationId: TokensApi_deleteTokenAsync
      parameters: []
      responses:
        '202':
          description: ''
      tags: &ref_10
        - tokens
  /tokens/{tokenId}/associate:
    put:
      tags:
        - tokens
      description: >-
        Associates the user with the provided Hedera token. Only users with the
        Installer role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
      security:
        - bearerAuth: []
      summary: Associates the user with the provided Hedera token.
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push/{tokenId}/associate:
    put:
      tags:
        - tokens
      description: >-
        Associates the user with the provided Hedera token. Only users with the
        Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Associates the user with the provided Hedera token.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/{tokenId}/dissociate:
    put:
      tags:
        - tokens
      description: >-
        Disassociates the user with the provided Hedera token. Only users with
        the Installer role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
      security:
        - bearerAuth: []
      summary: Associate the user with the provided Hedera token.
      responses:
        '202':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push/{tokenId}/dissociate:
    put:
      tags:
        - tokens
      description: >-
        Disassociates the user with the provided Hedera token. Only users with
        the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Disassociates the user with the provided Hedera token.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/{tokenId}/{username}/grant-kyc:
    put:
      tags:
        - tokens
      description: >-
        Sets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
        - bearerAuth: []
      summary: Sets the KYC flag for the user.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push/{tokenId}/{username}/grant-kyc:
    put:
      tags:
        - tokens
      description: >-
        Sets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Sets the KYC flag for the user.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/{tokenId}/{username}/revoke-kyc:
    put:
      tags:
        - tokens
      description: >-
        Unsets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
        - bearerAuth: []
      summary: Unsets the KYC flag for the user.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push/{tokenId}/{username}/revoke-kyc:
    put:
      tags:
        - tokens
      description: >-
        Unsets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Unsets the KYC flag for the user.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/{tokenId}/{username}/freeze:
    put:
      tags:
        - tokens
      description: >-
        Freezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
        - bearerAuth: []
      summary: Freeze transfers of the specified token for the user.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/{tokenId}/{username}/unfreeze:
    put:
      tags:
        - tokens
      description: >-
        Unfreezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      security:
        - bearerAuth: []
      summary: Unfreezes transfers of the specified token for the user.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push/{tokenId}/{username}/freeze:
    put:
      tags:
        - tokens
      description: >-
        Freezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Freeze transfers of the specified token for the user.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/push/{tokenId}/{username}/unfreeze:
    put:
      tags:
        - tokens
      description: >-
        Unfreezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Unfreezes transfers of the specified token for the user.
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      responses:
        '202':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/{tokenId}/{username}/info:
    get:
      tags:
        - tokens
      description: >-
        Returns user information for the selected token. Only users with the
        Standard Registry role are allowed to make the request.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tokenId
          schema:
            type: string
          required: true
          description: Token ID.
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens/{tokenId}/serials:
    get:
      operationId: TokensApi_getTokenSerials
      summary: Return token serials.
      description: Returns token serials of current user.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Token serials.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /themes:
    get:
      tags:
        - themes
      description: Returns all themes.
      security:
        - bearerAuth: []
      summary: Return a list of all themes.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - themes
      description: Creates a new theme.
      security:
        - bearerAuth: []
      summary: Creates a new theme.
      requestBody:
        description: Object that contains theme configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theme'
      responses:
        '201':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /themes/{themeId}:
    put:
      tags:
        - themes
      description: Updates theme configuration for the specified theme ID.
      summary: Updates theme configuration.
      parameters:
        - in: path
          name: themeId
          description: Selected theme ID.
          required: true
          schema:
            type: string
      requestBody:
        description: Object that contains theme configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theme'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - themes
      description: Deletes the theme with the provided theme ID.
      parameters:
        - in: path
          name: themeId
          schema:
            type: string
          required: true
          description: Theme ID.
      security:
        - bearerAuth: []
      summary: Deletes the theme.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /themes/import/file:
    post:
      tags:
        - themes
      description: Imports new theme from the provided zip file into the local DB.
      security:
        - bearerAuth: []
      summary: Imports new theme from a zip file.
      requestBody:
        description: A zip file that contains the theme to be imported.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /themes/{themeId}/export/file:
    get:
      tags:
        - themes
      description: Returns a zip file containing the theme.
      parameters:
        - in: path
          name: themeId
          schema:
            type: string
          required: true
          description: Selected theme ID.
      security:
        - bearerAuth: []
      summary: Returns a zip file containing the theme.
      responses:
        '200':
          description: Successful operation. Response zip file
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trust-chains:
    get:
      tags:
        - trustchains
      description: >-
        Requests all VP documents. Only users with the Auditor role are allowed
        to make the request.
      security:
        - bearerAuth: []
      summary: Returns a list of all VP documents.
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
        - in: query
          name: policyId
          schema:
            type: string
          description: Selected policy ID.
        - in: query
          name: policyOwner
          schema:
            type: string
          description: Selected Standard Registry (DID).
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerifiablePresentation'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trust-chains/{hash}:
    get:
      tags:
        - trustchains
      description: >-
        Builds and returns a trustchain, from the VP to the root VC document.
        Only users with the Auditor role are allowed to make the request.
      parameters:
        - in: path
          name: hash
          schema:
            type: string
          required: true
          description: Hash or ID of a VP document.
      security:
        - bearerAuth: []
      summary: Returns a trustchain for a VP document.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustChains'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /wizard/policy:
    post:
      tags:
        - wizard
      description: >-
        Creates a new policy by wizard. Only users with the Standard Registry
        role are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Creates a new policy.
      requestBody:
        description: Object that contains wizard configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfig'
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  policyId:
                    type: string
                  wizardConfig:
                    $ref: '#/components/schemas/WizardConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /wizard/push/policy:
    post:
      operationId: WizardApi_setPolicyAsync
      summary: Creates a new policy.
      description: >-
        Creates a new policy by wizard. Only users with the Standard Registry
        role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                saveState:
                  type: boolean
                wizardConfig:
                  type: object
                  required:
                    - policy
                    - roles
                    - schemas
                    - trustChain
                  properties:
                    roles:
                      type: array
                      items:
                        type: string
                    policy:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        topicDescription:
                          type: string
                        policyTag:
                          type: string
                    schemas:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          iri:
                            type: string
                          isApproveEnable:
                            type: boolean
                          isMintSchema:
                            type: boolean
                          mintOptions:
                            type: object
                            properties:
                              tokenId:
                                type: string
                              rule:
                                type: string
                          dependencySchemaIri:
                            type: string
                          relationshipsSchemaIri:
                            type: string
                          initialRolesFor:
                            type: array
                            items:
                              type: string
                          rolesConfig:
                            type: array
                            items:
                              type: object
                              properties:
                                role:
                                  type: string
                                isApprover:
                                  type: boolean
                                isCreator:
                                  type: boolean
                                gridColumns:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      field:
                                        type: string
                                      title:
                                        type: string
                    trustChain:
                      type: array
                      items:
                        type: object
                        properties:
                          role:
                            type: string
                          mintSchemaIri:
                            type: string
                          viewOnlyOwnDocuments:
                            type: boolean
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags:
        - wizard
  /wizard/{policyId}/config:
    post:
      tags:
        - wizard
      description: >-
        Get policy config by wizard. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy identifier.
      security:
        - bearerAuth: []
      summary: Get policy config.
      requestBody:
        description: Object that contains wizard configuration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfig'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  policyConfig:
                    $ref: '#/components/schemas/PolicyConfig'
                  wizardConfig:
                    $ref: '#/components/schemas/WizardConfig'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /branding:
    post:
      operationId: BrandingApi_setBranding
      parameters: []
      responses:
        '401':
          description: Unauthorized
      tags: &ref_11
        - branding
      security:
        - bearer: []
    get:
      operationId: BrandingApi_getBranding
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_11
  /suggestions:
    post:
      operationId: SuggestionsApi_policySuggestions
      summary: Get next and nested suggested block types
      description: >-
        Get next and nested suggested block types. Only users with the Standard
        Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestionsInputDTO'
      responses:
        '200':
          description: >-
            Successful operation. Suggested next and nested block types
            respectively.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsOutputDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_12
        - suggestions
      security:
        - bearer: []
        - bearerAuth: []
  /suggestions/config:
    post:
      operationId: SuggestionsApi_setPolicySuggestionsConfig
      summary: Set suggestions config
      description: >-
        Set suggestions config. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestionsConfigDTO'
      responses:
        '201':
          description: Successful operation. Response setted suggestions config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsConfigDTO'
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_12
      security:
        - bearer: []
        - bearerAuth: []
    get:
      operationId: SuggestionsApi_getPolicySuggestionsConfig
      summary: Get suggestions config
      description: >-
        Get suggestions config. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation. Response suggestions config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsConfigDTO'
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_12
      security:
        - bearer: []
        - bearerAuth: []
  /notifications:
    get:
      operationId: NotificationsApi_getAllNotifications
      summary: Get all notifications
      description: Returns all notifications.
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns notifications and count.
          headers:
            X-Total-Count:
              description: Count of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_13
        - notifications
      security:
        - bearer: []
        - bearerAuth: []
  /notifications/new:
    get:
      operationId: NotificationsApi_getNewNotifications
      summary: Get new notifications
      description: Returns new notifications.
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns new notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
        - bearerAuth: []
  /notifications/progresses:
    get:
      operationId: NotificationsApi_getProgresses
      summary: Get progresses
      description: Returns progresses.
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns progresses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgressDTO'
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
        - bearerAuth: []
  /notifications/read/all:
    post:
      operationId: NotificationsApi_readAll
      summary: Read all notifications
      description: Returns new notifications.
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
        - bearerAuth: []
  /notifications/delete/{notificationId}:
    delete:
      operationId: NotificationsApi_delete
      summary: Delete notifications up to this point
      description: Returns deleted notifications count.
      parameters:
        - name: notificationId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Returns deleted notifications count.
          content:
            application/json:
              schema:
                type: number
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
        - bearerAuth: []
  /projects/search:
    post:
      operationId: ProjectsAPI_projectSearch
      summary: Search projects
      description: Search projects by filters
      parameters: []
      requestBody:
        required: true
        description: The question of choosing a methodology
        content:
          application/json:
            schema:
              type: string
            examples:
              q:
                value: >-
                  What methodology can I use for production of electricity using
                  renewable energy technologies?
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_14
        - projects
  /projects/compare/documents:
    post:
      operationId: ProjectsAPI_compareDocuments
      summary: Compare documents.
      description: Compare documents.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000002'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000002'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareDocumentsDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_14
  /projects/properties:
    get:
      operationId: ProjectsAPI_getPolicyProperties
      summary: Get all properties
      description: Get all properties
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertiesDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_14
  /record/{policyId}/status:
    get:
      operationId: RecordApi_getRecordStatus
      summary: Get recording or running status.
      description: >-
        Get recording or running status. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordStatusDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_15
        - record
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/recording/start:
    post:
      operationId: RecordApi_startRecord
      summary: Start recording.
      description: >-
        Start recording. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/recording/stop:
    post:
      operationId: RecordApi_stopRecord
      summary: Stop recording.
      description: >-
        Stop recording. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/recording/actions:
    get:
      operationId: RecordApi_getRecordActions
      summary: Get recorded actions.
      description: >-
        Get recorded actions. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordActionDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/running/start:
    post:
      operationId: RecordApi_runRecord
      summary: Run record from a zip file.
      description: >-
        Run record from a zip file. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: A zip file containing record to be run.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/running/stop:
    post:
      operationId: RecordApi_stopRunning
      summary: Stop running.
      description: >-
        Stop running. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/running/results:
    get:
      operationId: RecordApi_getRecordResults
      summary: Get running results.
      description: >-
        Get running results. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningResultDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/running/details:
    get:
      operationId: RecordApi_getRecordDetails
      summary: Get running details.
      description: >-
        Get running details. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningDetailsDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/running/fast-forward:
    post:
      operationId: RecordApi_fastForward
      summary: Fast Forward.
      description: >-
        Fast Forward. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/running/retry:
    post:
      operationId: RecordApi_retryStep
      summary: Retry step.
      description: >-
        Retry step. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /record/{policyId}/running/skip:
    post:
      operationId: RecordApi_skipStep
      summary: Skip step.
      description: >-
        Skip step. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearerAuth: []
        - bearer: []
  /ai-suggestions/ask:
    get:
      operationId: AISuggestionsAPI_getAIAnswer
      summary: Get methodology suggestion
      description: Returns AI response to the current question
      parameters:
        - name: q
          required: true
          in: path
          description: The question of choosing a methodology
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                example: ACM0001, ACM0002, ACM0006, ACM0007, ACM0018
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_16
        - ai-suggestions
  /ai-suggestions/rebuild-vector:
    put:
      operationId: AISuggestionsAPI_rebuildVector
      summary: Rebuild AI vector
      description: Rebuilds vector based on policy data in the DB
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_16
  /schemas/type/{type}:
    get:
      tags:
        - schemas
      description: Finds the schema using the json document type.
      parameters:
        - in: path
          name: type
          schema:
            type: string
          required: true
          description: JSON type.
      security:
        - bearerAuth: []
      summary: Returns schema by type.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/tag/{tag}:
    get:
      tags:
        - policies
      description: >-
        Requests block ID from a policy by tag. Only users with the Standard
        Registry and Installer roles are allowed to make the request.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Selected policy ID.
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Tag from the selected policy.
      summary: Requests block ID from a policy by tag.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /policies/{policyId}/tag/{tag}/blocks:
    post:
      tags:
        - policies
      description: Sends data to the specified block.
      security:
        - bearerAuth: []
      summary: Sends data to the specified block.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Tag from the selected policy.
      requestBody:
        description: Object with the data to be sent to the block.
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBlockData'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - policies
      description: >-
        Requests block data by tag. Only users with a role that described in
        block are allowed to make the request.
      security:
        - bearerAuth: []
      summary: Requests block data.
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy ID.
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Tag from the selected policy.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBlockData'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ipfs/file/:
    post:
      tags:
        - ipfs
      description: Add file to ipfs.
      summary: Add file to ipfs.
      requestBody:
        description: Data array of file.
        required: true
        content:
          binary/octet-stream:
            schema:
              type: string
              format: binary
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                description: CID of added file.
                type: string
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artifacts/{policyId}:
    post:
      tags:
        - artifacts
      description: Upload artifact. For users with the Standard Registry role only.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                artifacts:
                  type: array
                  items:
                    type: string
                    format: binary
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy identifier
      summary: Upload Artifact.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artifact'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artifact:
    get:
      deprecated: true
      tags:
        - artifacts
      description: Returns all artifacts.
      security:
        - bearerAuth: []
      summary: Returns all artifacts.
      parameters:
        - in: query
          name: policyId
          schema:
            type: string
          description: Policy identifier
        - in: query
          name: pageIndex
          schema:
            type: integer
          description: >-
            The number of pages to skip before starting to collect the result
            set
          examples:
            pageIndex:
              summary: Example of a pageIndex
              value: 0
        - in: query
          name: pageSize
          schema:
            type: integer
          description: The numbers of items to return
          examples:
            pageSize:
              summary: Example of a pageSize
              value: 100
      responses:
        '200':
          description: Successful operation.
          headers:
            x-total-count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artifact'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artifact/{policyId}:
    post:
      deprecated: true
      tags:
        - artifacts
      description: Upload artifact. For users with the Standard Registry role only.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                artifacts:
                  type: array
                  items:
                    type: string
                    format: binary
      parameters:
        - in: path
          name: policyId
          schema:
            type: string
          required: true
          description: Policy identifier
      summary: Upload Artifact.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artifact'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artifact/{artifactId}:
    delete:
      deprecated: true
      tags:
        - artifacts
      description: Delete artifact.
      security:
        - bearerAuth: []
      summary: Delete artifact.
      parameters:
        - in: path
          name: artifactId
          schema:
            type: string
          required: true
          description: Artifact identifier
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/:
    post:
      tags:
        - tags
      description: Creates new tag.
      security:
        - bearerAuth: []
      summary: Creates new tag.
      requestBody:
        description: Object that contains tag information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
info:
  title: Guardian
  description: >-
    The Guardian is a modular open-source solution that includes best-in-class
    identity management and decentralized ledger technology (DLT) libraries. At
    the heart of the Guardian solution is a sophisticated Policy Workflow Engine
    (PWE) that enables applications to offer a requirements-based tokenization
    implementation.
  version: 2.24.1
  contact:
    name: API developer
    url: https://envisionblockchain.com
    email: info@envisionblockchain.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags: []
servers:
  - url: /api/v1
    description: version 1.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AccountsResponseDTO:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
        did:
          type: string
      required:
        - username
        - role
        - did
    InternalServerErrorDTO:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      required:
        - code
        - message
    RegisterUserDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        role:
          type: string
      required:
        - username
        - password
        - password_confirmation
        - role
    AccountsSessionResponseDTO:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
        accessToken:
          type: string
      required:
        - username
        - role
        - accessToken
    LoginUserDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    CredentialSubjectDTO:
      type: object
      properties:
        geography:
          type: string
        law:
          type: string
        tags:
          type: string
        ISIC:
          type: string
        '@context':
          type: array
          items:
            type: string
        id:
          type: string
        type:
          type: string
      required:
        - geography
        - law
        - tags
        - ISIC
        - '@context'
        - id
        - type
    ProofDTO:
      type: object
      properties:
        type:
          type: string
        created:
          format: date-time
          type: string
        verificationMethod:
          type: string
        proofPurpose:
          type: string
        jws:
          type: string
      required:
        - type
        - created
        - verificationMethod
        - proofPurpose
        - jws
    VcDocumentDTO:
      type: object
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        issuer:
          type: string
        issuanceDate:
          format: date-time
          type: string
        '@context':
          type: array
          items:
            type: string
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubjectDTO'
        proof:
          $ref: '#/components/schemas/ProofDTO'
      required:
        - id
        - type
        - issuer
        - issuanceDate
        - '@context'
        - credentialSubject
        - proof
    PolicyDTO:
      type: object
      properties:
        _id:
          type: string
        createDate:
          format: date-time
          type: string
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
        creator:
          type: string
        owner:
          type: string
        topicId:
          type: string
        policyTag:
          type: string
        codeVersion:
          type: string
        userRoles:
          type: array
          items:
            type: string
        userGroups:
          type: array
          items:
            type: string
        userRole:
          type: string
        userGroup:
          type: string
        id:
          type: string
      required:
        - _id
        - createDate
        - uuid
        - name
        - description
        - status
        - creator
        - owner
        - topicId
        - policyTag
        - codeVersion
        - userRoles
        - userGroups
        - userRole
        - userGroup
        - id
    AggregatedDTOItem:
      type: object
      properties:
        did:
          type: string
        hederaAccountId:
          type: string
        vcDocument:
          $ref: '#/components/schemas/VcDocumentDTO'
        policies:
          $ref: '#/components/schemas/PolicyDTO'
      required:
        - did
        - hederaAccountId
        - vcDocument
        - policies
    UserDTO:
      type: object
      properties:
        username:
          type: string
        did:
          type: string
      required:
        - username
        - did
    BalanceResponseDTO:
      type: object
      properties:
        balance:
          type: number
        unit:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'
      required:
        - balance
        - unit
        - user
    FilterSearchPoliciesDTO:
      type: object
      properties:
        policyId:
          type: string
      required:
        - policyId
    SearchPoliciesDTO:
      type: object
      properties:
        target:
          type: object
        result:
          type: object
      required:
        - target
        - result
    FilterPoliciesDTO:
      type: object
      properties:
        policyId1:
          type: string
        policyId2:
          type: string
        policyIds:
          type: string
        eventsLvl:
          type: number
        propLvl:
          type: number
        childrenLvl:
          type: number
        idLvl:
          type: number
      required:
        - policyId1
        - policyId2
        - policyIds
        - eventsLvl
        - propLvl
        - childrenLvl
        - idLvl
    ComparePoliciesDTO:
      type: object
      properties:
        blocks:
          type: object
        groups:
          type: object
        left:
          type: object
        right:
          type: object
        roles:
          type: object
        tokens:
          type: object
        topics:
          type: object
        total:
          type: object
      required:
        - blocks
        - groups
        - left
        - right
        - roles
        - tokens
        - topics
        - total
    FilterModulesDTO:
      type: object
      properties:
        moduleId1:
          type: string
        moduleId2:
          type: string
        eventsLvl:
          type: number
        propLvl:
          type: number
        childrenLvl:
          type: number
        idLvl:
          type: number
      required:
        - moduleId1
        - moduleId2
        - eventsLvl
        - propLvl
        - childrenLvl
        - idLvl
    CompareModulesDTO:
      type: object
      properties:
        blocks:
          type: object
        left:
          type: object
        right:
          type: object
        inputEvents:
          type: object
        outputEvents:
          type: object
        variables:
          type: object
        total:
          type: object
      required:
        - blocks
        - left
        - right
        - inputEvents
        - outputEvents
        - variables
        - total
    FilterSchemasDTO:
      type: object
      properties:
        schemaId1:
          type: string
        schemaId2:
          type: string
        idLvl:
          type: number
      required:
        - schemaId1
        - schemaId2
        - idLvl
    CompareSchemasDTO:
      type: object
      properties:
        fields:
          type: object
        left:
          type: object
        right:
          type: object
        total:
          type: object
      required:
        - fields
        - left
        - right
        - total
    FilterDocumentsDTO:
      type: object
      properties:
        documentId1:
          type: string
        documentId2:
          type: string
        documentIds:
          type: string
      required:
        - documentId1
        - documentId2
        - documentIds
    CompareDocumentsDTO:
      type: object
      properties:
        documents:
          type: object
        left:
          type: object
        right:
          type: object
        total:
          type: object
      required:
        - documents
        - left
        - right
        - total
    FilterToolsDTO:
      type: object
      properties:
        toolId1:
          type: string
        toolId2:
          type: string
        toolIds:
          type: string
      required:
        - toolId1
        - toolId2
        - toolIds
    CompareToolsDTO:
      type: object
      properties:
        blocks:
          type: object
        left:
          type: object
        right:
          type: object
        inputEvents:
          type: object
        outputEvents:
          type: object
        variables:
          type: object
        total:
          type: object
      required:
        - blocks
        - left
        - right
        - inputEvents
        - outputEvents
        - variables
        - total
    ArtifactDTOItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uuid:
          type: string
        extention:
          type: string
        type:
          type: string
      required:
        - id
        - name
        - uuid
        - extention
        - type
    ContractDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        description:
          type: string
        owner:
          type: string
        permissions:
          type: number
        topicId:
          type: string
        type:
          type: string
          enum:
            - WIPE
            - RETIRE
        syncRequestsDate:
          format: date-time
          type: string
        syncPoolsDate:
          format: date-time
          type: string
        lastSyncEventTimeStamp:
          type: string
        wipeContractIds:
          type: array
          items:
            type: string
      required:
        - id
        - contractId
        - description
        - owner
        - permissions
        - topicId
        - type
        - syncRequestsDate
        - syncPoolsDate
        - lastSyncEventTimeStamp
        - wipeContractIds
    WiperRequestDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        user:
          type: string
      required:
        - id
        - contractId
        - user
    RetireRequestDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        tokens:
          type: object
          properties:
            token:
              type: string
            count:
              type: number
            serials:
              type: array
              items:
                type: number
            decimals:
              type: number
            type:
              enum:
                - non-fungible
                - fungible
            tokenSymbol:
              type: string
        tokenIds:
          type: array
          items:
            type: string
        user:
          type: string
      required:
        - id
        - contractId
        - tokens
        - tokenIds
        - user
    Date:
      type: object
      properties: {}
    RetirePoolDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        tokens:
          type: object
          properties:
            token:
              type: string
            contract:
              type: string
            count:
              type: number
            decimals:
              type: number
            type:
              enum:
                - non-fungible
                - fungible
            tokenSymbol:
              type: string
        tokenIds:
          type: array
          items:
            type: string
        immediately:
          type: boolean
        enabled:
          type: boolean
      required:
        - id
        - contractId
        - tokens
        - tokenIds
        - immediately
        - enabled
    RetirePoolTokenDTO:
      type: object
      properties:
        token:
          type: string
        count:
          type: number
      required:
        - token
        - count
    RetireRequestTokenDTO:
      type: object
      properties:
        token:
          type: string
        count:
          type: number
        serials:
          type: array
          items:
            type: string
      required:
        - token
        - count
        - serials
    ProfileDTO:
      type: object
      properties:
        username:
          type: string
          nullable: false
        role:
          type: string
          nullable: false
        did:
          type: string
          nullable: true
        parent:
          type: string
          nullable: true
        hederaAccountId:
          type: string
          nullable: true
        confirmed:
          type: boolean
          nullable: true
        failed:
          type: boolean
          nullable: true
        topicId:
          type: string
          nullable: true
        parentTopicId:
          type: string
          nullable: true
        didDocument:
          type: object
          nullable: true
        vcDocument:
          type: object
          nullable: true
      required:
        - username
        - role
    SubjectDTO:
      type: object
      properties:
        '@context':
          nullable: true
          type: array
          items:
            type: string
        id:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
      required:
        - '@context'
    DidDocumentDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        context:
          nullable: true
          type: array
          items:
            type: string
        alsoKnownAs:
          nullable: true
          type: array
          items:
            type: string
        controller:
          nullable: true
          type: array
          items:
            type: string
        verificationMethod:
          nullable: true
          type: array
          items:
            type: object
        authentication:
          nullable: true
          type: array
          items:
            type: object
        assertionMethod:
          nullable: true
          type: array
          items:
            type: object
        keyAgreement:
          nullable: true
          type: array
          items:
            type: object
        capabilityInvocation:
          nullable: true
          type: array
          items:
            type: object
        capabilityDelegation:
          nullable: true
          type: array
          items:
            type: object
        service:
          nullable: true
          type: array
          items:
            type: object
      required:
        - id
        - context
        - alsoKnownAs
        - controller
        - verificationMethod
        - authentication
        - assertionMethod
        - keyAgreement
        - capabilityInvocation
        - capabilityDelegation
        - service
    DidKeyDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        key:
          type: string
          nullable: false
      required:
        - id
        - key
    CredentialsDTO:
      type: object
      properties:
        entity:
          type: string
          nullable: false
        hederaAccountId:
          type: string
          nullable: false
        hederaAccountKey:
          type: string
          nullable: false
        parent:
          type: string
          nullable: true
        vcDocument:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/SubjectDTO'
        didDocument:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/DidDocumentDTO'
        didKeys:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/DidKeyDTO'
      required:
        - entity
        - hederaAccountId
        - hederaAccountKey
    TaskDTO:
      type: object
      properties:
        taskId:
          type: string
        expectation:
          type: number
      required:
        - taskId
        - expectation
    DidDocumentStatusDTO:
      type: object
      properties:
        valid:
          type: boolean
          nullable: false
        error:
          type: string
          nullable: true
        didDocument:
          type: object
          nullable: false
      required:
        - valid
        - error
        - didDocument
    DidDocumentWithKeyDTO:
      type: object
      properties:
        document:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/DidDocumentDTO'
        keys:
          nullable: false
          type: array
          items:
            $ref: '#/components/schemas/DidKeyDTO'
      required:
        - document
        - keys
    DidKeyStatusDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        key:
          type: string
          nullable: false
        valid:
          type: boolean
          nullable: false
      required:
        - id
        - key
        - valid
    MigrationConfigPoliciesDTO:
      type: object
      properties:
        src:
          type: string
        dst:
          type: string
      required:
        - src
        - dst
    MigrationConfigDTO:
      type: object
      properties:
        policies:
          $ref: '#/components/schemas/MigrationConfigPoliciesDTO'
        vcs:
          type: array
          items:
            type: string
        vps:
          type: array
          items:
            type: string
        schemas:
          type: object
        groups:
          type: object
        roles:
          type: object
        blocks:
          type: object
        tokens:
          type: object
        migrateState:
          type: boolean
        migrateRetirePools:
          type: boolean
        editedVCs:
          type: object
        retireContractId:
          type: string
      required:
        - policies
        - vcs
        - vps
        - schemas
        - groups
        - roles
        - blocks
        - tokens
        - migrateState
        - migrateRetirePools
        - editedVCs
        - retireContractId
    PolicyCategoryDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
      required:
        - id
        - name
        - type
    SchemaDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        entity:
          type: string
        document:
          type: string
        uuid:
          type: string
        iri:
          type: string
        hash:
          type: string
        status:
          type: string
        topicId:
          type: string
        version:
          type: string
        owner:
          type: string
        messageId:
          type: string
      required:
        - id
        - name
        - description
        - entity
        - document
        - uuid
        - iri
        - hash
        - status
        - topicId
        - version
        - owner
        - messageId
    VersionSchemaDTO:
      type: object
      properties:
        version:
          type: string
      required:
        - version
    MessageSchemaDTO:
      type: object
      properties:
        messageId:
          type: string
      required:
        - messageId
    ExportSchemaDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: string
        owner:
          type: string
        messageId:
          type: string
      required:
        - id
        - name
        - description
        - version
        - owner
        - messageId
    SystemSchemaDTO:
      type: object
      properties:
        name:
          type: string
        entity:
          type: string
      required:
        - name
        - entity
    SettingsDTO:
      type: object
      properties:
        ipfsStorageApiKey:
          type: string
        operatorId:
          type: string
        operatorKey:
          type: string
      required:
        - ipfsStorageApiKey
        - operatorId
        - operatorKey
    SuggestionsInputDTO:
      type: object
      properties:
        blockType:
          type: string
        children:
          nullable: true
          type: array
          items:
            type: object
      required:
        - blockType
        - children
    SuggestionsOutputDTO:
      type: object
      properties:
        next:
          type: string
        nested:
          type: string
      required:
        - next
        - nested
    SuggestionsConfigItemDTO:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - Policy
            - Module
        index:
          type: number
      required:
        - id
        - type
        - index
    SuggestionsConfigDTO:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/SuggestionsConfigItemDTO'
      required:
        - items
    NotificationDTO:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum:
            - INFO
            - ERROR
            - WARN
            - SUCCESS
        action:
          type: string
          enum:
            - POLICY_CONFIGURATION
            - POLICY_VIEW
            - POLICIES_PAGE
            - SCHEMAS_PAGE
            - TOKENS_PAGE
            - PROFILE_PAGE
        result:
          type: object
        read:
          type: boolean
        old:
          type: boolean
      required:
        - title
        - message
        - type
        - action
        - result
        - read
        - old
    ProgressDTO:
      type: object
      properties:
        action:
          type: string
        message:
          type: string
        progress:
          type: number
        type:
          type: string
          enum:
            - INFO
            - ERROR
            - WARN
            - SUCCESS
        taskId:
          type: string
      required:
        - action
        - message
        - progress
        - type
        - taskId
    ProjectDTO:
      type: object
      properties:
        id:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        registered:
          type: string
        title:
          type: string
        companyName:
          type: string
        sectoralScope:
          type: string
      required:
        - id
        - policyId
        - policyName
        - registered
        - title
        - companyName
        - sectoralScope
    PropertiesDTO:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        value:
          type: string
      required:
        - id
        - title
        - value
    RecordStatusDTO:
      type: object
      properties:
        type:
          type: string
        policyId:
          type: string
        uuid:
          type: string
        status:
          type: string
      required:
        - type
        - policyId
        - uuid
        - status
    Object:
      type: object
      properties: {}
    RecordActionDTO:
      type: object
      properties:
        uuid:
          type: string
        policyId:
          type: string
        method:
          type: string
        action:
          type: string
        time:
          type: string
        user:
          type: string
        target:
          type: string
      required:
        - uuid
        - policyId
        - method
        - action
        - time
        - user
        - target
    ResultInfoDTO:
      type: object
      properties:
        tokens:
          type: number
        documents:
          type: number
      required:
        - tokens
        - documents
    ResultDocumentDTO:
      type: object
      properties:
        type:
          type: string
        schema:
          type: string
        rate:
          type: string
        documents:
          type: object
      required:
        - type
        - schema
        - rate
        - documents
    RunningResultDTO:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/ResultInfoDTO'
        total:
          type: number
        documents:
          $ref: '#/components/schemas/ResultDocumentDTO'
      required:
        - info
        - total
        - documents
    RunningDetailsDTO:
      type: object
      properties:
        left:
          type: object
        right:
          type: object
        total:
          type: number
        documents:
          type: object
      required:
        - left
        - right
        - total
        - documents
    RegisteredUsersDTO:
      type: object
      properties:
        username:
          type: string
        did:
          type: string
        parent:
          type: string
        role:
          type: string
        policyRoles:
          type: array
          items:
            type: string
      required:
        - username
        - did
        - parent
        - role
        - policyRoles
    ToolDTO:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        config:
          type: object
        status:
          type: string
        creator:
          type: string
        owner:
          type: string
        topicId:
          type: string
        messageId:
          type: string
        codeVersion:
          type: string
        createDate:
          type: string
      required:
        - id
        - uuid
        - name
        - description
        - config
        - status
        - creator
        - owner
        - topicId
        - messageId
        - codeVersion
        - createDate
    Credentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Account:
      type: object
      required:
        - username
        - role
      properties:
        username:
          type: string
        role:
          type: string
        did:
          type: string
    Session:
      type: object
      required:
        - username
        - role
        - accessToken
      properties:
        username:
          type: string
        role:
          type: string
        accessToken:
          type: string
    User:
      type: object
      required:
        - username
        - role
      properties:
        confirmed:
          type: string
        failed:
          type: string
        username:
          type: string
        role:
          type: string
        hederaAccountId:
          type: string
        hederaAccountKey:
          type: string
        did:
          type: string
        didDocument:
          type: object
        vcDocument:
          type: object
        parent:
          type: string
        topicId:
          type: string
    Schema:
      type: object
      required:
        - id
        - name
        - description
        - entity
        - document
      properties:
        id:
          type: string
        iri:
          type: string
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        entity:
          type: string
        hash:
          type: string
        status:
          type: string
        document:
          oneOf:
            - type: string
            - type: object
        topicId:
          type: string
        version:
          type: string
        owner:
          type: string
        messageId:
          type: string
    ImportSchema:
      type: object
      required:
        - schemes
      properties:
        schemes:
          type: array
          items:
            type: object
            required:
              - document
              - entity
              - name
              - uuid
            properties:
              document:
                type: string
              entity:
                type: string
              hash:
                type: string
              name:
                type: string
              uuid:
                type: string
    ExportSchema:
      type: object
      required:
        - ids
      properties:
        name:
          type: string
        version:
          type: string
        messageId:
          type: string
    Token:
      type: object
      required:
        - changeSupply
        - decimals
        - enableAdmin
        - enableKYC
        - enableFreeze
        - enableWipe
        - initialSupply
        - tokenName
        - tokenSymbol
        - tokenType
      properties:
        changeSupply:
          type: boolean
        decimals:
          type: string
        enableAdmin:
          type: boolean
        enableFreeze:
          type: boolean
        enableKYC:
          type: boolean
        enableWipe:
          type: boolean
        initialSupply:
          type: string
        tokenName:
          type: string
        tokenSymbol:
          type: string
        tokenType:
          type: string
    TokenInfo:
      type: object
      required:
        - id
        - tokenId
        - tokenName
        - tokenSymbol
        - tokenType
        - decimals
        - associated
        - balance
        - frozen
        - kyc
      properties:
        id:
          type: string
        tokenId:
          type: string
        tokenName:
          type: string
        tokenSymbol:
          type: string
        tokenType:
          type: string
        decimals:
          type: string
        associated:
          type: boolean
        balance:
          type: string
        frozen:
          type: boolean
        kyc:
          type: boolean
        enableAdmin:
          type: boolean
        enableKYC:
          type: boolean
        enableFreeze:
          type: boolean
        enableWipe:
          type: boolean
    PolicyConfig:
      type: object
      required:
        - name
        - version
        - description
        - topicDescription
        - config
        - topicId
        - policyTag
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        version:
          type: string
        description:
          type: string
        topicDescription:
          type: string
        config:
          type: object
        status:
          type: string
        owner:
          type: string
        policyRoles:
          type: array
          items:
            type: string
        topicId:
          type: string
        policyTag:
          type: string
        policyTopics:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              type:
                type: string
              static:
                type: boolean
    TrustChains:
      type: object
      required:
        - chain
        - userMap
      properties:
        chain:
          type: array
          items:
            type: object
            required:
              - id
              - type
              - tag
              - label
              - schema
              - owner
              - document
            properties:
              id:
                type: string
              type:
                type: string
              tag:
                type: string
              label:
                type: string
              schema:
                type: string
              owner:
                type: string
              document:
                type: object
        userMap:
          type: array
          items:
            type: object
            required:
              - did
              - username
            properties:
              did:
                type: string
              username:
                type: string
    VerifiablePresentation:
      type: object
      required:
        - hash
        - id
        - policyId
        - signature
        - status
        - tag
        - type
        - updateDate
        - createDate
        - owner
        - document
      properties:
        hash:
          type: string
        id:
          type: string
        policyId:
          type: string
        signature:
          type: string
        status:
          type: string
        tag:
          type: string
        type:
          type: string
        updateDate:
          type: string
        createDate:
          type: string
        owner:
          type: string
        document:
          type: object
    PublishPolicy:
      type: object
      required:
        - errors
        - isValid
        - policies
      properties:
        errors:
          type: array
          items:
            type: object
        isValid:
          type: boolean
        policies:
          type: array
          items:
            type: object
    ValidatePolicy:
      type: object
      required:
        - config
        - results
      properties:
        config:
          type: object
        results:
          type: object
    PolicyBlock:
      type: object
      required:
        - id
        - blockType
        - isActive
        - uiMetaData
      properties:
        id:
          type: string
        blockType:
          type: string
        isActive:
          type: boolean
        uiMetaData:
          type: object
        blocks:
          type: array
          items:
            type: object
    PolicyBlockData:
      type: object
      required:
        - id
        - isActive
        - uiMetaData
        - data
      properties:
        id:
          type: string
        blockType:
          type: string
        isActive:
          type: boolean
        uiMetaData:
          type: object
        data:
          type: object
        fields:
          type: array
          items:
            type: object
        index:
          type: number
        roles:
          type: array
          items:
            type: string
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/PolicyBlock'
    ExportPolicy:
      type: object
      required:
        - name
        - version
        - messageId
      properties:
        name:
          type: string
        version:
          type: string
        tokens:
          type: string
    PreviewPolicy:
      type: object
      required:
        - policy
        - schemas
        - tokens
      properties:
        policy:
          type: object
        schemas:
          type: array
          items:
            type: object
        tokens:
          type: array
          items:
            type: object
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
        message:
          type: string
    ExternalData:
      type: object
      required:
        - owner
        - policyTag
        - document
      properties:
        owner:
          type: string
        policyTag:
          type: string
        document:
          type: object
    HederaAccount:
      type: object
      required:
        - id
        - key
      properties:
        id:
          type: string
        key:
          type: string
    CommonSettings:
      type: object
      properties:
        operatorId:
          type: string
        operatorKey:
          type: string
        nftApiKey:
          deprecated: true
          type: string
        ipfsStorageApiKey:
          type: string
    LogFilters:
      type: object
      properties:
        type:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        attributes:
          type: array
          items:
            type: string
        message:
          type: string
        pageSize:
          type: number
        pageIndex:
          type: number
        sortDirection:
          type: string
          enum:
            - ASC
            - DESC
    Log:
      type: object
      properties:
        type:
          type: string
        datetime:
          type: string
        message:
          type: string
        attributes:
          type: array
          items:
            type: string
    Task:
      type: object
      properties:
        taskId:
          type: string
        expectation:
          type: number
    TaskStatus:
      type: object
      properties:
        date:
          type: string
        name:
          type: string
        statuses:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
        result:
          type: object
        error:
          type: object
    Artifact:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uuid:
          type: string
        extention:
          type: string
        type:
          type: string
    MultiPolicyConfig:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        owner:
          type: string
        type:
          type: string
        instanceTopicId:
          type: string
        mainPolicyTopicId:
          type: string
        synchronizationTopicId:
          type: string
        policyOwner:
          type: string
        user:
          type: string
    Contract:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        description:
          type: string
        owner:
          type: string
        isOwnerCreator:
          type: string
        status:
          type: string
    RetireRequest:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        baseTokenId:
          type: string
        owner:
          type: string
        oppositeTokenId:
          type: string
        baseTokenCount:
          type: number
        oppositeTokenCount:
          type: number
    Module:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        config:
          type: object
        status:
          type: string
        creator:
          type: string
        owner:
          type: string
        topicId:
          type: string
        messageId:
          type: string
        codeVersion:
          type: string
        createDate:
          type: string
        type:
          type: string
    PreviewModule:
      type: object
      properties:
        module:
          $ref: '#/components/schemas/Module'
    ExportModule:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        messageId:
          type: string
        owner:
          type: string
    PublishModule:
      type: object
      properties:
        errors:
          type: object
        isValid:
          type: boolean
        module:
          $ref: '#/components/schemas/Module'
    ValidateModule:
      type: object
      properties:
        module:
          $ref: '#/components/schemas/Module'
        results:
          type: object
    Tag:
      type: object
      required:
        - name
        - entity
        - localTarget
      properties:
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tag label
        description:
          type: string
          example: Description
        owner:
          type: string
          example: did
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        target:
          type: string
          example: '0000000000.000000000'
        localTarget:
          type: string
          example: db id
        status:
          type: string
          enum:
            - Draft
            - Published
            - History
          example: Published
        operation:
          type: string
          enum:
            - Create
            - Delete
          example: Create
        date:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        topicId:
          type: string
          example: 0.0.0000000
        messageId:
          type: string
          example: '0000000000.000000000'
        policyId:
          type: string
          example: db id
        uri:
          type: string
          example: document uri
        document:
          type: object
    TagMap:
      type: object
      required:
        - entity
        - target
        - refreshDate
        - tags
      properties:
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        target:
          type: string
          example: db id
        refreshDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    Theme:
      type: object
      required:
        - uuid
        - name
        - rules
      properties:
        id:
          type: string
          example: db id
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Theme name
        rules:
          type: array
          items:
            type: object
            required:
              - text
              - background
              - border
              - shape
              - borderWidth
              - filterType
              - filterValue
            properties:
              description:
                type: string
                example: description
              text:
                type: string
                pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
                example: '#000000'
              background:
                type: string
                pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
                example: '#000000'
              border:
                type: string
                pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
                example: '#000000'
              shape:
                type: string
                enum:
                  - '0'
                  - '1'
                  - '2'
                  - '3'
                  - '4'
                  - '5'
                example: '0'
              borderWidth:
                type: string
                enum:
                  - 0px
                  - 1px
                  - 2px
                  - 3px
                  - 4px
                  - 5px
                  - 6px
                  - 7px
                example: 2px
              filterType:
                type: string
                enum:
                  - type
                  - api
                  - role
                example: type
              filterValue:
                oneOf:
                  - type: string
                  - type: array
                    items:
                      type: string
                example:
                  - type
    WizardConfig:
      type: object
      required:
        - policy
        - roles
        - schemas
        - trustChain
      properties:
        roles:
          type: array
          items:
            type: string
        policy:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            topicDescription:
              type: string
            policyTag:
              type: string
        schemas:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              iri:
                type: string
              isApproveEnable:
                type: boolean
              isMintSchema:
                type: boolean
              mintOptions:
                type: object
                properties:
                  tokenId:
                    type: string
                  rule:
                    type: string
              dependencySchemaIri:
                type: string
              relationshipsSchemaIri:
                type: string
              initialRolesFor:
                type: array
                items:
                  type: string
              rolesConfig:
                type: array
                items:
                  type: object
                  properties:
                    role:
                      type: string
                    isApprover:
                      type: boolean
                    isCreator:
                      type: boolean
                    gridColumns:
                      type: array
                      items:
                        type: object
                        properties:
                          field:
                            type: string
                          title:
                            type: string
        trustChain:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
              mintSchemaIri:
                type: string
              viewOnlyOwnDocuments:
                type: boolean
