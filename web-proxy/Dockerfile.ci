# syntax=docker/dockerfile:1
# Stage 0: # Define the versions of the base images used
ARG NODE_VERSION=20.18.3-alpine
ARG NGINX_VERSION=1.27.4-alpine

FROM --platform=$BUILDPLATFORM node:${NODE_VERSION} AS base
WORKDIR /usr/local/app
# Define an argument `YARN_CACHE_FOLDER` for the Yarn cache directory
ARG YARN_CACHE_FOLDER=/root/.yarn

# Stage 1: Build interfaces module
FROM base AS interfaces
COPY --link interfaces/package.json interfaces/tsconfig*.json yarn.lock ./
# Leverage a cache mount to `YARN_CACHE_FOLDER` to speed up subsequent builds
RUN --mount=type=cache,target=${YARN_CACHE_FOLDER} \
    yarn install --immutable
COPY --link interfaces/src src/
RUN yarn pack

# Stage 2: Build frontend
FROM base AS build
ENV NODE_OPTIONS="--openssl-legacy-provider"
COPY --link --from=interfaces /usr/local/app/guardian-interfaces-*.tgz ./interfaces.tgz
COPY --link ./frontend/. ./
RUN npm install interfaces.tgz && npm run build:prod

# Stage 3: Compile headers-more module for the same NGINX_VERSION
FROM nginxinc/nginx-unprivileged:${NGINX_VERSION} AS build-mod

ARG NGINX_VERSION
USER root
WORKDIR /tmp

RUN apk add --no-cache build-base pcre-dev zlib-dev openssl-dev git wget \
  && NGINX_PLAIN=${NGINX_VERSION%%-*} \
  && wget http://nginx.org/download/nginx-${NGINX_PLAIN}.tar.gz \
  && tar xf nginx-${NGINX_PLAIN}.tar.gz \
  && git clone --depth=1 https://github.com/openresty/headers-more-nginx-module.git \
  && cd nginx-${NGINX_PLAIN} \
  && ./configure --with-compat --add-dynamic-module=../headers-more-nginx-module \
  && make modules \
  && mkdir -p /modules \
  && cp objs/ngx_http_headers_more_filter_module.so /modules/

# Stage 4: Create the final image
FROM nginxinc/nginx-unprivileged:${NGINX_VERSION} AS image

USER root

# copy module for disable headers
RUN mkdir -p /etc/nginx/modules
COPY --from=build-mod /modules/ngx_http_headers_more_filter_module.so \
                      /etc/nginx/modules/

# add load module and disable headers
RUN sed -i '1iload_module /etc/nginx/modules/ngx_http_headers_more_filter_module.so;' /etc/nginx/nginx.conf \
 && sed -i '/http {/a \
     server_tokens off;\
     more_clear_headers Server;' /etc/nginx/nginx.conf

USER nginx

# Copy config and built application from the build stage into the image
COPY --link ./web-proxy/configs/image.conf /etc/nginx/templates/default.conf.template
COPY --link --from=build /usr/local/app/dist/guardian/browser /usr/share/nginx/html

EXPOSE 80
