<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASS" elementType="Argument">
            <stringProp name="Argument.name">PASS</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OS" elementType="Argument">
            <stringProp name="Argument.name">OS</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">3002</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.domain">${OS}</stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">;</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Projects/guardian/load-tests/usersCDMDryRun.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">sr_username</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create OS SR">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register SR on open source" enabled="true">
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/accounts/register</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;${sr_username}&quot;,&#xd;
  &quot;password&quot;: &quot;${PASS}&quot;,&#xd;
  &quot;password_confirmation&quot;: &quot;${PASS}&quot;,&#xd;
  &quot;role&quot;: &quot;STANDARD_REGISTRY&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Policy workflow(Dry run with mint, CDM)">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="User creation flow">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Register and generate SR hedera creds">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by SR">
              <stringProp name="HTTPSampler.path">/accounts/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;${sr_username}&quot;,&#xd;
  &quot;password&quot;:  &quot;${PASS}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SR Refresh Token">
                <stringProp name="JSONPostProcessor.referenceNames">SRRefreshToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.refreshToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Access Token">
              <stringProp name="HTTPSampler.path">/accounts/access-token</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;refreshToken&quot;: &quot;${SRRefreshToken}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SR Access Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">SRAccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="SR auth" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${SRAccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate SR keys" enabled="true">
              <stringProp name="HTTPSampler.path">//demo/push/random-key</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SR key gen task id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">taskIdSRKeys</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.taskId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While sr key gen(without WS)" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${operationStatusSR}&quot; != &quot;DONE&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get SR key gen result" enabled="true">
                <stringProp name="HTTPSampler.path">/tasks/${taskIdSRKeys}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get status SR key gen" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">operationStatusSR</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="SR key gen result update" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">var result = vars.get(&quot;operationStatusSR&quot;)

if (result!=&quot;&quot;)
	vars.put(&apos;operationStatusSR&apos;, &apos;DONE&apos;)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Getting error while SR key gen" enabled="true">
                  <stringProp name="JSON_PATH">$..error.code</stringProp>
                  <stringProp name="EXPECTED_VALUE"></stringProp>
                  <boolProp name="JSONVALIDATION">false</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get SR keys" enabled="true">
              <stringProp name="HTTPSampler.path">/tasks/${taskIdSRKeys}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SR id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">sr_hedera_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SR key" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">sr_hedera_key</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.key</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Link SR" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="SR auth" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${SRAccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link SR profile" enabled="true">
              <stringProp name="HTTPSampler.path">/profiles/push/${sr_username}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;hederaAccountId&quot;: &quot;${sr_hedera_id}&quot;,&#xd;
  &quot;hederaAccountKey&quot;: &quot;${sr_hedera_key}&quot;,&#xd;
  &quot;secret&quot;: null,&#xd;
  &quot;vcDocument&quot;: {&#xd;
    &quot;OrganizationName&quot;: &quot;g&quot;,&#xd;
    &quot;AddressLine1&quot;: &quot;g&quot;,&#xd;
    &quot;City&quot;: &quot;g&quot;,&#xd;
    &quot;Country&quot;: &quot;g&quot;,&#xd;
    &quot;PostalCode&quot;: &quot;y&quot;,&#xd;
    &quot;Website&quot;: &quot;https://vfds.fds&quot;,&#xd;
    &quot;Email&quot;: &quot;fdsf@fds.csda&quot;,&#xd;
    &quot;Tags&quot;: &quot;fdsa&quot;,&#xd;
    &quot;ISIC&quot;: &quot;dsaf&quot;&#xd;
  },&#xd;
  &quot;didDocument&quot;: null,&#xd;
  &quot;useFireblocksSigning&quot;: false,&#xd;
  &quot;fireblocksConfig&quot;: {&#xd;
    &quot;fireBlocksVaultId&quot;: &quot;&quot;,&#xd;
    &quot;fireBlocksAssetId&quot;: &quot;&quot;,&#xd;
    &quot;fireBlocksApiKey&quot;: &quot;&quot;,&#xd;
    &quot;fireBlocksPrivateiKey&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;didKeys&quot;: []&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="SR auth" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${SRAccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Task Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">taskIdSRLink</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.taskId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While sr link(without WS)" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${messageTypeSR}&quot; != &quot;DONE&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get SR link result" enabled="true">
                <stringProp name="HTTPSampler.path">/tasks/${taskIdSRLink}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get SR link result" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">messageTypeSR</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="SR Link result update" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">var result = vars.get(&quot;messageTypeSR&quot;)

if (result!=&quot;&quot;)
	vars.put(&apos;messageTypeSR&apos;, &apos;DONE&apos;)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Getting error while SR link" enabled="true">
                  <stringProp name="JSON_PATH">$..error.code</stringProp>
                  <stringProp name="EXPECTED_VALUE"></stringProp>
                  <boolProp name="JSONVALIDATION">false</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">true</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify link" enabled="true">
              <stringProp name="HTTPSampler.path">/tasks/${taskIdSRLink}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="SR link result compare" enabled="true">
                <stringProp name="JSON_PATH">$.result</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests for Import">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">true</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="SR auth" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${SRAccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Import Policy" enabled="true">
            <stringProp name="HTTPSampler.path">/policies/push/import/message</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;messageId&quot;: &quot;1719335230.464978003&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Task Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">taskIdImportPolicy</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.taskId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While policy importing(without WS)" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${importStatusPolicy}&quot; != &quot;DONE&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get policy import result" enabled="true">
              <stringProp name="HTTPSampler.path">/tasks/${taskIdImportPolicy}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get policy import result" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">importStatusPolicy</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Policy import result update" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">var result = vars.get(&quot;importStatusPolicy&quot;)

if (result!=&quot;&quot;)
	vars.put(&apos;importStatusPolicy&apos;, &apos;DONE&apos;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Getting error" enabled="true">
                <stringProp name="JSON_PATH">$..error.code</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">true</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get policy id" enabled="true">
            <stringProp name="HTTPSampler.path">/tasks/${taskIdImportPolicy}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract policy id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">policyId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.policyId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests for DryRun" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">true</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="SR auth" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${SRAccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dry Run Policy" enabled="true">
            <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;isValid&quot;:true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests for Mint" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="SR auth" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value">Bearer ${SRAccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For PP Create" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Dry Run PP" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/user</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract users data body" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">DryRunUsersInfo</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Extract user DID" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var obj = JSON.parse(vars.get(&quot;DryRunUsersInfo&quot;))
var adminData = obj[0]
var PPData = obj[1]

vars.put(&apos;PPDID&apos;, PPData.did)
vars.put(&apos;adminDID&apos;, adminData.did)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run PP" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${PPDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose role PP" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/Choose_Roles/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;role&quot;: &quot;Project Participant&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PP profile" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/create_pp_profile/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;document&quot;: {&#xd;
    &quot;field0&quot;: &quot;PerformanceTestingPPName&quot;&#xd;
  },&#xd;
  &quot;ref&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While PP profile creating" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${title}&quot; != &quot;Waiting for approval&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get PP profile creation status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/pp_step/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get PP create status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.blocks..uiMetaData.title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For VVB Create" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Dry Run VVB" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/user</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract users data body" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">DryRunUsersInfo</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Extract VVB DID" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var obj = JSON.parse(vars.get(&quot;DryRunUsersInfo&quot;))
var VVBUser = obj[2]

vars.put(&apos;VVBDID&apos;, VVBUser.did)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run VVB" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${VVBDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Choose role VVB" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/Choose_Roles/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;role&quot;: &quot;VVB&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create application" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/create_new_vvb/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;document&quot;: {&#xd;
    &quot;field0&quot;: &quot;PerformanceTestingVVBName&quot;&#xd;
  },&#xd;
  &quot;ref&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While VVB creating" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${titleVVB}&quot; != &quot;Waiting for approval&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get VVB creation status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/wait_for_approve/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get VVB create status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">titleVVB</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.uiMetaData.title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For Approve VVB and PP" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run Administrator" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${adminDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get VVBs" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/vvb_grid_sr/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract VVB" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">VVBData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approve VVB" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/approve_documents_btn/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${VVBDataBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Doc generate for VVB approve" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var doc = JSON.parse(vars.get(&quot;VVBData&quot;))
doc.option.status = &quot;APPROVED&quot;
vars.put(&apos;VVBDataBody&apos;, JSON.stringify({
    document: doc, 
    tag: &quot;Button_0&quot;
}));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While VVB approving" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${VVBApproveStatus}&quot; != &quot;APPROVED&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get VVB approve status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/vvb_grid_sr/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get VVB approve status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">VVBApproveStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].option.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get PPs" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/pp_grid_sr/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract PP" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">PPData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approve PP" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/approve_pp_documents_btn/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${PPDataBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Doc generate for PP approve" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var doc = JSON.parse(vars.get(&quot;PPData&quot;))
doc.option.status = &quot;APPROVED&quot;
vars.put(&apos;PPDataBody&apos;, JSON.stringify({
    document: doc, 
    tag: &quot;Button_0&quot;
}));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While PP approving" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${PPApproveStatus}&quot; != &quot;APPROVED&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get PP approve status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/pp_grid_sr/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get PP approve status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">PPApproveStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].option.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For Project Create" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run PP" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${PPDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create project" enabled="true">
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/add_project_bnt/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;document&quot;: {&#xd;
    &quot;field0&quot;: {&#xd;
      &quot;field0&quot;: &quot;Green Energy LLC LFG Power Plant Project was invested by Green Energy LLC. The landfill site of the project is in Konya province of Turkey. The project constructed a pipe system to collect landfill gas through solid waste management and use it for electricity generation, which is connected to the Turkish National Grid. The proposed activity involves the collection and utilization of the LFG with an electricity component with an installed capacity of 3.082 MWe (2 x 1.541 MWe).  The expected amount of solid waste at the project site is 83,950 tonnes/year, according to the waste analysis. Estimated electricity generation and corresponding annual estimated emission reduction values are 23,115 MWh and 34,762 tCO2, respectively. The starting date of the project activity shall be considered as 20/12/2020, which is the commissioning date of the first gas engine.  Prior to the proposed project activity, the waste was left to decay within the Ereğli landfill site, and methane was emitted to the atmosphere without any control or utilization. With the proposed project, LFG generated in the involved landfill site will be captured by a newly constructed LFG collection and utilization system. All of the captured LFG will be combusted to produce electricity for export to the grid. A flare device is installed to destroy excess LFG when the LFG generation amount exceeds the utilization capacity of the LFG power generators.  The exact timing and installed power of this expansion work depend on the actual LFG generation on site and the project design as of commissioning phases:  Gas engine 1: Capacity 1.541 MWe – 20/12/2020 Gas engine 2: Capacity 1.541 MWe – will be commissioned The project activity is located within the already existing landfill site, where the waste is transported from the city and the leachate is collected and stored. The proposed project does not involve any operations on-site; it will solely install the vertical and horizontal pipes to collect the LFG efficiently and generate power from the collected LFG.&quot;,&#xd;
      &quot;field1&quot;: &quot;This is a voluntary project, but it follows the CDM rules. The approved baseline and monitoring methodology for large-scale project activities ACM0001-Version 19.0: “Flaring or use of landfill gas” is applied. Proposed project activity is categorized in the sectoral scope 1 “Energy Industry – Renewable -/Nonrenewable Sources” and 13 “Waste handling and disposal” according to the UNFCCC definition . &quot;,&#xd;
      &quot;field2&quot;: [&#xd;
        &quot;The project type is waste handling and disposal.&quot;&#xd;
      ],&#xd;
      &quot;field3&quot;: [&#xd;
        &quot;The project activity has been located within the already existing landfill site, where the waste is transported from the city and the leachate is collected and stored. The proposed project does not involve any operations on-site; it will solely install the vertical and horizontal pipes to collect the LFG efficiently and generate power from the collected LFG.  The proposed activity involves the collection and utilization of the LFG with an electricity component with an installed capacity of 3.082 MWe (2 x 1.541 MWe). The expected amount of solid waste at the project site is 83,950 tonnes/year, according to the waste analysis. Estimated electricity generation and corresponding annual estimated emission reduction values are 23,115 MWh and 34,762 tCO2, respectively.&quot;&#xd;
      ],&#xd;
      &quot;field4&quot;: &quot;Project&quot;,&#xd;
      &quot;field5&quot;: &quot;37.579518° N&quot;,&#xd;
      &quot;field6&quot;: &quot;33.830127° E&quot;,&#xd;
      &quot;field7&quot;: [&#xd;
        {&#xd;
          &quot;type&quot;: &quot;Point&quot;,&#xd;
          &quot;coordinates&quot;: [&#xd;
            33.830127,&#xd;
            37.579518&#xd;
          ]&#xd;
        }&#xd;
      ],&#xd;
      &quot;field8&quot;: &quot;The project is eligible under the scope of the VCS Program. Since the project meets the applicability conditions set out in the ACM0001 Flaring or use of landfill gas.&quot;,&#xd;
      &quot;field9&quot;: &quot;Green Energy LLC&quot;,&#xd;
      &quot;field10&quot;: &quot;Jane Doe&quot;,&#xd;
      &quot;field11&quot;: &quot;Project Director&quot;,&#xd;
      &quot;field12&quot;: &quot;Çınar Sokak No: 12, Altındağ Mahallesi, 06050 Altındağ/Ankara, Turkey&quot;,&#xd;
      &quot;field13&quot;: &quot;+90 312 555 1234&quot;,&#xd;
      &quot;field14&quot;: &quot;j.doe@greenenergy.com&quot;,&#xd;
      &quot;field15&quot;: [&#xd;
        &quot;Green Energy LLC&quot;&#xd;
      ],&#xd;
      &quot;field16&quot;: &quot;No&quot;,&#xd;
      &quot;field17&quot;: &quot;No&quot;,&#xd;
      &quot;field18&quot;: [&#xd;
        &quot;ACM0001 v19.0&quot;&#xd;
      ],&#xd;
      &quot;field19&quot;: &quot;2020-12-20&quot;,&#xd;
      &quot;field20&quot;: [&#xd;
        {&#xd;
          &quot;field0&quot;: &quot;2020-12-20&quot;,&#xd;
          &quot;field1&quot;: &quot;2027-12-19&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;field21&quot;: [&#xd;
        {&#xd;
          &quot;field0&quot;: &quot;2020-12-20&quot;,&#xd;
          &quot;field1&quot;: &quot;2027-12-19&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;field22&quot;: &quot;A monitoring plan has been developed that covers all the procedures required as per the approved methodology ACM0001. To guarantee the accuracy of the monitoring data, periodic calibration of the installed monitoring equipment is carried out according to the manufacturer&apos;s requirements. All data are registered and processed electronically. At each booster station, a server unit receives all data sent from the meters, and data in real time is saved to an internal memory at least hourly. Every day, the server creates a file with all half-hourly data saved. The server also automatically calculates at least every hour the normal flow of landfill gas captured and of the biogas produced by the digester; the gas flow is multiplied with the real gas formula, normalizing the gas flow to standard temperature and pressure. Temperature and pressure are real-time values.  The data stored at the booster station server are transferred once per month to a computer and a backup hard drive. In case of failures of the data recording system, no emission reduction will be claimed for that period. The original data from the electricity meter are taken by a distance reading carried out by the Grid Company. The electricity data can be seen on a web page of EPIAS. The monthly electricity data are transferred to the Excel sheet used for the emission reduction calculations. The project owner is responsible for the operation and monitoring of the project activities. All the monitored data will be stored within the crediting period and for at least two years after the end of the crediting period.&quot;,&#xd;
      &quot;field23&quot;: &quot;For the electricity generation component, the following laws and regulations apply; Laws and Regulations Applicable in the Electricity Market Legal Framework Concerning Electricity Generation Electricity Market Balancing and Settlement Regulation • The repealed Electricity Market Balancing And Settlement Regulation published in the Official Gazette No. 25632 dated 03/11/2004 • Regulation Concerning Electricity Demand Forecast • Communiqué Regarding Connection to and Use of Transmission and Distribution Systems in the • Electricity Market Communiqué Regarding Preparation of Retail Contract in The Electricity Market • Communiqué Concerning Principles and Procedures for Selection in the Existence of More Than One • Application for Generation of Electricity from the Same Source and on the Same Region • Communiqué Regarding Regulation of Market Management Revenue • Regulation on Principles and Procedures for Granting Guarantee of Origin • Electricity Transmission System Supply Reliability and Quality Regulation • Electricity Market Grid Regulation • Communiqué Regarding The Principles and Procedures of Financial Settlement In The Electricity Market • Electricity Market Import and Export Regulation • Communiqué Regarding Regulatory Accounting Guidelines • Electricity Market Distribution Regulation • Communiqué Regarding the Meters to be used in the Electricity Market • Electricity Market Customer Services Regulation • Electricity Market Eligible Consumer Regulation • Electricity Market License Fees • Electricity Market Tariffs Regulation • Electricity Market Licensing Regulation • Electricity Market Law&quot;,&#xd;
      &quot;field24&quot;: &quot;The project helps following sustainable development goals: 1 – Affordable and Clean Energy (SDG 7): The project promotes clean and sustainable energy be production and use. The total net electricity production of the project is 23.115 GWh/year as per generation licence. 2 – Decent Work and Economic Growth (SDG 8): The project generated employment for all. The employee has required technical training and certifications. 3 – Climate Action (SDG 13): The project contributes to SDG 13 with an amount of 34,762 tonnes of CO2e/y, which represent direct and quantifiable impact on climate security.&quot;,&#xd;
      &quot;field25&quot;: &quot;There is no further information to be shared.&quot;,&#xd;
      &quot;field27&quot;: {&#xd;
        &quot;F4&quot;: 23859,&#xd;
        &quot;F5&quot;: &quot;Unavailable&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;H32&quot;: {},&#xd;
    &quot;H37&quot;: {&#xd;
      &quot;ex_post&quot;: {&#xd;
        &quot;F5&quot;: 477.2,&#xd;
        &quot;F6&quot;: 0,&#xd;
        &quot;F7&quot;: 0,&#xd;
        &quot;F8&quot;: 0,&#xd;
        &quot;tool_06&quot;: {&#xd;
          &quot;field0&quot;: &quot;Yes&quot;,&#xd;
          &quot;field1&quot;: 0.4942,&#xd;
          &quot;field2&quot;: 0,&#xd;
          &quot;field3&quot;: 0,&#xd;
          &quot;field4&quot;: 0,&#xd;
          &quot;field5&quot;: 0,&#xd;
          &quot;field6&quot;: 0.1,&#xd;
          &quot;field7&quot;: 103.95,&#xd;
          &quot;field8&quot;: 0,&#xd;
          &quot;field9&quot;: 0,&#xd;
          &quot;field10&quot;: 0&#xd;
        }&#xd;
      },&#xd;
      &quot;H31&quot;: &quot;There is no requirement to destroy methane and there is no existing LFG capture and destruction system&quot;,&#xd;
      &quot;H45&quot;: 0,&#xd;
      &quot;H49&quot;: 0,&#xd;
      &quot;H50&quot;: 0,&#xd;
      &quot;H55&quot;: [&#xd;
        {&#xd;
          &quot;H58&quot;: &quot;Boiler or Air Heater or Glass Melting Furnace&quot;,&#xd;
          &quot;H60&quot;: 0,&#xd;
          &quot;H61&quot;: 0,&#xd;
          &quot;H62&quot;: &quot;Unavailable&quot;,&#xd;
          &quot;hge_other&quot;: {&#xd;
            &quot;F6&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      ],&#xd;
      &quot;case_1&quot;: {}&#xd;
    },&#xd;
    &quot;H73&quot;: {&#xd;
      &quot;H79&quot;: 0,&#xd;
      &quot;H81&quot;: 0,&#xd;
      &quot;H82&quot;: 0&#xd;
    },&#xd;
    &quot;H83&quot;: {},&#xd;
    &quot;tool_03&quot;: {&#xd;
      &quot;field0&quot;: [&#xd;
        {&#xd;
          &quot;field0&quot;: &quot;N/A&quot;,&#xd;
          &quot;field1&quot;: &quot;N/A&quot;,&#xd;
          &quot;field2&quot;: &quot;The CO2 emission coefficient is calculated based on the chemical composition of the fossil fuel type&quot;,&#xd;
          &quot;field6&quot;: 0,&#xd;
          &quot;field3&quot;: {&#xd;
            &quot;field0&quot;: &quot;Mass&quot;,&#xd;
            &quot;field1&quot;: 0&#xd;
          }&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;tool_05&quot;: {&#xd;
      &quot;field0&quot;: &quot;Electricity consumption from the grid&quot;,&#xd;
      &quot;field7&quot;: {&#xd;
        &quot;field0&quot;: &quot;Calculate the combined margin emission factor of the applicable electricity system, using the procedures in the latest approved version of the “Use Tool 7 to calculate the emission factor for an electricity system” (EFEL,j/k/l,y = EFgrid,CM,y)&quot;,&#xd;
        &quot;field1&quot;: {&#xd;
          &quot;field0&quot;: 168.8,&#xd;
          &quot;field1&quot;: 0.05,&#xd;
          &quot;field2&quot;: &quot;N/A&quot;,&#xd;
          &quot;field3&quot;: 0,&#xd;
          &quot;field4&quot;: 0,&#xd;
          &quot;field5&quot;: &quot;N/A&quot;,&#xd;
          &quot;field6&quot;: 0,&#xd;
          &quot;field7&quot;: 0,&#xd;
          &quot;field8&quot;: &quot;N/A&quot;&#xd;
        },&#xd;
        &quot;field2&quot;: {&#xd;
          &quot;field0&quot;: &quot;N/A&quot;,&#xd;
          &quot;field1&quot;: &quot;Annual&quot;,&#xd;
          &quot;field4&quot;: {&#xd;
            &quot;field2&quot;: 2019,&#xd;
            &quot;field3&quot;: 0,&#xd;
            &quot;field4&quot;: [&#xd;
              {&#xd;
                &quot;field0&quot;: &quot;N/A&quot;,&#xd;
                &quot;field1&quot;: &quot;2019-01-01&quot;,&#xd;
                &quot;field2&quot;: 1,&#xd;
                &quot;field3&quot;: 0&#xd;
              }&#xd;
            ]&#xd;
          },&#xd;
          &quot;field5&quot;: {&#xd;
            &quot;field0&quot;: &quot;No&quot;,&#xd;
            &quot;field1&quot;: &quot;Yes&quot;,&#xd;
            &quot;field2&quot;: &quot;All Other Projects&quot;,&#xd;
            &quot;field5&quot;: {&#xd;
              &quot;field0&quot;: &quot;Neither&quot;,&#xd;
              &quot;field3&quot;: {&#xd;
                &quot;field4&quot;: &quot;No&quot;,&#xd;
                &quot;field5&quot;: &quot;Less than or equal&quot;,&#xd;
                &quot;field6&quot;: &quot;Yes&quot;&#xd;
              }&#xd;
            }&#xd;
          },&#xd;
          &quot;field3&quot;: {&#xd;
            &quot;field0&quot;: &quot;No&quot;,&#xd;
            &quot;field2&quot;: {&#xd;
              &quot;field0&quot;: &quot;No&quot;,&#xd;
              &quot;field2&quot;: {&#xd;
                &quot;field0&quot;: &quot;No&quot;,&#xd;
                &quot;field2&quot;: {&#xd;
                  &quot;field0&quot;: &quot;No&quot;,&#xd;
                  &quot;field2&quot;: {&#xd;
                    &quot;field0&quot;: &quot;Yes&quot;,&#xd;
                    &quot;field1&quot;: {&#xd;
                      &quot;field0&quot;: &quot;Based on the net electricity generation and a CO2 emission factor of each power unit&quot;,&#xd;
                      &quot;field2&quot;: {&#xd;
                        &quot;field1&quot;: [&#xd;
                          {&#xd;
                            &quot;field0&quot;: &quot;Data available for fuel consumption and electricity generation&quot;,&#xd;
                            &quot;field1&quot;: {&#xd;
                              &quot;field2&quot;: &quot;Power Unit 1&quot;,&#xd;
                              &quot;field3&quot;: 23859,&#xd;
                              &quot;field4&quot;: &quot;2019&quot;,&#xd;
                              &quot;field5&quot;: [&#xd;
                                {&#xd;
                                  &quot;field0&quot;: &quot;Coal&quot;,&#xd;
                                  &quot;field1&quot;: 1520,&#xd;
                                  &quot;field2&quot;: 22.609,&#xd;
                                  &quot;field3&quot;: 0.7665&#xd;
                                }&#xd;
                              ]&#xd;
                            }&#xd;
                          }&#xd;
                        ]&#xd;
                      }&#xd;
                    }&#xd;
                  }&#xd;
                }&#xd;
              }&#xd;
            }&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;ref&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While project is creating" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${ProjectCreateStatus}&quot; != &quot;Waiting for Validation&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get project creation status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/project_grid_pp_2/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get project creation status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ProjectCreateStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].option.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For Project Approve" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run Administrator" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${adminDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Projects" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/project_grid_sr/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Project" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ProjectData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approve Project" enabled="true">
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/sr_validate_project_btn/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ProjectDataBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Doc generate for Project Approve" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var doc = JSON.parse(vars.get(&quot;ProjectData&quot;))
doc.option.status = &quot;Validated&quot;
vars.put(&apos;ProjectDataBody&apos;, JSON.stringify({
    document: doc, 
    tag: &quot;Button_0&quot;
}));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Project approving" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${ProjectApproveStatus}&quot; != &quot;Validated&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project approve status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/project_grid_sr/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Project Approve status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ProjectApproveStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].option.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For Report Create" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run PP" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${PPDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Project as ref" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/project_grid_pp_2/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Project Data as ref" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ProjectDataRef</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Report" enabled="true">
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/add_report_bnt/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ReportDataBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Doc generate for Request Create" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var ref = JSON.parse(vars.get(&quot;ProjectDataRef&quot;))
var doc = {
    &quot;field0&quot;: {
      &quot;field0&quot;: &quot;Green Energy LLC LFG Power Plant Project was invested by Green Energy LLC. The landfill site of the project is in Konya province of Turkey. The project constructed a pipe system to collect landfill gas through solid waste management and use it for electricity generation, which is connected to the Turkish National Grid. The proposed activity involves the collection and utilization of the LFG with an electricity component with an installed capacity of 3.082 MWe (2 x 1.541 MWe).  The expected amount of solid waste at the project site is 83,950 tonnes/year, according to the waste analysis. Estimated electricity generation and corresponding annual estimated emission reduction values are 23,115 MWh and 34,762 tCO2, respectively. The starting date of the project activity shall be considered as 20/12/2020, which is the commissioning date of the first gas engine.  Prior to the proposed project activity, the waste was left to decay within the Ereğli landfill site, and methane was emitted to the atmosphere without any control or utilization. With the proposed project, LFG generated in the involved landfill site will be captured by a newly constructed LFG collection and utilization system. All of the captured LFG will be combusted to produce electricity for export to the grid. A flare device is installed to destroy excess LFG when the LFG generation amount exceeds the utilization capacity of the LFG power generators.  The exact timing and installed power of this expansion work depend on the actual LFG generation on site and the project design as of commissioning phases:  Gas engine 1: Capacity 1.541 MWe – 20/12/2020 Gas engine 2: Capacity 1.541 MWe – will be commissioned The project activity is located within the already existing landfill site, where the waste is transported from the city and the leachate is collected and stored. The proposed project does not involve any operations on-site; it will solely install the vertical and horizontal pipes to collect the LFG efficiently and generate power from the collected LFG.&quot;,
      &quot;field1&quot;: &quot;This is a voluntary project, but it follows the CDM rules. The approved baseline and monitoring methodology for large-scale project activities ACM0001-Version 19.0: “Flaring or use of landfill gas” is applied. Proposed project activity is categorized in the sectoral scope 1 “Energy Industry – Renewable -/Nonrenewable Sources” and 13 “Waste handling and disposal” according to the UNFCCC definition . &quot;,
      &quot;field10&quot;: &quot;Jane Doe&quot;,
      &quot;field11&quot;: &quot;Project Director&quot;,
      &quot;field12&quot;: &quot;Çınar Sokak No: 12, Altındağ Mahallesi, 06050 Altındağ/Ankara, Turkey&quot;,
      &quot;field13&quot;: &quot;+90 312 555 1234&quot;,
      &quot;field14&quot;: &quot;j.doe@greenenergy.com&quot;,
      &quot;field15&quot;: [
        &quot;Green Energy LLC&quot;
      ],
      &quot;field16&quot;: &quot;No&quot;,
      &quot;field17&quot;: &quot;No&quot;,
      &quot;field18&quot;: [
        &quot;ACM0001 v19.0&quot;
      ],
      &quot;field19&quot;: &quot;2020-12-20&quot;,
      &quot;field2&quot;: [
        &quot;The project type is waste handling and disposal.&quot;
      ],
      &quot;field20&quot;: [
        {
          &quot;field0&quot;: &quot;2020-12-20&quot;,
          &quot;field1&quot;: &quot;2027-12-19&quot;
        }
      ],
      &quot;field21&quot;: [
        {
          &quot;field0&quot;: &quot;2020-12-20&quot;,
          &quot;field1&quot;: &quot;2027-12-19&quot;
        }
      ],
      &quot;field22&quot;: &quot;A monitoring plan has been developed that covers all the procedures required as per the approved methodology ACM0001. To guarantee the accuracy of the monitoring data, periodic calibration of the installed monitoring equipment is carried out according to the manufacturer&apos;s requirements. All data are registered and processed electronically. At each booster station, a server unit receives all data sent from the meters, and data in real time is saved to an internal memory at least hourly. Every day, the server creates a file with all half-hourly data saved. The server also automatically calculates at least every hour the normal flow of landfill gas captured and of the biogas produced by the digester; the gas flow is multiplied with the real gas formula, normalizing the gas flow to standard temperature and pressure. Temperature and pressure are real-time values.  The data stored at the booster station server are transferred once per month to a computer and a backup hard drive. In case of failures of the data recording system, no emission reduction will be claimed for that period. The original data from the electricity meter are taken by a distance reading carried out by the Grid Company. The electricity data can be seen on a web page of EPIAS. The monthly electricity data are transferred to the Excel sheet used for the emission reduction calculations. The project owner is responsible for the operation and monitoring of the project activities. All the monitored data will be stored within the crediting period and for at least two years after the end of the crediting period.&quot;,
      &quot;field23&quot;: &quot;For the electricity generation component, the following laws and regulations apply; Laws and Regulations Applicable in the Electricity Market Legal Framework Concerning Electricity Generation Electricity Market Balancing and Settlement Regulation • The repealed Electricity Market Balancing And Settlement Regulation published in the Official Gazette No. 25632 dated 03/11/2004 • Regulation Concerning Electricity Demand Forecast • Communiqué Regarding Connection to and Use of Transmission and Distribution Systems in the • Electricity Market Communiqué Regarding Preparation of Retail Contract in The Electricity Market • Communiqué Concerning Principles and Procedures for Selection in the Existence of More Than One • Application for Generation of Electricity from the Same Source and on the Same Region • Communiqué Regarding Regulation of Market Management Revenue • Regulation on Principles and Procedures for Granting Guarantee of Origin • Electricity Transmission System Supply Reliability and Quality Regulation • Electricity Market Grid Regulation • Communiqué Regarding The Principles and Procedures of Financial Settlement In The Electricity Market • Electricity Market Import and Export Regulation • Communiqué Regarding Regulatory Accounting Guidelines • Electricity Market Distribution Regulation • Communiqué Regarding the Meters to be used in the Electricity Market • Electricity Market Customer Services Regulation • Electricity Market Eligible Consumer Regulation • Electricity Market License Fees • Electricity Market Tariffs Regulation • Electricity Market Licensing Regulation • Electricity Market Law&quot;,
      &quot;field24&quot;: &quot;The project helps following sustainable development goals: 1 – Affordable and Clean Energy (SDG 7): The project promotes clean and sustainable energy be production and use. The total net electricity production of the project is 23.115 GWh/year as per generation licence. 2 – Decent Work and Economic Growth (SDG 8): The project generated employment for all. The employee has required technical training and certifications. 3 – Climate Action (SDG 13): The project contributes to SDG 13 with an amount of 34,762 tonnes of CO2e/y, which represent direct and quantifiable impact on climate security.&quot;,
      &quot;field25&quot;: &quot;There is no further information to be shared.&quot;,
      &quot;field27&quot;: {
        &quot;F4&quot;: 23859,
        &quot;F5&quot;: &quot;Unavailable&quot;
      },
      &quot;field3&quot;: [
        &quot;The project activity has been located within the already existing landfill site, where the waste is transported from the city and the leachate is collected and stored. The proposed project does not involve any operations on-site; it will solely install the vertical and horizontal pipes to collect the LFG efficiently and generate power from the collected LFG.  The proposed activity involves the collection and utilization of the LFG with an electricity component with an installed capacity of 3.082 MWe (2 x 1.541 MWe). The expected amount of solid waste at the project site is 83,950 tonnes/year, according to the waste analysis. Estimated electricity generation and corresponding annual estimated emission reduction values are 23,115 MWh and 34,762 tCO2, respectively.&quot;
      ],
      &quot;field4&quot;: &quot;Project&quot;,
      &quot;field5&quot;: &quot;37.579518° N&quot;,
      &quot;field6&quot;: &quot;33.830127° E&quot;,
      &quot;field7&quot;: [
        {
          &quot;coordinates&quot;: [
            33.830127,
            37.579518
          ],
          &quot;type&quot;: &quot;Point&quot;
        }
      ],
      &quot;field8&quot;: &quot;The project is eligible under the scope of the VCS Program. Since the project meets the applicability conditions set out in the ACM0001 Flaring or use of landfill gas.&quot;,
      &quot;field9&quot;: &quot;Green Energy LLC&quot;
    },
    &quot;H32&quot;: {},
    &quot;H37&quot;: {
      &quot;case_1&quot;: {},
      &quot;ex_post&quot;: {
        &quot;F5&quot;: 477.2,
        &quot;F6&quot;: 0,
        &quot;F7&quot;: 0,
        &quot;F8&quot;: 0,
        &quot;tool_06&quot;: {
          &quot;field0&quot;: &quot;Yes&quot;,
          &quot;field1&quot;: 0.4942,
          &quot;field10&quot;: 0,
          &quot;field2&quot;: 0,
          &quot;field3&quot;: 0,
          &quot;field4&quot;: 0,
          &quot;field5&quot;: 0,
          &quot;field6&quot;: 0.1,
          &quot;field7&quot;: 103.95,
          &quot;field8&quot;: 0,
          &quot;field9&quot;: 0
        }
      },
      &quot;H31&quot;: &quot;There is no requirement to destroy methane and there is no existing LFG capture and destruction system&quot;,
      &quot;H45&quot;: 0,
      &quot;H49&quot;: 0,
      &quot;H50&quot;: 0,
      &quot;H55&quot;: [
        {
          &quot;H58&quot;: &quot;Boiler or Air Heater or Glass Melting Furnace&quot;,
          &quot;H60&quot;: 0,
          &quot;H61&quot;: 0,
          &quot;H62&quot;: &quot;Unavailable&quot;,
          &quot;hge_other&quot;: {
            &quot;F6&quot;: 0
          }
        }
      ]
    },
    &quot;H73&quot;: {
      &quot;H79&quot;: 0,
      &quot;H81&quot;: 0,
      &quot;H82&quot;: 0
    },
    &quot;H83&quot;: {},
    &quot;tool_03&quot;: {
      &quot;field0&quot;: [
        {
          &quot;field0&quot;: &quot;N/A&quot;,
          &quot;field1&quot;: &quot;N/A&quot;,
          &quot;field2&quot;: &quot;The CO2 emission coefficient is calculated based on the chemical composition of the fossil fuel type&quot;,
          &quot;field3&quot;: {
            &quot;field0&quot;: &quot;Mass&quot;,
            &quot;field1&quot;: 0
          },
          &quot;field6&quot;: 0
        }
      ]
    },
    &quot;tool_05&quot;: {
      &quot;field0&quot;: &quot;Electricity consumption from the grid&quot;,
      &quot;field7&quot;: {
        &quot;field0&quot;: &quot;Calculate the combined margin emission factor of the applicable electricity system, using the procedures in the latest approved version of the “Use Tool 7 to calculate the emission factor for an electricity system” (EFEL,j/k/l,y = EFgrid,CM,y)&quot;,
        &quot;field1&quot;: {
          &quot;field0&quot;: 168.8,
          &quot;field1&quot;: 0.05,
          &quot;field2&quot;: &quot;N/A&quot;,
          &quot;field3&quot;: 0,
          &quot;field4&quot;: 0,
          &quot;field5&quot;: &quot;N/A&quot;,
          &quot;field6&quot;: 0,
          &quot;field7&quot;: 0,
          &quot;field8&quot;: &quot;N/A&quot;
        },
        &quot;field2&quot;: {
          &quot;field0&quot;: &quot;N/A&quot;,
          &quot;field1&quot;: &quot;Annual&quot;,
          &quot;field3&quot;: {
            &quot;field0&quot;: &quot;No&quot;,
            &quot;field2&quot;: {
              &quot;field0&quot;: &quot;No&quot;,
              &quot;field2&quot;: {
                &quot;field0&quot;: &quot;No&quot;,
                &quot;field2&quot;: {
                  &quot;field0&quot;: &quot;No&quot;,
                  &quot;field2&quot;: {
                    &quot;field0&quot;: &quot;Yes&quot;,
                    &quot;field1&quot;: {
                      &quot;field0&quot;: &quot;Based on the net electricity generation and a CO2 emission factor of each power unit&quot;,
                      &quot;field2&quot;: {
                        &quot;field1&quot;: [
                          {
                            &quot;field0&quot;: &quot;Data available for fuel consumption and electricity generation&quot;,
                            &quot;field1&quot;: {
                              &quot;field2&quot;: &quot;Power Unit 1&quot;,
                              &quot;field3&quot;: 23859,
                              &quot;field4&quot;: &quot;2019&quot;,
                              &quot;field5&quot;: [
                                {
                                  &quot;field0&quot;: &quot;Coal&quot;,
                                  &quot;field1&quot;: 1520,
                                  &quot;field2&quot;: 22.609,
                                  &quot;field3&quot;: 0.7665
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          &quot;field4&quot;: {
            &quot;field2&quot;: 2019,
            &quot;field3&quot;: 0,
            &quot;field4&quot;: [
              {
                &quot;field0&quot;: &quot;N/A&quot;,
                &quot;field1&quot;: &quot;2019-01-01&quot;,
                &quot;field2&quot;: 1,
                &quot;field3&quot;: 0
              }
            ]
          },
          &quot;field5&quot;: {
            &quot;field0&quot;: &quot;No&quot;,
            &quot;field1&quot;: &quot;Yes&quot;,
            &quot;field2&quot;: &quot;All Other Projects&quot;,
            &quot;field5&quot;: {
              &quot;field0&quot;: &quot;Neither&quot;,
              &quot;field3&quot;: {
                &quot;field4&quot;: &quot;No&quot;,
                &quot;field5&quot;: &quot;Less than or equal&quot;,
                &quot;field6&quot;: &quot;Yes&quot;
              }
            }
          }
        }
      }
    }
}
vars.put(&apos;ReportDataBody&apos;, JSON.stringify({
    document: doc, 
    ref: ref
}));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Request is creating" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${RequestCreateStatus}&quot; != &quot;Waiting for Verification&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Request create status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/report_grid_pp/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Request Create status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RequestCreateStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].option.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Report Data " enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/report_grid_pp/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Report Data" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ReportData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Report" enabled="true">
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/assign_vvb/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${AssignedReportDataBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Doc generate for Assign Request" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var assignRequest = JSON.parse(vars.get(&quot;ReportData&quot;))
assignRequest.assignedTo = vars.get(&quot;VVBDID&quot;)
vars.put(&apos;AssignedReportDataBody&apos;, JSON.stringify(assignRequest));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For Report Verified" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run VVB" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${VVBDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Report Data " enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/report_grid_vvb/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Report Data" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ReportVerifyData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Report" enabled="true">
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/approve_report_btn/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ReportVerifyData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Doc generate for Report Verify" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var doc = JSON.parse(vars.get(&quot;ReportVerifyData&quot;))
doc.option.status = &quot;Verified&quot;
vars.put(&apos;ReportVerifyData&apos;, JSON.stringify({
    document: doc, 
    tag: &quot;Button_0&quot;
}));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Report is verifying" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${ReportVerifyStatus}&quot; != &quot;Verified&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Report create status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/report_grid_vvb/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Report Create status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ReportVerifyStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].option.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For Report Approve" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login by Dry Run Administrator" enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/dry-run/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;did&quot;: &quot;${adminDID}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Report Data " enabled="true">
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/report_grid_sr/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Report Data" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ReportApproveData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approve Report" enabled="true">
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/sr_approve_report_btn/blocks</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ReportApproveData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Doc generate for Report Verify" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var doc = JSON.parse(vars.get(&quot;ReportApproveData&quot;))
doc.option.status = &quot;Minted&quot;
vars.put(&apos;ReportApproveData&apos;, JSON.stringify({
    document: doc, 
    tag: &quot;Button_0&quot;
}));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Report is verifying" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${ReportApproveStatus}&quot; != &quot;Minted&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Report create status" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/report_grid_sr/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Report Create status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ReportApproveStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].option.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Requests For Balance Verify" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">true</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Report is verifying" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${balance}&quot; != &quot;10639&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Balance" enabled="true">
                <stringProp name="HTTPSampler.path">/policies/${policyId}/tag/vp_grid/blocks</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Report Create status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">balance</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].amount</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">false</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Projects\guardian\load-tests\results_dry_cdm\result.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
