openapi: 3.0.0
paths:
  /accounts/session:
    get:
      operationId: AccountApi_getSession
      summary: Returns current session of the user.
      description: Returns current user session.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsSessionResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_0
        - accounts
      security:
        - bearer: []
  /accounts/register:
    post:
      operationId: AccountApi_register
      summary: Registers a new user account.
      description: Object that contain username, password and role (optional) fields.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
  /accounts/login:
    post:
      operationId: AccountApi_login
      summary: Logs user into the system.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsSessionResponseDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
  /accounts/access-token:
    post:
      operationId: AccountApi_getAccessToken
      summary: Returns access token.
      description: Returns access token.
      parameters: []
      responses:
        '200':
          description: Successful operation.
      tags: *ref_0
  /accounts:
    get:
      operationId: AccountApi_getAllAccounts
      summary: Returns a list of users, excluding Standard Registry and Auditors.
      description: >-
        Returns all users except those with roles Standard Registry and Auditor.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearer: []
  /accounts/standard-registries:
    get:
      operationId: AccountApi_getStandardRegistries
      summary: Returns all Standard Registries.
      description: Returns all Standard Registries.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearer: []
  /accounts/standard-registries/aggregated:
    get:
      operationId: AccountApi_getAggregatedStandardRegistries
      summary: Returns all Standard Registries aggregated with polices and vcDocuments.
      description: Returns all Standard Registries aggregated with polices and vcDocuments
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AggregatedDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearer: []
  /accounts/balance:
    get:
      operationId: AccountApi_getBalance
      summary: Returns user's Hedera account balance.
      description: Requests current Hedera account balance.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponseDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_0
      security:
        - bearer: []
  /analytics/search/policies:
    post:
      operationId: AnalyticsApi_searchPolicies
      summary: Search policies.
      description: >-
        Search policies. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSearchPoliciesDTO'
            examples:
              Filter:
                value:
                  policyId: '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPoliciesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_1
        - analytics
      security:
        - bearer: []
  /analytics/compare/policies:
    post:
      operationId: AnalyticsApi_comparePolicies
      summary: Compare policies.
      description: >-
        Compare policies. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPoliciesDTO'
            examples:
              Filter1:
                value:
                  policyId1: '000000000000000000000001'
                  policyId2: '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter2:
                value:
                  policyIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter3:
                value:
                  policies:
                    - type: id
                      value: '000000000000000000000001'
                    - type: message
                      value: '0000000000.000000001'
                    - type: file
                      value:
                        id: 00000000-0000-0000-0000-000000000000
                        name: File Name
                        value: base64...
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparePoliciesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/modules:
    post:
      operationId: AnalyticsApi_compareModules
      summary: Compare modules.
      description: >-
        Compare modules. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterModulesDTO'
            examples:
              Filter:
                value:
                  moduleId1: '000000000000000000000001'
                  moduleId2: '000000000000000000000001'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareModulesDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/schemas:
    post:
      operationId: AnalyticsApi_compareSchemas
      summary: Compare schemas.
      description: >-
        Compare schemas. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSchemasDTO'
            examples:
              Filter:
                value:
                  schemaId1: '000000000000000000000001'
                  schemaId2: '000000000000000000000001'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareSchemasDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/documents:
    post:
      operationId: AnalyticsApi_compareDocuments
      summary: Compare documents.
      description: >-
        Compare documents. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000001'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareDocumentsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/tools:
    post:
      operationId: AnalyticsApi_compareTools
      summary: Compare tools.
      description: >-
        Compare tools. Only users with the Standard Registry role are allowed to
        make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterToolsDTO'
            examples:
              Filter1:
                value:
                  toolId1: '000000000000000000000001'
                  toolId2: '000000000000000000000001'
              Filter2:
                value:
                  toolIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareToolsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/policies/export:
    post:
      operationId: AnalyticsApi_comparePoliciesExport
      summary: Compare policies.
      description: >-
        Compare policies. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          example: csv
          schema:
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPoliciesDTO'
            examples:
              Filter1:
                value:
                  policyId1: '000000000000000000000001'
                  policyId2: '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter2:
                value:
                  policyIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
              Filter3:
                value:
                  policies:
                    - type: id
                      value: '000000000000000000000001'
                    - type: message
                      value: '0000000000.000000001'
                    - type: file
                      value:
                        id: 00000000-0000-0000-0000-000000000000
                        name: File Name
                        value: base64...
                  eventsLvl: '0'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/modules/export:
    post:
      operationId: AnalyticsApi_compareModulesExport
      summary: Compare modules.
      description: >-
        Compare modules. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          example: csv
          schema:
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterModulesDTO'
            examples:
              Filter:
                value:
                  moduleId1: '000000000000000000000001'
                  moduleId2: '000000000000000000000001'
                  propLvl: '0'
                  childrenLvl: '0'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/schemas/export:
    post:
      operationId: AnalyticsApi_compareSchemasExport
      summary: Compare schemas.
      description: >-
        Compare schemas. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          example: csv
          schema:
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSchemasDTO'
            examples:
              Filter:
                value:
                  schemaId1: '000000000000000000000001'
                  schemaId2: '000000000000000000000001'
                  idLvl: '0'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/documents/export:
    post:
      operationId: AnalyticsApi_compareDocumentsExport
      summary: Compare documents.
      description: >-
        Compare documents. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          example: csv
          schema:
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000001'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/compare/tools/export:
    post:
      operationId: AnalyticsApi_compareToolsExport
      summary: Compare tools.
      description: >-
        Compare tools. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: type
          required: true
          in: query
          description: File type
          example: csv
          schema:
            type: string
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterToolsDTO'
            examples:
              Filter1:
                value:
                  toolId1: '000000000000000000000001'
                  toolId2: '000000000000000000000001'
              Filter2:
                value:
                  toolIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /analytics/search/blocks:
    post:
      operationId: AnalyticsApi_searchBlocks
      summary: Search same blocks.
      description: >-
        Search same blocks. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterSearchBlocksDTO'
            examples:
              Filter:
                value:
                  uuid: ''
                  config: {}
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchBlocksDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_1
      security:
        - bearer: []
  /artifacts:
    get:
      operationId: ArtifactApi_getArtifactsV2
      summary: Returns all artifacts.
      description: Returns all artifacts.
      parameters:
        - name: id
          required: false
          in: query
          description: Artifact identifier
          example: '000000000000000000000001'
          schema:
            type: string
        - name: type
          required: false
          in: query
          description: Tool|Policy
          example: policy
          schema:
            enum:
              - tool
              - policy
            type: string
        - name: policyId
          required: false
          in: query
          description: Policy identifier
          example: '000000000000000000000001'
          schema:
            type: string
        - name: toolId
          required: false
          in: query
          description: Tool identifier
          example: '000000000000000000000001'
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtifactDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_2
        - artifacts
      security:
        - bearer: []
  /artifacts/{parentId}:
    post:
      operationId: ArtifactApi_uploadArtifacts
      summary: Upload artifact.
      description: Upload artifact. For users with the Standard Registry role only.
      parameters:
        - name: parentId
          required: true
          in: path
          description: Parent ID
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Form data with artifacts.
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: object
                properties:
                  artifacts:
                    type: string
                    format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtifactDTOItem'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /artifacts/{artifactId}:
    delete:
      operationId: ArtifactApi_deleteArtifact
      summary: Delete artifact.
      description: Delete artifact.
      parameters:
        - name: artifactId
          required: true
          in: path
          description: Artifact ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_2
      security:
        - bearer: []
  /contracts:
    get:
      operationId: ContractsApi_getContracts
      summary: Return a list of all contracts.
      description: Returns all contracts.
      parameters:
        - name: type
          required: true
          in: query
          description: Contract type
          example: RETIRE
          schema:
            enum:
              - WIPE
              - RETIRE
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Contracts.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_3
        - contracts
      security:
        - bearer: []
    post:
      operationId: ContractsApi_createContract
      summary: Create contract.
      description: >-
        Create smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractConfigDTO'
      responses:
        '201':
          description: Created contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/import:
    post:
      operationId: ContractsApi_importContract
      summary: Import contract.
      description: >-
        Import smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contractId:
                  type: string
                  description: Hedera Identifier
                  example: 0.0.1
                description:
                  type: string
              required:
                - contractId
      responses:
        '200':
          description: Imported contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/{contractId}/permissions:
    get:
      operationId: ContractsApi_contractPermissions
      summary: Get contract permissions.
      description: >-
        Get smart-contract permissions. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Contract permissions.
          content:
            application/json:
              schema:
                type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/{contractId}:
    delete:
      operationId: ContractsApi_removeContract
      summary: Remove contract.
      description: >-
        Remove smart-contract. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/requests:
    get:
      operationId: ContractsApi_getWipeRequests
      summary: Return a list of all wipe requests.
      description: >-
        Returns all wipe requests. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: query
          description: Contract identifier
          example: 0.0.1
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WiperRequestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/{contractId}/requests/enable:
    post:
      operationId: ContractsApi_enableWipeRequests
      summary: Enable wipe requests.
      description: >-
        Enable wipe contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/{contractId}/requests/disable:
    post:
      operationId: ContractsApi_disableWipeRequests
      summary: Disable wipe requests.
      description: >-
        Disable wipe contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/requests/{requestId}/approve:
    post:
      operationId: ContractsApi_approveWipeRequest
      summary: Approve wipe request.
      description: >-
        Approve wipe contract request. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/requests/{requestId}/reject:
    delete:
      operationId: ContractsApi_rejectWipeRequest
      summary: Reject wipe request.
      description: >-
        Reject wipe contract request. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: ban
          required: false
          in: query
          description: Reject and ban
          example: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/{contractId}/requests:
    delete:
      operationId: ContractsApi_clearWipeRequests
      summary: Clear wipe requests.
      description: >-
        Clear wipe contract requests. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/{contractId}/admin/{hederaId}:
    post:
      operationId: ContractsApi_wipeAddAdmin
      summary: Add wipe admin.
      description: >-
        Add wipe contract admin. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_wipeRemoveAdmin
      summary: Remove wipe admin.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/{contractId}/manager/{hederaId}:
    post:
      operationId: ContractsApi_wipeAddManager
      summary: Add wipe manager.
      description: >-
        Add wipe contract manager. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_wipeRemoveManager
      summary: Remove wipe manager.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/wipe/{contractId}/wiper/{hederaId}:
    post:
      operationId: ContractsApi_wipeAddWiper
      summary: Add wipe wiper.
      description: >-
        Add wipe contract wiper. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_wipeRemoveWiper
      summary: Remove wipe wiper.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/{contractId}/pools/sync:
    post:
      operationId: ContractsApi_retireSyncPools
      summary: Sync retire pools.
      description: >-
        Sync retire contract pools. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Sync date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Date'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/requests:
    get:
      operationId: ContractsApi_getRetireRequests
      summary: Return a list of all retire requests.
      description: Returns all retire requests.
      parameters:
        - name: contractId
          required: true
          in: query
          description: Contract identifier
          example: 0.0.1
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetireRequestDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/pools:
    get:
      operationId: ContractsApi_getRetirePools
      summary: Return a list of all retire pools.
      description: Returns all retire pools.
      parameters:
        - name: contractId
          required: true
          in: query
          description: Contract identifier
          example: 0.0.1
          schema:
            type: string
        - name: tokens
          required: true
          in: query
          description: Tokens
          example: 0.0.1,0.0.2,0.0.3
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetirePoolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/{contractId}/requests:
    delete:
      operationId: ContractsApi_clearRetireRequests
      summary: Clear retire requests.
      description: >-
        Clear retire contract requests. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/{contractId}/pools:
    delete:
      operationId: ContractsApi_clearRetirePools
      summary: Clear retire pools.
      description: >-
        Clear retire contract pools. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
    post:
      operationId: ContractsApi_setRetirePool
      summary: Set retire pool.
      description: >-
        Set retire contract pool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetirePoolTokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetirePoolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/pools/{poolId}:
    delete:
      operationId: ContractsApi_unsetRetirePool
      summary: Unset retire pool.
      description: >-
        Unset retire contract pool. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: poolId
          required: true
          in: path
          description: Pool Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/requests/{requestId}:
    delete:
      operationId: ContractsApi_unsetRetireRequest
      summary: Unset retire request.
      description: >-
        Unset retire contract request. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/pools/{poolId}/retire:
    post:
      operationId: ContractsApi_retire
      summary: Retire tokens.
      description: Retire tokens.
      parameters:
        - name: poolId
          required: true
          in: path
          description: Pool Identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetireRequestTokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/requests/{requestId}/approve:
    post:
      operationId: ContractsApi_approveRetire
      summary: Approve retire request.
      description: >-
        Approve retire contract request. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/requests/{requestId}/cancel:
    delete:
      operationId: ContractsApi_cancelRetireRequest
      summary: Cancel retire request.
      description: Cancel retire contract request.
      parameters:
        - name: requestId
          required: true
          in: path
          description: Request identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire/{contractId}/admin/{hederaId}:
    post:
      operationId: ContractsApi_retireAddAdmin
      summary: Add retire admin.
      description: >-
        Add retire contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
    delete:
      operationId: ContractsApi_retireRemoveAdmin
      summary: Remove wipe admin.
      description: >-
        Remove wipe contract admin. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: contractId
          required: true
          in: path
          description: Contract identifier
          example: 652745597a7b53526de37c05
          schema:
            type: string
        - name: hederaId
          required: true
          in: path
          description: Hedera identifier
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /contracts/retire:
    get:
      operationId: ContractsApi_getRetireVCs
      summary: Return a list of all retire vcs.
      description: Returns all retire vcs.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: true
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_3
      security:
        - bearer: []
  /demo/registered-users:
    get:
      operationId: DemoApi_registeredUsers
      summary: Returns list of registered users.
      description: Returns list of registered users.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredUsersDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_4
        - demo
  /demo/random-key:
    get:
      operationId: DemoApi_randomKey
      summary: Generate demo key.
      description: Generate demo key.
      parameters: []
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_4
      security:
        - bearer: []
  /demo/push/random-key:
    get:
      operationId: DemoApi_pushRandomKey
      summary: Generate demo key.
      description: Generate demo key.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_4
      security:
        - bearer: []
  /external:
    post:
      operationId: ExternalApi_receiveExternalData
      summary: Sends data from an external source.
      description: Sends data from an external source.
      parameters: []
      requestBody:
        required: true
        description: Object that contains a VC Document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalDocumentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags:
        - external
  /ipfs/file:
    post:
      operationId: IpfsApi_postFile
      summary: Add file from ipfs.
      description: Add file from ipfs.
      parameters: []
      requestBody:
        required: true
        description: Binary data.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_5
        - ipfs
      security:
        - bearer: []
  /ipfs/file/dry-run/{policyId}:
    post:
      operationId: IpfsApi_postFileDryRun
      summary: Add file from ipfs for dry run mode.
      description: Add file from ipfs for dry run mode.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Binary data.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearer: []
  /ipfs/file/{cid}:
    get:
      operationId: IpfsApi_getFile
      summary: Get file from ipfs.
      description: Get file from ipfs.
      parameters:
        - name: cid
          required: true
          in: path
          description: File cid
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearer: []
  /ipfs/file/{cid}/dry-run:
    get:
      operationId: IpfsApi_getFileDryRun
      summary: Get file from ipfs for dry run mode.
      description: Get file from ipfs for dry run mode.
      parameters:
        - name: cid
          required: true
          in: path
          description: File cid
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_5
      security:
        - bearer: []
  /logs:
    post:
      operationId: LoggerApi_getLogs
      summary: Return a list of all logs.
      description: >-
        Return a list of all logs. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogFilterDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResultDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_6
        - logs
      security:
        - bearer: []
  /logs/attributes:
    get:
      operationId: LoggerApi_getAttributes
      summary: Return a list of attributes.
      description: >-
        Return a list of attributes. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: name
          required: false
          in: query
          description: Name
          example: Search
          schema:
            type: number
        - name: existingAttributes
          required: false
          in: query
          description: Existing attributes
          example:
            - WORKER
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_6
      security:
        - bearer: []
  /map/key:
    get:
      operationId: MapApi_getKey
      summary: Return map key.
      description: Return map key.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_7
        - map
  /map/sh:
    get:
      operationId: MapApi_getSentinelKey
      summary: Return map key.
      description: Return map key.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_7
  /metrics:
    get:
      operationId: MetricsApi_getMetrics
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - metrics
  /modules:
    post:
      operationId: ModulesApi_postModules
      summary: Creates a new module.
      description: >-
        Creates a new module. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Module config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Created module.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_8
        - modules
      security:
        - bearer: []
    get:
      operationId: ModulesApi_getModulesV2
      summary: Return a list of all modules.
      description: >-
        Returns all modules. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/schemas:
    get:
      operationId: ModulesApi_getModuleSchemas
      summary: Return a list of all module schemas.
      description: >-
        Returns all module schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: topicId
          required: false
          in: query
          description: Topic id
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
    post:
      operationId: ModulesApi_postSchemas
      summary: Creates a new module schema.
      description: >-
        Creates a new module schema. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Schema config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '201':
          description: Created schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/{uuid}:
    delete:
      operationId: ModulesApi_deleteModule
      summary: Deletes the module.
      description: >-
        Deletes the module with the provided module ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
    get:
      operationId: ModulesApi_getModule
      summary: Retrieves module configuration.
      description: >-
        Retrieves module configuration for the specified module ID. Only users
        with the Standard Registry role are allowed to make the request.
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
    put:
      operationId: ModulesApi_putModule
      summary: Updates module configuration.
      description: >-
        Updates module configuration for the specified module ID. Only users
        with the Standard Registry role are allowed to make the request.
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      requestBody:
        required: true
        description: Module config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/menu:
    get:
      operationId: ModulesApi_getMenu
      summary: Return a list of modules.
      description: >-
        Returns modules menu. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/{uuid}/export/file:
    get:
      operationId: ModulesApi_moduleExportFile
      summary: >-
        Return module and its artifacts in a zip file format for the specified
        module.
      description: >-
        Returns a zip file containing the published module and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: File.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/{uuid}/export/message:
    get:
      operationId: ModulesApi_moduleExportMessage
      summary: Return Heder message ID for the specified published module.
      description: >-
        Returns the Hedera message ID for the specified module published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportMessageDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/import/message:
    post:
      operationId: ModulesApi_moduleImportMessage
      summary: Imports new module from IPFS.
      description: >-
        Imports new module and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Created module.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/import/file:
    post:
      operationId: ModulesApi_moduleImportFile
      summary: Imports new module from a zip file.
      description: >-
        Imports new module and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Created module.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/import/message/preview:
    post:
      operationId: ModulesApi_moduleImportMessagePreview
      summary: Imports new module from IPFS.
      description: >-
        Imports new module and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Module preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModulePreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/import/file/preview:
    post:
      operationId: ModulesApi_moduleImportFilePreview
      summary: Imports new module from a zip file.
      description: >-
        Imports new module and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Module preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModulePreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/{uuid}/publish:
    put:
      operationId: ModulesApi_publishModule
      summary: Publishes the module onto IPFS.
      description: >-
        Publishes the module with the specified (internal) module ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: uuid
          required: true
          in: path
          description: Module Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      requestBody:
        required: true
        description: Module.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /modules/validate:
    post:
      operationId: ModulesApi_validateModule
      summary: Validates selected module.
      description: >-
        Validates selected module. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Module config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDTO'
      responses:
        '200':
          description: Validation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_8
      security:
        - bearer: []
  /tools:
    post:
      operationId: ToolsApi_createNewTool
      summary: Creates a new tool.
      description: >-
        Creates a new tool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_9
        - tools
      security:
        - bearer: []
    get:
      operationId: ToolsApi_getToolsV2
      summary: Return a list of all tools.
      description: >-
        Returns all tools. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/push:
    post:
      operationId: ToolsApi_createNewToolAsync
      summary: Creates a new tool.
      description: >-
        Creates a new tool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/{id}:
    delete:
      operationId: ToolsApi_deleteTool
      summary: >-
        Deletes the tool with the provided tool ID. Only users with the Standard
        Registry role are allowed to make the request.
      description: Deletes the tool.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
    get:
      operationId: ToolsApi_getToolById
      summary: Retrieves tool configuration.
      description: >-
        Retrieves tool configuration for the specified tool ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
    put:
      operationId: ToolsApi_updateTool
      summary: Updates tool configuration.
      description: >-
        Updates tool configuration for the specified tool ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/{id}/publish:
    put:
      operationId: ToolsApi_publishTool
      summary: Publishes the tool onto IPFS.
      description: >-
        Publishes the tool with the specified (internal) tool ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/{id}/push/publish:
    put:
      operationId: ToolsApi_publishToolAsync
      summary: Publishes the tool onto IPFS.
      description: >-
        Publishes the tool with the specified (internal) tool ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/validate:
    post:
      operationId: ToolsApi_validateTool
      summary: Validates selected tool.
      description: >-
        Validates selected tool. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Tool configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolDTO'
      responses:
        '200':
          description: Validation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/{id}/export/file:
    get:
      operationId: ToolsApi_toolExportFile
      summary: >-
        Return tool and its artifacts in a zip file format for the specified
        tool.
      description: >-
        Returns a zip file containing the published tool and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/{id}/export/message:
    get:
      operationId: ToolsApi_toolExportMessage
      summary: Return Heder message ID for the specified published tool.
      description: >-
        Returns the Hedera message ID for the specified tool published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: id
          required: true
          in: path
          description: Tool ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportMessageDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/import/message/preview:
    post:
      operationId: ToolsApi_toolImportMessagePreview
      summary: Imports new tool from IPFS.
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Tool preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/import/message:
    post:
      operationId: ToolsApi_toolImportMessage
      summary: Imports new tool from IPFS.
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/import/file/preview:
    post:
      operationId: ToolsApi_toolImportFilePreview
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Module preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/import/file:
    post:
      operationId: ToolsApi_toolImportFile
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: File.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/import/file-metadata:
    post:
      operationId: ToolsApi_toolImportFileWithMetadata
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Form data with tool file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/push/import/file:
    post:
      operationId: ToolsApi_toolImportFileAsync
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: A zip file containing tool config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/push/import/file-metadata:
    post:
      operationId: ToolsApi_toolImportFileWithMetadataAsync
      summary: Imports new tool from a zip file.
      description: >-
        Imports new tool and all associated artifacts, such as schemas and VCs,
        from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Form data with tool file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/push/import/message:
    post:
      operationId: ToolsApi_toolImportMessageAsync
      summary: Imports new tool from IPFS.
      description: >-
        Imports new tool and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /tools/menu/all:
    get:
      operationId: ToolsApi_getMenu
      summary: Return a list of tools.
      description: >-
        Returns tools menu. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_9
      security:
        - bearer: []
  /profiles/{username}:
    get:
      operationId: ProfileApi_getProfile
      summary: Returns user account info.
      description: >-
        Returns user account information. For users with the Standard Registry
        role it also returns address book and VC document information.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to fetch the information
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_10
        - profiles
      security:
        - bearer: []
    put:
      operationId: ProfileApi_setUserProfile
      summary: Sets Hedera credentials for the user.
      description: >-
        Sets Hedera credentials for the user. For users with the Standard
        Registry role it also creates an address book.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to update the information.
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Created.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /profiles/push/{username}:
    put:
      operationId: ProfileApi_setUserProfileAsync
      summary: Sets Hedera credentials for the user.
      description: >-
        Sets Hedera credentials for the user. For users with the Standard
        Registry role it also creates an address book.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to update the information.
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /profiles/{username}/balance:
    get:
      operationId: ProfileApi_getUserBalance
      summary: Returns user's Hedera account balance.
      description: >-
        Requests Hedera account balance. Only users with the Installer role are
        allowed to make the request.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to fetch the balance.
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /profiles/restore/{username}:
    put:
      operationId: ProfileApi_restoreUserProfile
      summary: Restore user data (policy, DID documents, VC documents).
      description: Restore user data (policy, DID documents, VC documents).
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to restore the information.
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /profiles/restore/topics/{username}:
    put:
      operationId: ProfileApi_restoreTopic
      summary: List of available recovery topics.
      description: List of available recovery topics.
      parameters:
        - name: username
          required: true
          in: path
          description: The name of the user for whom to restore the information.
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains the Hedera account data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /profiles/did-document/validate:
    post:
      operationId: ProfileApi_validateDidDocument
      summary: Validate DID document format.
      description: Validate DID document format.
      parameters: []
      requestBody:
        required: true
        description: DID Document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DidDocumentDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DidDocumentStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /profiles/did-keys/validate:
    post:
      operationId: ProfileApi_validateDidKeys
      summary: Validate DID document keys.
      description: Validate DID document keys.
      parameters: []
      requestBody:
        required: true
        description: DID Document and keys.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DidDocumentWithKeyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DidKeyStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_10
      security:
        - bearer: []
  /policies:
    get:
      operationId: PolicyApi_getPoliciesV2
      summary: Return a list of all policies.
      description: Returns all policies.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_11
        - policies
      security:
        - bearer: []
    post:
      operationId: PolicyApi_createPolicy
      summary: Creates a new policy.
      description: >-
        Creates a new policy. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/migrate-data:
    post:
      operationId: PolicyApi_migrateData
      summary: Migrate policy data.
      description: >-
        Migrate policy data. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Migration config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationConfigDTO'
      responses:
        '200':
          description: Errors while migration.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    error:
                      type: string
                    id:
                      type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/migrate-data:
    post:
      operationId: PolicyApi_migrateDataAsync
      summary: Migrate policy data asynchronous.
      description: >-
        Migrate policy data asynchronous. Only users with the Standard Registry
        role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Migration configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationConfigDTO'
      responses:
        '202':
          description: Created task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push:
    post:
      operationId: PolicyApi_createPolicyAsync
      summary: Creates a new policy.
      description: >-
        Creates a new policy. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/{policyId}:
    post:
      operationId: PolicyApi_updatePolicyAsync
      summary: Clones policy.
      description: >-
        Clones policy. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
    delete:
      operationId: PolicyApi_deletePolicyAsync
      summary: Remove policy.
      description: >-
        Remove policy. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}:
    get:
      operationId: PolicyApi_getPolicy
      summary: Retrieves policy configuration.
      description: >-
        Retrieves policy configuration for the specified policy ID. Only users
        with the Standard Registry role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Policy configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
    put:
      operationId: PolicyApi_updatePolicy
      summary: Updates policy configuration.
      description: >-
        Updates policy configuration for the specified policy ID. Only users
        with the Standard Registry role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Policy configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/publish:
    put:
      operationId: PolicyApi_publishPolicy
      summary: Publishes the policy onto IPFS.
      description: >-
        Publishes the policy with the specified (internal) policy ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/{policyId}/publish:
    put:
      operationId: PolicyApi_publishPolicyAsync
      summary: Publishes the policy onto IPFS.
      description: >-
        Publishes the policy with the specified (internal) policy ID onto IPFS,
        sends a message featuring its IPFS CID into the corresponding Hedera
        topic. Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run:
    put:
      operationId: PolicyApi_dryRunPolicy
      summary: Dry Run policy.
      description: >-
        Run policy without making any persistent changes or executing
        transaction. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/discontinue:
    put:
      operationId: PolicyApi_discontinuePolicy
      summary: Discontinue policy.
      description: >-
        Discontinue policy. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Discontinue details.
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/draft:
    put:
      operationId: PolicyApi_draftPolicy
      summary: Return policy to editing.
      description: >-
        Return policy to editing. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/validate:
    post:
      operationId: PolicyApi_validatePolicy
      summary: Validates policy.
      description: >-
        Validates selected policy. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Policy configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyDTO'
      responses:
        '200':
          description: Validation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyValidationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/navigation:
    get:
      operationId: PolicyApi_getPolicyNavigation
      summary: Returns a policy navigation.
      description: Returns a policy navigation.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/groups:
    get:
      operationId: PolicyApi_getPolicyGroups
      summary: Returns a list of groups the user is a member of.
      description: Returns a list of groups the user is a member of.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
    post:
      operationId: PolicyApi_setPolicyGroups
      summary: Makes the selected group active.
      description: >-
        Makes the selected group active. if UUID is not set then returns the
        user to the default state.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/documents:
    get:
      operationId: PolicyApi_getPolicyDocuments
      summary: Get policy documents.
      description: >-
        Get policy documents. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: type
          required: false
          in: query
          description: Document type.
          example: VC
          schema:
            enum:
              - VC
              - VP
            type: string
        - name: includeDocument
          required: false
          in: query
          description: Include document field.
          example: true
          schema:
            type: boolean
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Documents.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/data:
    get:
      operationId: PolicyApi_downloadPolicyData
      summary: Get policy data.
      description: >-
        Get policy data. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Policy data.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/data:
    post:
      operationId: PolicyApi_uploadPolicyData
      summary: Upload policy data.
      description: >-
        Upload policy data. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Policy data file
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Uploaded policy.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/tag-block-map:
    get:
      operationId: PolicyApi_getTagBlockMap
      summary: Get policy tag block map.
      description: >-
        Get policy tag block map. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Policy tag block map.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/virtual-keys:
    get:
      operationId: PolicyApi_downloadVirtualKeys
      summary: Get policy virtual keys.
      description: >-
        Get policy virtual keys. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Policy virtual keys.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
    post:
      operationId: PolicyApi_uploadVirtualKeys
      summary: Upload policy virtual keys.
      description: >-
        Upload policy virtual keys. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Virtual keys file
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Operation completed.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/blocks:
    get:
      operationId: PolicyApi_getPolicyBlocks
      summary: Retrieves data for the policy root block.
      description: >-
        Returns data from the root policy block. Only users with the Standard
        Registry and Installer role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/blocks/{uuid}:
    get:
      operationId: PolicyApi_getBlockData
      summary: Requests block data.
      description: >-
        Requests block data. Only users with a role that described in block are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: uuid
          required: true
          in: path
          description: Block Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
    post:
      operationId: PolicyApi_setBlockData
      summary: Sends data to the specified block.
      description: Sends data to the specified block.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: uuid
          required: true
          in: path
          description: Block Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      requestBody:
        required: true
        description: Data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/tag/{tagName}/blocks:
    post:
      operationId: PolicyApi_setBlocksByTagName
      summary: Sends data to the specified block.
      description: Sends data to the specified block.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: tagName
          required: true
          in: path
          description: Block name (Tag)
          example: block-tag
          schema:
            type: string
      requestBody:
        required: true
        description: Data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
    get:
      operationId: PolicyApi_getBlocksByTagName
      summary: Requests block data.
      description: >-
        Requests block data by tag. Only users with a role that described in
        block are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: tagName
          required: true
          in: path
          description: Block name (Tag)
          example: block-tag
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/tag/{tagName}:
    get:
      operationId: PolicyApi_getBlockByTagName
      summary: Requests block config.
      description: >-
        Requests block data by tag. Only users with a role that described in
        block are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: tagName
          required: true
          in: path
          description: Block name (Tag)
          example: block-tag
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/blocks/{uuid}/parents:
    get:
      operationId: PolicyApi_getBlockParents
      summary: Requests block's parents.
      description: >-
        Requests block's parents. Only users with a role that described in block
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: uuid
          required: true
          in: path
          description: Block Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/export/file:
    get:
      operationId: PolicyApi_getPolicyExportFile
      summary: >-
        Return policy and its artifacts in a zip file format for the specified
        policy.
      description: >-
        Returns a zip file containing the published policy and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/export/message:
    get:
      operationId: PolicyApi_getPolicyExportMessage
      summary: Return Heder message ID for the specified published policy.
      description: >-
        Returns the Hedera message ID for the specified policy published onto
        IPFS. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportMessageDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/export/xlsx:
    get:
      operationId: PolicyApi_getPolicyExportXlsx
      summary: >-
        Return policy and its artifacts in a xlsx file format for the specified
        policy.
      description: >-
        Returns a xlsx file containing the published policy and all associated
        artifacts, i.e. schemas and VCs. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/import/message:
    post:
      operationId: PolicyApi_importPolicyFromMessage
      summary: Imports new policy from IPFS.
      description: >-
        Imports new policy and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          example: 0.0.00000001
          schema:
            type: string
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Created policy.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/import/message:
    post:
      operationId: PolicyApi_importPolicyFromMessageAsync
      summary: Imports new policy from IPFS.
      description: >-
        Imports new policy and all associated artifacts from IPFS into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          example: 0.0.00000001
          schema:
            type: string
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/import/message/preview:
    post:
      operationId: PolicyApi_importMessage
      summary: Policy preview from IPFS.
      description: >-
        Previews the policy from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Policy preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/import/message/preview:
    post:
      operationId: PolicyApi_importFromMessagePreview
      summary: Policy preview from IPFS.
      description: >-
        Previews the policy from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessageDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/import/file:
    post:
      operationId: PolicyApi_importPolicyFromFile
      summary: Imports new policy from a zip file.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          example: 0.0.00000001
          schema:
            type: string
      requestBody:
        required: true
        description: A zip file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Created policy.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/import/file-metadata:
    post:
      operationId: PolicyApi_importPolicyFromFileWithMetadata
      summary: Imports new policy from a zip file with metadata.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          example: 0.0.00000001
          schema:
            type: string
      requestBody:
        required: true
        description: Form data with policy file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                policyFile:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/import/file:
    post:
      operationId: PolicyApi_importPolicyFromFileAsync
      summary: Imports new policy from a zip file.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          example: 0.0.00000001
          schema:
            type: string
      requestBody:
        required: true
        description: A zip file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/import/file-metadata:
    post:
      operationId: PolicyApi_importPolicyFromFileWithMetadataAsync
      summary: Imports new policy from a zip file with metadata.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided zip file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: versionOfTopicId
          required: false
          in: query
          description: The topic ID of policy version.
          example: 0.0.00000001
          schema:
            type: string
      requestBody:
        required: true
        description: Form data with policy file and metadata.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                policyFile:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/import/file/preview:
    post:
      operationId: PolicyApi_importPolicyFromFilePreview
      summary: Policy preview from a zip file.
      description: >-
        Previews the policy from a zip file without loading it into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: A zip file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Policy preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/import/xlsx:
    post:
      operationId: PolicyApi_importPolicyFromXlsx
      summary: Imports new policy from a xlsx file.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided xlsx file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: query
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/push/import/xlsx:
    post:
      operationId: PolicyApi_importPolicyFromXlsxAsync
      summary: Imports new policy from a xlsx file.
      description: >-
        Imports new policy and all associated artifacts, such as schemas and
        VCs, from the provided xlsx file into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: query
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/import/xlsx/preview:
    post:
      operationId: PolicyApi_importPolicyFromXlsxPreview
      summary: Policy preview from a xlsx file.
      description: >-
        Previews the policy from a xlsx file without loading it into the local
        DB. Only users with the Standard Registry role are allowed to make the
        request.
      parameters: []
      requestBody:
        required: true
        description: A xlsx file containing policy config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/blocks/about:
    get:
      operationId: PolicyApi_getBlockAbout
      summary: Returns block descriptions.
      description: >-
        Returns block descriptions. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Block descriptions.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run/users:
    get:
      operationId: PolicyApi_getDryRunUsers
      summary: Returns virtual users.
      description: >-
        Returns virtual users. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Virtual users.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run/user:
    post:
      operationId: PolicyApi_setDryRunUser
      summary: Creates virtual users.
      description: >-
        Creates virtual users. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Virtual users.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run/login:
    post:
      operationId: PolicyApi_loginDryRunUser
      summary: Change active virtual user.
      description: >-
        Change active virtual user. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Virtual users.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run/restart:
    post:
      operationId: PolicyApi_restartDryRun
      summary: Clear dry-run state.
      description: >-
        Clear dry-run state. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: .
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: .
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run/transactions:
    get:
      operationId: PolicyApi_getDryRunTransactions
      summary: Get dry-run details (Transactions).
      description: >-
        Get dry-run details (Transactions). Only users with the Standard
        Registry role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Transactions.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run/artifacts:
    get:
      operationId: PolicyApi_getDryRunArtifacts
      summary: Get dry-run details (Artifacts).
      description: >-
        Get dry-run details (Artifacts). Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Artifacts.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/dry-run/ipfs:
    get:
      operationId: PolicyApi_getDryRunIpfs
      summary: Get dry-run details (Files).
      description: >-
        Get dry-run details (Files). Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 20
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Files.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/{policyId}/multiple:
    get:
      operationId: PolicyApi_getMultiplePolicies
      summary: Requests policy links.
      description: >-
        Requests policy links. Only users with a role that described in block
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
    post:
      operationId: PolicyApi_setMultiplePolicies
      summary: Creates policy link.
      description: >-
        Creates policy link. Only users with a role that described in block are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
      security:
        - bearer: []
  /policies/methodologies/categories:
    get:
      operationId: PolicyApi_getPolicyCategoriesAsync
      summary: Get all categories
      description: Get all categories
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyCategoryDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
  /policies/methodologies/search:
    post:
      operationId: PolicyApi_getPoliciesByCategory
      summary: Get filtered policies
      description: Get policies by categories and text
      parameters: []
      requestBody:
        required: true
        description: Filters
        content:
          application/json:
            schema:
              type: string
            examples:
              Filter1:
                value:
                  categoryIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
                  text: abc
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_11
  /schema/{schemaId}:
    get:
      operationId: SingleSchemaApi_getSchema
      summary: Returns schema by schema ID.
      description: >-
        Returns schema by schema ID. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_12
        - schema
      security:
        - bearer: []
  /schema/{schemaId}/parents:
    get:
      operationId: SingleSchemaApi_getSchemaParents
      summary: Returns all parent schemas.
      description: Returns all parent schemas.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema identifier
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_12
      security:
        - bearer: []
  /schema/{schemaId}/tree:
    get:
      operationId: SingleSchemaApi_getSchemaTree
      summary: Returns schema tree.
      description: Returns schema tree.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema identifier
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
                  children:
                    type: array
                    items:
                      type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_12
      security:
        - bearer: []
  /schemas:
    get:
      operationId: SchemaApi_getSchemasPageV2
      summary: Return a list of all schemas.
      description: Returns all schemas.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: category
          required: false
          in: query
          description: Schema category
          example: POLICY
          schema:
            type: string
        - name: policyId
          required: false
          in: query
          description: Policy id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: moduleId
          required: false
          in: query
          description: Module id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: toolId
          required: false
          in: query
          description: Tool id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: topicId
          required: false
          in: query
          description: Topic id
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_13
        - schemas
      security:
        - bearer: []
    put:
      operationId: SchemaApi_setSchema
      summary: Updates the schema.
      description: >-
        Updates the schema. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{topicId}:
    get:
      operationId: SchemaApi_getSchemasPageByTopicId
      summary: Return a list of all schemas.
      description: Returns all schemas.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: category
          required: false
          in: query
          description: Schema category
          example: POLICY
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
    post:
      operationId: SchemaApi_createNewSchema
      summary: Creates a new schema.
      description: >-
        Creates a new schema. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/type/{schemaType}:
    get:
      operationId: SchemaApi_getSchemaByType
      summary: Finds the schema using the json document type.
      description: Finds the schema using the json document type.
      parameters:
        - name: schemaType
          required: true
          in: path
          description: Type
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/list/all:
    get:
      operationId: SchemaApi_getAll
      summary: Returns a list of schemas.
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/list/sub:
    get:
      operationId: SchemaApi_getSub
      summary: Returns a list of schemas.
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: category
          required: false
          in: query
          description: Schema category
          example: POLICY
          schema:
            type: string
        - name: topicId
          required: false
          in: query
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/schema-with-sub-schemas:
    get:
      operationId: SchemaApi_getSchemaWithSubSchemas
      summary: Returns a list of schemas.
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: category
          required: false
          in: query
          description: Schema category
          example: POLICY
          schema:
            type: string
        - name: topicId
          required: false
          in: query
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
        - name: schemaId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/push/copy:
    post:
      operationId: SchemaApi_copySchemaAsync
      summary: Copy schema.
      description: >-
        Copy schema. Only users with the Standard Registry role are allowed to
        make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/push/{topicId}:
    post:
      operationId: SchemaApi_createNewSchemaAsync
      summary: Creates a new schema.
      description: >-
        Creates a new schema. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{schemaId}:
    delete:
      operationId: SchemaApi_deleteSchema
      summary: Deletes the schema with the provided schema ID.
      description: >-
        Deletes the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{schemaId}/publish:
    put:
      operationId: SchemaApi_publishSchema
      summary: Publishes the schema with the provided schema ID.
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionSchemaDTO'
            examples:
              Version:
                value:
                  version: 1.0.0
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/push/{schemaId}/publish:
    put:
      operationId: SchemaApi_publishSchemaAsync
      summary: Publishes the schema with the provided schema ID.
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionSchemaDTO'
            examples:
              Version:
                value:
                  version: 1.0.0
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/import/message/preview:
    post:
      operationId: SchemaApi_importFromMessagePreview
      summary: Previews the schema from IPFS without loading it into the local DB.
      description: >-
        Previews the schema from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/push/import/message/preview:
    post:
      operationId: SchemaApi_importFromMessagePreviewAsync
      summary: Previews the schema from IPFS without loading it into the local DB.
      description: >-
        Previews the schema from IPFS without loading it into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/import/file/preview:
    post:
      operationId: SchemaApi_importFromFilePreview
      summary: Previews the schema from a zip file.
      description: >-
        Previews the schema from a zip file. Only users with the Standard
        Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: A zip file containing schema to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{topicId}/import/message:
    post:
      operationId: SchemaApi_importFromMessage
      summary: Imports new schema from IPFS into the local DB.
      description: >-
        Imports new schema from IPFS into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/push/{topicId}/import/message:
    post:
      operationId: SchemaApi_importFromMessageAsync
      summary: Imports new schema from IPFS into the local DB.
      description: >-
        Imports new schema from IPFS into the local DB. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSchemaDTO'
            examples:
              Message:
                value:
                  messageId: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{topicId}/import/file:
    post:
      operationId: SchemaApi_importToTopicFromFile
      summary: Imports new schema from a zip file into the local DB.
      description: >-
        Imports new schema from a zip file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: A zip file containing schema to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/push/{topicId}/import/file:
    post:
      operationId: SchemaApi_importToTopicFromFileAsync
      summary: Imports new schema from a zip file into the local DB.
      description: >-
        Imports new schema from a zip file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: A zip file containing schema to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{schemaId}/export/message:
    get:
      operationId: SchemaApi_exportMessage
      summary: Returns Hedera message IDs of the published schemas.
      description: >-
        Returns Hedera message IDs of the published schemas, these messages
        contain IPFS CIDs of these schema files. Only users with the Standard
        Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportSchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{schemaId}/export/file:
    get:
      operationId: SchemaApi_exportToFile
      summary: Returns schema files for the schema.
      description: >-
        Returns schema files for the schema. Only users with the Standard
        Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/system/{username}:
    post:
      operationId: SchemaApi_postSystemSchema
      summary: Creates a new system schema.
      description: >-
        Creates a new system schema. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: username
          required: true
          in: path
          description: username
          example: username
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemSchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
    get:
      operationId: SchemaApi_getSystemSchemaV2
      summary: Return a list of all system schemas.
      description: >-
        Returns all system schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: username
          required: true
          in: path
          description: username
          example: username
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/system/{schemaId}:
    delete:
      operationId: SchemaApi_deleteSystemSchema
      summary: Deletes the system schema with the provided schema ID.
      description: >-
        Deletes the system schema with the provided schema ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
    put:
      operationId: SchemaApi_setSystemSchema
      summary: Updates the system schema.
      description: >-
        Updates the system schema. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains a valid schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/system/{schemaId}/active:
    put:
      operationId: SchemaApi_activeSystemSchema
      summary: >-
        Makes the selected scheme active. Other schemes of the same type become
        inactive
      description: >-
        Makes the selected scheme active. Other schemes of the same type become
        inactive Only users with the Standard Registry role are allowed to make
        the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/system/entity/{schemaEntity}:
    get:
      operationId: SchemaApi_getSchemaEntity
      summary: Finds the schema using the schema type.
      description: Finds the schema using the schema type.
      parameters:
        - name: schemaEntity
          required: true
          in: path
          description: Entity name
          example: STANDARD_REGISTRY
          schema:
            type: string
            enum:
              - STANDARD_REGISTRY
              - USER
              - POLICY
              - MINT_TOKEN
              - WIPE_TOKEN
              - MINT_NFTOKEN
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{schemaId}/export/xlsx:
    get:
      operationId: SchemaApi_getPolicyExportXlsx
      summary: Return schemas in a xlsx file format for the specified policy.
      description: >-
        Returns a xlsx file containing schemas. Only users with the Standard
        Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/{topicId}/import/xlsx:
    post:
      operationId: SchemaApi_importPolicyFromXlsx
      summary: Imports new schema from a xlsx file into the local DB.
      description: >-
        Imports new schema from a xlsx file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/push/{topicId}/import/xlsx:
    post:
      operationId: SchemaApi_importPolicyFromXlsxAsync
      summary: Imports new schema from a xlsx file into the local DB.
      description: >-
        Imports new schema from a xlsx file into the local DB. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: topicId
          required: true
          in: path
          description: Topic Id
          example: 0.0.1
          schema:
            type: string
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/import/xlsx/preview:
    post:
      operationId: SchemaApi_importPolicyFromXlsxPreview
      summary: Previews the schema from a xlsx file.
      description: >-
        Previews the schema from a xlsx file. Only users with the Standard
        Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: A xlsx file containing schema config.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /schemas/export/template:
    get:
      operationId: SchemaApi_exportTemplate
      summary: Returns a list of schemas.
      description: >-
        Returns a list of schemas. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_13
      security:
        - bearer: []
  /settings:
    post:
      operationId: SettingsApi_updateSettings
      summary: Set settings.
      description: Set settings. For users with the Standard Registry role only.
      parameters: []
      requestBody:
        required: true
        description: Settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsDTO'
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_14
        - settings
      security:
        - bearer: []
    get:
      operationId: SettingsApi_getSettings
      summary: Returns current settings.
      description: >-
        Returns current settings. For users with the Standard Registry role
        only.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_14
      security:
        - bearer: []
  /settings/environment:
    get:
      operationId: SettingsApi_getEnvironment
      summary: Returns current environment name.
      description: Returns current environment name.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_14
      security:
        - bearer: []
  /settings/about:
    get:
      operationId: SettingsApi_getAbout
      summary: Returns package version.
      description: Returns package version. For users with the Standard Registry role only.
      parameters: []
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_14
      security:
        - bearer: []
  /tags:
    post:
      operationId: TagsApi_setTags
      summary: Creates new tag.
      description: Creates new tag.
      parameters: []
      requestBody:
        required: true
        description: Object that contains tag information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDTO'
      responses:
        '200':
          description: Created tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_15
        - tags
      security:
        - bearer: []
  /tags/search:
    post:
      operationId: TagsApi_searchTags
      summary: Search tags.
      description: Search tags.
      parameters: []
      requestBody:
        required: true
        description: Object that contains filters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagFilterDTO'
            examples:
              Single:
                value:
                  entity: PolicyDocument
                  target: '0000000000.000000001'
              Multiple:
                value:
                  entity: PolicyDocument
                  targets:
                    - '0000000000.000000001'
                    - '0000000000.000000001'
      responses:
        '200':
          description: Created tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMapDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
  /tags/{uuid}:
    delete:
      operationId: TagsApi_deleteTag
      summary: Delete tag.
      description: Delete tag.
      parameters:
        - name: uuid
          required: true
          in: path
          description: Tag identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
  /tags/synchronization:
    post:
      operationId: TagsApi_synchronizationTags
      summary: Synchronization of tags with an external network.
      description: Synchronization of tags with an external network.
      parameters: []
      requestBody:
        required: true
        description: Object that contains filters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagFilterDTO'
            examples:
              Single:
                value:
                  entity: PolicyDocument
                  target: '0000000000.000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagMapDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
  /tags/schemas:
    get:
      operationId: TagsApi_getSchemasV2
      summary: Return a list of all tag schemas.
      description: >-
        Returns all tag schemas. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
    post:
      operationId: TagsApi_postSchemas
      summary: Creates a new tag schema.
      description: >-
        Creates a new tag schema. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Schema config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '201':
          description: Created schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
  /tags/schemas/{schemaId}:
    delete:
      operationId: TagsApi_deleteSchema
      summary: Deletes the schema.
      description: >-
        Deletes the schema with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
    put:
      operationId: TagsApi_updateSchema
      summary: Updates schema configuration.
      description: >-
        Updates schema configuration for the specified schema ID. Only users
        with the Standard Registry role are allowed to make the request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Schema config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
  /tags/schemas/{schemaId}/publish:
    put:
      operationId: TagsApi_publishTag
      summary: Publishes the schema.
      description: >-
        Publishes the schema with the provided (internal) schema ID onto IPFS,
        sends a message featuring IPFS CID into the corresponding Hedera topic.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: schemaId
          required: true
          in: path
          description: Schema Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
  /tags/schemas/published:
    get:
      operationId: TagsApi_getPublished
      summary: Return a list of all published schemas.
      description: >-
        Return a list of all published schemas. Only users with the Standard
        Registry role are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_15
      security:
        - bearer: []
  /tasks/{taskId}:
    get:
      operationId: TaskApi_getTask
      summary: Returns task statuses by Id.
      description: Returns task statuses by Id.
      parameters:
        - name: taskId
          required: true
          in: path
          description: Task Id
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags:
        - tasks
      security:
        - bearer: []
  /tokens:
    get:
      operationId: TokensApi_getTokensV2
      summary: Return a list of tokens.
      description: >-
        Returns all tokens. For the Standard Registry role it returns only the
        list of tokens, for other users it also returns token balances as well
        as the KYC, Freeze, and Association statuses. Not allowed for the
        Auditor role.
      parameters:
        - name: policyId
          required: false
          in: query
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: Token status
          example: All
          schema:
            enum:
              - Associated
              - All
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_16
        - tokens
      security:
        - bearer: []
    post:
      operationId: TokensApi_newToken
      summary: Creates a new token.
      description: >-
        Creates a new token. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
    put:
      operationId: TokensApi_updateToken
      summary: Update token.
      description: >-
        Update token. Only users with the Standard Registry role are allowed to
        make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Updated token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}:
    get:
      operationId: TokensApi_getTokenByIdWithPolicies
      summary: Return a token by id.
      description: Return the token.
      parameters:
        - name: tokenId
          required: true
          in: path
          schema:
            type: string
        - name: policyId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push:
    post:
      operationId: TokensApi_pushTokenAsync
      summary: Creates a new token.
      description: >-
        Creates a new token. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
    put:
      operationId: TokensApi_updateTokenAsync
      summary: Update token.
      description: >-
        Update token. Only users with the Standard Registry role are allowed to
        make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains token information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push/{tokenId}:
    delete:
      operationId: TokensApi_deleteTokenAsync
      summary: Deletes the token with the provided schema ID.
      description: >-
        Deletes the token with the provided schema ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/associate:
    put:
      operationId: TokensApi_associateToken
      summary: Associates the user with the provided Hedera token.
      description: >-
        Associates the user with the provided Hedera token. Only users with the
        Installer role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push/{tokenId}/associate:
    put:
      operationId: TokensApi_associateTokenAsync
      summary: Associates the user with the provided Hedera token.
      description: >-
        Associates the user with the provided Hedera token. Only users with the
        Installer role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/dissociate:
    put:
      operationId: TokensApi_dissociateToken
      summary: Associate the user with the provided Hedera token.
      description: >-
        Disassociates the user with the provided Hedera token. Only users with
        the Installer role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push/{tokenId}/dissociate:
    put:
      operationId: TokensApi_dissociateTokenAsync
      summary: Associate the user with the provided Hedera token.
      description: >-
        Disassociates the user with the provided Hedera token. Only users with
        the Installer role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/{username}/grant-kyc:
    put:
      operationId: TokensApi_grantKyc
      summary: Sets the KYC flag for the user.
      description: >-
        Sets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push/{tokenId}/{username}/grant-kyc:
    put:
      operationId: TokensApi_grantKycAsync
      summary: Sets the KYC flag for the user.
      description: >-
        Sets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/{username}/revoke-kyc:
    put:
      operationId: TokensApi_revokeKyc
      summary: Unsets the KYC flag for the user.
      description: >-
        Unsets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push/{tokenId}/{username}/revoke-kyc:
    put:
      operationId: TokensApi_revokeKycAsync
      summary: Unsets the KYC flag for the user.
      description: >-
        Unsets the KYC flag for the user. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/{username}/freeze:
    put:
      operationId: TokensApi_freezeToken
      summary: Freeze transfers of the specified token for the user.
      description: >-
        Freezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/{username}/unfreeze:
    put:
      operationId: TokensApi_unfreezeToken
      summary: Unfreezes transfers of the specified token for the user.
      description: >-
        Unfreezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push/{tokenId}/{username}/freeze:
    put:
      operationId: TokensApi_freezeTokenAsync
      summary: Freeze transfers of the specified token for the user.
      description: >-
        Freezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/push/{tokenId}/{username}/unfreeze:
    put:
      operationId: TokensApi_unfreezeTokenAsync
      summary: Unfreezes transfers of the specified token for the user.
      description: >-
        Unfreezes transfers of the specified token for the user. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/{username}/info:
    get:
      operationId: TokensApi_getTokenInfo
      summary: Returns user information for the selected token.
      description: >-
        Returns user information for the selected token. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
        - name: username
          required: true
          in: path
          description: Username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/{tokenId}/serials:
    get:
      operationId: TokensApi_getTokenSerials
      summary: Return token serials.
      description: Returns token serials of current user.
      parameters:
        - name: tokenId
          required: true
          in: path
          description: Token ID
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Token serials.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /tokens/menu/all:
    get:
      operationId: TokensApi_getMenu
      summary: Return a list of tokens.
      description: >-
        Returns tokens menu. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_16
      security:
        - bearer: []
  /themes:
    post:
      operationId: ThemesApi_setThemes
      summary: Creates a new theme.
      description: >-
        Creates a new theme. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains a theme.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_17
        - themes
      security:
        - bearer: []
    get:
      operationId: ThemesApi_getThemes
      summary: Returns a list of all themes.
      description: >-
        Returns a list of all themes. Only users with the Standard Registry role
        are allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_17
      security:
        - bearer: []
  /themes/{themeId}:
    put:
      operationId: ThemesApi_updateTheme
      summary: Updates theme configuration.
      description: >-
        Updates theme configuration for the specified theme ID. Only users with
        the Standard Registry role are allowed to make the request.
      parameters:
        - name: themeId
          required: true
          in: path
          description: Theme Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains a theme.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_17
      security:
        - bearer: []
    delete:
      operationId: ThemesApi_deleteTheme
      summary: Deletes the theme.
      description: >-
        Deletes the theme with the provided theme ID. Only users with the
        Standard Registry role are allowed to make the request.
      parameters:
        - name: themeId
          required: true
          in: path
          description: Theme Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_17
      security:
        - bearer: []
  /themes/import/file:
    post:
      operationId: ThemesApi_importTheme
      summary: Imports new theme from a zip file.
      description: >-
        Imports new theme from the provided zip file into the local DB. Only
        users with the Standard Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: A zip file containing theme to be imported.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_17
      security:
        - bearer: []
  /themes/{themeId}/export/file:
    get:
      operationId: ThemesApi_exportTheme
      summary: Returns a zip file containing the theme.
      description: >-
        Returns a zip file containing the theme. Only users with the Standard
        Registry role are allowed to make the request.
      parameters:
        - name: themeId
          required: true
          in: path
          description: Theme Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Response zip file.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_17
      security:
        - bearer: []
  /trust-chains:
    get:
      operationId: TrustChainsApi_getTrustChains
      summary: Returns a list of all VP documents.
      description: >-
        Returns a list of all VP documents. Only users with the Standard
        Registry role are allowed to make the request.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: policyId
          required: false
          in: query
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
        - name: policyOwner
          required: false
          in: query
          description: Policy Owner
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VpDocumentDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_18
        - trust-chains
      security:
        - bearer: []
  /trust-chains/{hash}:
    get:
      operationId: TrustChainsApi_getTrustChainByHash
      summary: Builds and returns a trustchain, from the VP to the root VC document.
      description: >-
        Builds and returns a trustchain, from the VP to the root VC document.
        Only users with the Standard Registry role are allowed to make the
        request.
      parameters:
        - name: hash
          required: true
          in: path
          description: Hash
          example: hash
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  chain:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        tag:
                          type: string
                        label:
                          type: string
                        schema:
                          type: string
                        owner:
                          type: string
                        document:
                          type: object
                      required:
                        - id
                        - type
                        - tag
                        - label
                        - schema
                        - owner
                        - document
                  userMap:
                    type: array
                    items:
                      type: object
                      properties:
                        did:
                          type: string
                        username:
                          type: string
                      required:
                        - did
                        - username
                required:
                  - chain
                  - userMap
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_18
      security:
        - bearer: []
  /wizard/policy:
    post:
      operationId: WizardApi_setPolicy
      summary: Creates a new policy.
      description: >-
        Creates a new policy by wizard. Only users with the Standard Registry
        role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains wizard configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfigDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WizardResultDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_19
        - wizard
      security:
        - bearer: []
  /wizard/push/policy:
    post:
      operationId: WizardApi_setPolicyAsync
      summary: Creates a new policy.
      description: >-
        Creates a new policy by wizard. Only users with the Standard Registry
        role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains wizard configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfigAsyncDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_19
      security:
        - bearer: []
  /wizard/{policyId}/config:
    post:
      operationId: WizardApi_setPolicyConfig
      summary: Get policy config.
      description: >-
        Get policy config by wizard. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains wizard configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WizardConfigDTO'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WizardPreviewDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_19
      security:
        - bearer: []
  /branding:
    post:
      operationId: BrandingApi_setBranding
      summary: Update branding.
      description: >-
        Update branding. Only users with the Standard Registry role are allowed
        to make the request.
      parameters: []
      requestBody:
        required: true
        description: Object that contains config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandingDTO'
      responses:
        '200':
          description: Successful operation.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_20
        - branding
      security:
        - bearer: []
    get:
      operationId: BrandingApi_getBranding
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandingDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_20
  /suggestions:
    post:
      operationId: SuggestionsApi_policySuggestions
      summary: Get next and nested suggested block types
      description: >-
        Get next and nested suggested block types. Only users with the Standard
        Registry role are allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestionsInputDTO'
      responses:
        '200':
          description: >-
            Successful operation. Suggested next and nested block types
            respectively.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsOutputDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_21
        - suggestions
      security:
        - bearer: []
  /suggestions/config:
    post:
      operationId: SuggestionsApi_setPolicySuggestionsConfig
      summary: Set suggestions config
      description: >-
        Set suggestions config. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      requestBody:
        required: true
        description: Suggestions config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestionsConfigDTO'
      responses:
        '201':
          description: Successful operation. Response setted suggestions config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsConfigDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_21
      security:
        - bearer: []
    get:
      operationId: SuggestionsApi_getPolicySuggestionsConfig
      summary: Get suggestions config
      description: >-
        Get suggestions config. Only users with the Standard Registry role are
        allowed to make the request.
      parameters: []
      responses:
        '200':
          description: Successful operation. Response suggestions config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionsConfigDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_21
      security:
        - bearer: []
  /notifications:
    get:
      operationId: NotificationsApi_getAllNotifications
      summary: Get all notifications
      description: Returns all notifications.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation. Returns notifications and count.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_22
        - notifications
      security:
        - bearer: []
  /notifications/new:
    get:
      operationId: NotificationsApi_getNewNotifications
      summary: Get new notifications
      description: Returns new notifications.
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns new notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_22
      security:
        - bearer: []
  /notifications/progresses:
    get:
      operationId: NotificationsApi_getProgresses
      summary: Get progresses
      description: Returns progresses.
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns progresses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgressDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_22
      security:
        - bearer: []
  /notifications/read/all:
    post:
      operationId: NotificationsApi_readAll
      summary: Read all notifications
      description: Returns new notifications.
      parameters: []
      responses:
        '200':
          description: Successful operation. Returns notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_22
      security:
        - bearer: []
  /notifications/delete/{notificationId}:
    delete:
      operationId: NotificationsApi_delete
      summary: Delete notifications up to this point
      description: Returns deleted notifications count.
      parameters:
        - name: notificationId
          required: true
          in: path
          description: Notification Identifier
          example: 00000000-0000-0000-0000-000000000000
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Returns deleted notifications count.
          content:
            application/json:
              schema:
                type: number
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_22
      security:
        - bearer: []
  /projects/search:
    post:
      operationId: ProjectsAPI_projectSearch
      summary: Search projects
      description: Search projects by filters
      parameters: []
      requestBody:
        required: true
        description: The question of choosing a methodology
        content:
          application/json:
            schema:
              type: string
            examples:
              q:
                value: >-
                  What methodology can I use for production of electricity using
                  renewable energy technologies?
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_23
        - projects
  /projects/compare/documents:
    post:
      operationId: ProjectsAPI_compareDocumentsV2
      summary: Compare documents.
      description: Compare documents.
      parameters: []
      requestBody:
        required: true
        description: Filters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDocumentsDTO'
            examples:
              Filter1:
                value:
                  documentId1: '000000000000000000000001'
                  documentId2: '000000000000000000000001'
              Filter2:
                value:
                  documentIds:
                    - '000000000000000000000001'
                    - '000000000000000000000001'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareDocumentsV2DTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_23
  /projects/properties:
    get:
      operationId: ProjectsAPI_getPolicyProperties
      summary: Get all properties
      description: Get all properties
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertiesDTO'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_23
  /record/{policyId}/status:
    get:
      operationId: RecordApi_getRecordStatus
      summary: Get recording or running status.
      description: >-
        Get recording or running status. Only users with the Standard Registry
        role are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordStatusDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_24
        - record
      security:
        - bearer: []
  /record/{policyId}/recording/start:
    post:
      operationId: RecordApi_startRecord
      summary: Start recording.
      description: >-
        Start recording. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/recording/stop:
    post:
      operationId: RecordApi_stopRecord
      summary: Stop recording.
      description: >-
        Stop recording. Only users with the Standard Registry role are allowed
        to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/recording/actions:
    get:
      operationId: RecordApi_getRecordActions
      summary: Get recorded actions.
      description: >-
        Get recorded actions. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordActionDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/running/start:
    post:
      operationId: RecordApi_runRecord
      summary: Run record from a zip file.
      description: >-
        Run record from a zip file. Only users with the Standard Registry role
        are allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: A zip file containing record to be run.
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/running/stop:
    post:
      operationId: RecordApi_stopRunning
      summary: Stop running.
      description: >-
        Stop running. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/running/results:
    get:
      operationId: RecordApi_getRecordResults
      summary: Get running results.
      description: >-
        Get running results. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningResultDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/running/details:
    get:
      operationId: RecordApi_getRecordDetails
      summary: Get running details.
      description: >-
        Get running details. Only users with the Standard Registry role are
        allowed to make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunningDetailsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/running/fast-forward:
    post:
      operationId: RecordApi_fastForward
      summary: Fast Forward.
      description: >-
        Fast Forward. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/running/retry:
    post:
      operationId: RecordApi_retryStep
      summary: Retry step.
      description: >-
        Retry step. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /record/{policyId}/running/skip:
    post:
      operationId: RecordApi_skipStep
      summary: Skip step.
      description: >-
        Skip step. Only users with the Standard Registry role are allowed to
        make the request.
      parameters:
        - name: policyId
          required: true
          in: path
          description: Policy Id
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Object that contains options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_24
      security:
        - bearer: []
  /ai-suggestions/ask:
    get:
      operationId: AISuggestionsAPI_getAIAnswer
      summary: Get methodology suggestion
      description: Returns AI response to the current question
      parameters:
        - name: q
          required: true
          in: query
          description: The question of choosing a methodology
          example: Find me large scale projects
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                example: ACM0001, ACM0002, ACM0006, ACM0007, ACM0018
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_25
        - ai-suggestions
  /ai-suggestions/rebuild-vector:
    put:
      operationId: AISuggestionsAPI_rebuildVector
      summary: Rebuild AI vector
      description: Rebuilds vector based on policy data in the DB
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_25
  /permissions:
    get:
      operationId: PermissionsApi_getPermissions
      summary: Return a list of all permissions.
      description: Returns all permissions.
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionsDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: &ref_26
        - permissions
      security:
        - bearer: []
  /permissions/roles:
    get:
      operationId: PermissionsApi_getRoles
      summary: Return a list of all roles.
      description: Returns all roles.
      parameters:
        - name: name
          required: false
          in: query
          description: Filter by role name
          example: name
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
    post:
      operationId: PermissionsApi_createRole
      summary: Creates new role.
      description: Creates new role.
      parameters: []
      requestBody:
        required: true
        description: Object that contains role information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
      responses:
        '200':
          description: Created role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/roles/{id}:
    put:
      operationId: PermissionsApi_updateRole
      summary: Updates role configuration.
      description: Updates role configuration for the specified role ID.
      parameters:
        - name: id
          required: true
          in: path
          description: Role Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      requestBody:
        required: true
        description: Role configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
      responses:
        '200':
          description: Role configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
    delete:
      operationId: PermissionsApi_deleteModule
      summary: Deletes the role.
      description: Deletes the role with the provided role ID.
      parameters:
        - name: id
          required: true
          in: path
          description: Role Identifier
          example: '000000000000000000000001'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/roles/default:
    post:
      operationId: PermissionsApi_setDefaultRole
      summary: Set default role.
      description: Set the role as default for new users.
      parameters: []
      requestBody:
        required: true
        description: Object that contains role information.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Role Identifier
                  example: '000000000000000000000001'
              required:
                - id
            examples:
              Default:
                value:
                  id: '000000000000000000000001'
      responses:
        '200':
          description: Created role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/users:
    get:
      operationId: PermissionsApi_getUsers
      summary: Return a list of all users.
      description: Returns all users.
      parameters:
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: role
          required: false
          in: query
          description: Filter by role
          example: '000000000000000000000001'
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: Filter by status
          example: Active
          schema:
            enum:
              - Active
              - Inactive
            type: string
        - name: username
          required: false
          in: query
          description: Filter by username
          example: username
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/users/{username}:
    get:
      operationId: PermissionsApi_getUser
      summary: Updates user permissions.
      description: Updates user permissions for the specified username.
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          example: username
          schema:
            type: string
      responses:
        '200':
          description: User permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
    put:
      operationId: PermissionsApi_updateUser
      summary: Updates user permissions.
      description: Updates user permissions for the specified username.
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: User permissions.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Roles:
                value:
                  - '000000000000000000000001'
                  - '000000000000000000000001'
      responses:
        '200':
          description: User permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/users/{username}/policies:
    get:
      operationId: PermissionsApi_getAssignedPolicies
      summary: Return a list of all roles.
      description: Returns all roles.
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          example: username
          schema:
            type: string
        - name: pageIndex
          required: false
          in: query
          description: >-
            The number of pages to skip before starting to collect the result
            set
          example: 0
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: The numbers of items to return
          example: 20
          schema:
            type: number
        - name: status
          required: false
          in: query
          description: Filter by status
          example: Active
          schema:
            enum:
              - ALL
              - DRAFT
              - DRY-RUN
              - PUBLISH_ERROR
              - DISCONTINUED
              - PUBLISH
            type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total items in the collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/users/{username}/policies/assign:
    post:
      operationId: PermissionsApi_assignPolicy
      summary: Assign policy.
      description: Assign policy.
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: Options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignPolicyDTO'
      responses:
        '200':
          description: Assigned policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/users/{username}/delegate:
    put:
      operationId: PermissionsApi_delegateRole
      summary: Delegate user permissions.
      description: Delegate user permissions for the specified username.
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: User permissions.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Roles:
                value:
                  - '000000000000000000000001'
                  - '000000000000000000000001'
      responses:
        '200':
          description: User permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
  /permissions/users/{username}/policies/delegate:
    post:
      operationId: PermissionsApi_delegatePolicy
      summary: Delegate policy.
      description: Delegate policy.
      parameters:
        - name: username
          required: true
          in: path
          description: User Identifier
          example: username
          schema:
            type: string
      requestBody:
        required: true
        description: Options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignPolicyDTO'
      responses:
        '200':
          description: Assigned policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyDTO'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorDTO'
      tags: *ref_26
      security:
        - bearer: []
info:
  title: Guardian
  description: >-
    The Guardian is a modular open-source solution that includes best-in-class
    identity management and decentralized ledger technology (DLT) libraries. At
    the heart of the Guardian solution is a sophisticated Policy Workflow Engine
    (PWE) that enables applications to offer a requirements-based tokenization
    implementation.
  version: 2.25.1
  contact:
    name: API developer
    url: https://envisionblockchain.com
    email: info@envisionblockchain.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags: []
servers:
  - url: /api/v1
    description: version 1.0
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AccountsSessionResponseDTO:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
        accessToken:
          type: string
      required:
        - username
        - role
        - accessToken
    InternalServerErrorDTO:
      type: object
      properties:
        code:
          type: number
          example: 500
        message:
          type: string
          example: Error message
      required:
        - code
        - message
    AccountsResponseDTO:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
        did:
          type: string
      required:
        - username
        - role
        - did
    RegisterUserDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        role:
          type: string
      required:
        - username
        - password
        - password_confirmation
        - role
    LoginUserDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    CredentialSubjectDTO:
      type: object
      properties:
        geography:
          type: string
        law:
          type: string
        tags:
          type: string
        ISIC:
          type: string
        '@context':
          type: array
          items:
            type: string
        id:
          type: string
        type:
          type: string
      required:
        - geography
        - law
        - tags
        - ISIC
        - '@context'
        - id
        - type
    ProofDTO:
      type: object
      properties:
        type:
          type: string
        created:
          format: date-time
          type: string
        verificationMethod:
          type: string
        proofPurpose:
          type: string
        jws:
          type: string
      required:
        - type
        - created
        - verificationMethod
        - proofPurpose
        - jws
    VcDocumentDTO:
      type: object
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        issuer:
          type: string
        issuanceDate:
          format: date-time
          type: string
        '@context':
          type: array
          items:
            type: string
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubjectDTO'
        proof:
          $ref: '#/components/schemas/ProofDTO'
      required:
        - id
        - type
        - issuer
        - issuanceDate
        - '@context'
        - credentialSubject
        - proof
    PolicyDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Policy name
        description:
          type: string
          example: Description
        topicDescription:
          type: string
          example: Description
        policyTag:
          type: string
          example: Tag
        status:
          type: string
          enum:
            - DRY-RUN
            - DRAFT
            - PUBLISH_ERROR
            - PUBLISH
            - DISCONTINUED
          example: DRAFT
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        codeVersion:
          type: string
          example: 1.0.0
        createDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        version:
          type: string
          example: 1.0.0
        config:
          type: object
        userRole:
          type: string
          example: Installer
        userRoles:
          example:
            - Installer
          type: array
          items:
            type: string
        userGroup:
          type: object
          example:
            uuid: 00000000-0000-0000-0000-000000000000
            role: Installer
            groupLabel: Label
            groupName: Name
            active: true
        userGroups:
          example:
            - uuid: 00000000-0000-0000-0000-000000000000
              role: Installer
              groupLabel: Label
              groupName: Name
              active: true
          type: array
          items:
            type: object
        policyRoles:
          example:
            - Registrant
          type: array
          items:
            type: string
        policyNavigation:
          example:
            - role: Registrant
              steps:
                - block: Block tag
                  level: 1
                  name: Step name
          type: array
          items:
            type: object
        policyTopics:
          example:
            - name: Project
              description: Project
              memoObj: topic
              static: false
              type: any
          type: array
          items:
            type: object
        policyTokens:
          example:
            - tokenName: Token name
              tokenSymbol: Token symbol
              tokenType: non-fungible
              decimals: ''
              changeSupply: true
              enableAdmin: true
              enableFreeze: true
              enableKYC: true
              enableWipe: true
              templateTokenTag: token_template_0
          type: array
          items:
            type: object
        policyGroups:
          example:
            - name: Group name
              creator: Registrant
              groupAccessType: Private
              groupRelationshipType: Multiple
              members:
                - Registrant
          type: array
          items:
            type: object
        categories:
          type: array
          items:
            type: string
        projectSchema:
          type: string
          example: 00000000-0000-0000-0000-000000000000
      required:
        - id
        - uuid
        - name
        - description
        - topicDescription
        - policyTag
        - status
        - creator
        - owner
        - topicId
        - messageId
        - codeVersion
        - createDate
        - version
        - config
        - userRole
        - userRoles
        - userGroup
        - userGroups
        - policyRoles
        - policyNavigation
        - policyTopics
        - policyTokens
        - policyGroups
        - categories
        - projectSchema
    AggregatedDTOItem:
      type: object
      properties:
        did:
          type: string
        hederaAccountId:
          type: string
        vcDocument:
          $ref: '#/components/schemas/VcDocumentDTO'
        policies:
          $ref: '#/components/schemas/PolicyDTO'
      required:
        - did
        - hederaAccountId
        - vcDocument
        - policies
    UserDTO:
      type: object
      properties:
        username:
          type: string
          example: username
        role:
          type: string
          enum: &ref_35
            - STANDARD_REGISTRY
            - USER
            - AUDITOR
          example: USER
        permissionsGroup:
          example: &ref_36
            - {}
          type: array
          items:
            type: string
        permissions:
          example: &ref_37
            - POLICIES_POLICY_READ
          type: array
          items:
            type: string
        did:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        parent:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        hederaAccountId:
          type: string
          example: 0.0.1
      required:
        - username
        - role
        - permissions
    BalanceResponseDTO:
      type: object
      properties:
        balance:
          type: number
        unit:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'
      required:
        - balance
        - unit
        - user
    FilterSearchPoliciesDTO:
      type: object
      properties:
        policyId:
          type: string
          example: '000000000000000000000001'
        type:
          type: string
          enum:
            - Owned
            - Local
            - Global
          example: Local
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        minVcCount:
          type: number
          example: 0
        minVpCount:
          type: number
          example: 0
        minTokensCount:
          type: number
          example: 0
        text:
          type: string
          example: Policy name
        threshold:
          type: number
          minimum: 0
          maximum: 100
          example: 0
    SearchPolicyDTO:
      type: object
      properties:
        type:
          type: string
          enum:
            - Local
            - Global
          example: Local
        id:
          type: string
          example: '000000000000000000000001'
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Policy name
        description:
          type: string
          example: Policy description
        version:
          type: string
          example: 1.0.0
        status:
          type: string
          enum:
            - DRY-RUN
            - DRAFT
            - PUBLISH_ERROR
            - PUBLISH
            - DISCONTINUED
          example: DRAFT
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        tags:
          example: Tag
          type: array
          items:
            type: object
        vcCount:
          type: number
          example: 0
        vpCount:
          type: number
          example: 0
        tokensCount:
          type: number
          example: 0
        rate:
          type: number
          example: 0
    SearchPoliciesDTO:
      type: object
      properties:
        target:
          type: object
        result:
          type: array
          items:
            $ref: '#/components/schemas/SearchPolicyDTO'
      required:
        - result
    CompareFileDTO:
      type: object
      properties:
        id:
          type: string
          description: File ID
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          description: File Name
          example: File Name
        value:
          type: string
          description: Buffer
          example: base64...
      required:
        - id
        - name
        - value
    FilterPolicyDTO:
      type: object
      properties:
        type:
          type: string
          description: Identifier type
          enum:
            - id
            - message
            - file
          example: id
        value:
          oneOf:
            - type: string
              description: Policy ID
            - type: string
              description: Policy Message ID
            - $ref: '#/components/schemas/CompareFileDTO'
              description: Policy File
          example: '000000000000000000000001'
      required:
        - type
        - value
    FilterPoliciesDTO:
      type: object
      properties:
        idLvl:
          oneOf: &ref_27
            - type: string
            - type: number
          enum: &ref_28
            - 0
            - 1
          example: 0
        eventsLvl:
          oneOf: &ref_29
            - type: string
            - type: number
          enum: &ref_30
            - 0
            - 1
          example: 0
        propLvl:
          oneOf: &ref_31
            - type: string
            - type: number
          enum: &ref_32
            - 0
            - 1
            - 2
          example: 0
        childrenLvl:
          oneOf: &ref_33
            - type: string
            - type: number
          enum: &ref_34
            - 0
            - 1
            - 2
          example: 0
        policyId1:
          type: string
          example: '000000000000000000000001'
        policyId2:
          type: string
          example: '000000000000000000000001'
        policyIds:
          example:
            - '000000000000000000000001'
            - '000000000000000000000001'
          type: array
          items:
            type: string
        policies:
          example:
            - type: id
              value: '000000000000000000000001'
            - type: message
              value: '0000000000.000000001'
            - type: file
              value:
                id: 00000000-0000-0000-0000-000000000000
                name: File Name
                value: base64...
          type: array
          items:
            $ref: '#/components/schemas/FilterPolicyDTO'
    ComparePoliciesDTO:
      type: object
      properties:
        blocks:
          type: object
        groups:
          type: object
        left:
          type: object
        right:
          type: object
        roles:
          type: object
        tokens:
          type: object
        topics:
          type: object
        total:
          type: object
      required:
        - blocks
        - groups
        - left
        - right
        - roles
        - tokens
        - topics
        - total
    FilterModulesDTO:
      type: object
      properties:
        idLvl:
          oneOf: *ref_27
          enum: *ref_28
          example: 0
        eventsLvl:
          oneOf: *ref_29
          enum: *ref_30
          example: 0
        propLvl:
          oneOf: *ref_31
          enum: *ref_32
          example: 0
        childrenLvl:
          oneOf: *ref_33
          enum: *ref_34
          example: 0
        moduleId1:
          type: string
          example: '000000000000000000000001'
        moduleId2:
          type: string
          example: '000000000000000000000001'
      required:
        - moduleId1
        - moduleId2
    CompareModulesDTO:
      type: object
      properties:
        blocks:
          type: object
        left:
          type: object
        right:
          type: object
        inputEvents:
          type: object
        outputEvents:
          type: object
        variables:
          type: object
        total:
          type: object
      required:
        - blocks
        - left
        - right
        - inputEvents
        - outputEvents
        - variables
        - total
    FilterSchemaDTO:
      type: object
      properties:
        type:
          type: string
          description: Identifier type
          enum:
            - id
            - policy-message
            - policy-file
          example: id
        value:
          type: string
          description: Schema ID
          example: '000000000000000000000001'
        policy:
          oneOf:
            - description: Policy Message ID
              type: string
            - $ref: '#/components/schemas/CompareFileDTO'
              description: Policy File
          example: '000000000000000000000001'
      required:
        - type
        - value
    FilterSchemasDTO:
      type: object
      properties:
        schemaId1:
          type: string
          example: '000000000000000000000001'
        schemaId2:
          type: string
          example: '000000000000000000000001'
        schemas:
          example:
            - type: id
              value: '000000000000000000000001'
            - type: policy-message
              value: 00000000-0000-0000-0000-000000000000
              policy: '0000000000.000000001'
            - type: policy-file
              value: 00000000-0000-0000-0000-000000000000
              policy:
                id: 00000000-0000-0000-0000-000000000000
                name: File Name
                value: base64...
          type: array
          items:
            $ref: '#/components/schemas/FilterSchemaDTO'
        idLvl:
          oneOf:
            - type: string
            - type: number
          enum:
            - 0
            - 1
          example: 0
    CompareSchemasDTO:
      type: object
      properties:
        fields:
          type: object
        left:
          type: object
        right:
          type: object
        total:
          type: object
      required:
        - fields
        - left
        - right
        - total
    FilterDocumentsDTO:
      type: object
      properties:
        idLvl:
          oneOf: *ref_27
          enum: *ref_28
          example: 0
        eventsLvl:
          oneOf: *ref_29
          enum: *ref_30
          example: 0
        propLvl:
          oneOf: *ref_31
          enum: *ref_32
          example: 0
        childrenLvl:
          oneOf: *ref_33
          enum: *ref_34
          example: 0
        documentId1:
          type: string
          example: '000000000000000000000001'
        documentId2:
          type: string
          example: '000000000000000000000001'
        documentIds:
          example:
            - '000000000000000000000001'
            - '000000000000000000000001'
          type: array
          items:
            type: string
    CompareDocumentsDTO:
      type: object
      properties:
        documents:
          type: object
        left:
          type: object
        right:
          type: object
        total:
          type: object
      required:
        - documents
        - left
        - right
        - total
    FilterToolsDTO:
      type: object
      properties:
        idLvl:
          oneOf: *ref_27
          enum: *ref_28
          example: 0
        eventsLvl:
          oneOf: *ref_29
          enum: *ref_30
          example: 0
        propLvl:
          oneOf: *ref_31
          enum: *ref_32
          example: 0
        childrenLvl:
          oneOf: *ref_33
          enum: *ref_34
          example: 0
        toolId1:
          type: string
          example: '000000000000000000000001'
        toolId2:
          type: string
          example: '000000000000000000000001'
        toolIds:
          example:
            - '000000000000000000000001'
            - '000000000000000000000001'
          type: array
          items:
            type: string
    CompareToolsDTO:
      type: object
      properties:
        blocks:
          type: object
        left:
          type: object
        right:
          type: object
        inputEvents:
          type: object
        outputEvents:
          type: object
        variables:
          type: object
        total:
          type: object
      required:
        - blocks
        - left
        - right
        - inputEvents
        - outputEvents
        - variables
        - total
    FilterSearchBlocksDTO:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        config:
          type: object
      required:
        - id
        - config
    SearchBlocksDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: string
        owner:
          type: string
        topicId:
          type: string
        messageId:
          type: string
        hash:
          type: string
        chains:
          type: object
      required:
        - name
        - description
        - version
        - owner
        - topicId
        - messageId
        - hash
        - chains
    ArtifactDTOItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uuid:
          type: string
        extention:
          type: string
        type:
          type: string
      required:
        - id
        - name
        - uuid
        - extention
        - type
    ContractDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        description:
          type: string
        owner:
          type: string
        permissions:
          type: number
        topicId:
          type: string
        type:
          type: string
          enum:
            - WIPE
            - RETIRE
        syncRequestsDate:
          format: date-time
          type: string
        syncPoolsDate:
          format: date-time
          type: string
        lastSyncEventTimeStamp:
          type: string
        wipeContractIds:
          type: array
          items:
            type: string
      required:
        - id
        - contractId
        - description
        - owner
        - permissions
        - topicId
        - type
        - syncRequestsDate
        - syncPoolsDate
        - lastSyncEventTimeStamp
        - wipeContractIds
    ContractConfigDTO:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
      required:
        - type
        - description
    WiperRequestDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        user:
          type: string
      required:
        - id
        - contractId
        - user
    RetireRequestDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        tokens:
          type: object
          properties:
            token:
              type: string
            count:
              type: number
            serials:
              type: array
              items:
                type: number
            decimals:
              type: number
            type:
              enum:
                - non-fungible
                - fungible
            tokenSymbol:
              type: string
        tokenIds:
          type: array
          items:
            type: string
        user:
          type: string
      required:
        - id
        - contractId
        - tokens
        - tokenIds
        - user
    Date:
      type: object
      properties: {}
    RetirePoolDTO:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: string
        tokens:
          type: object
          properties:
            token:
              type: string
            contract:
              type: string
            count:
              type: number
            decimals:
              type: number
            type:
              enum:
                - non-fungible
                - fungible
            tokenSymbol:
              type: string
        tokenIds:
          type: array
          items:
            type: string
        immediately:
          type: boolean
        enabled:
          type: boolean
      required:
        - id
        - contractId
        - tokens
        - tokenIds
        - immediately
        - enabled
    RetirePoolTokenDTO:
      type: object
      properties:
        token:
          type: string
        count:
          type: number
      required:
        - token
        - count
    RetireRequestTokenDTO:
      type: object
      properties:
        token:
          type: string
        count:
          type: number
        serials:
          type: array
          items:
            type: string
      required:
        - token
        - count
        - serials
    RegisteredUsersDTO:
      type: object
      properties:
        username:
          type: string
        did:
          type: string
        parent:
          type: string
        role:
          type: string
        policyRoles:
          type: array
          items:
            type: string
      required:
        - username
        - did
        - parent
        - role
        - policyRoles
    TaskDTO:
      type: object
      properties:
        taskId:
          type: string
          description: Task Id
          example: 00000000-0000-0000-0000-000000000000
        expectation:
          type: number
          description: Expected count of task phases
          example: 0
      required:
        - taskId
        - expectation
    VCDocumentDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        '@context':
          type: array
          items:
            type: string
        type:
          type: array
          items:
            type: string
        credentialSubject:
          type: array
          items:
            type: object
        issuer:
          type: object
        issuanceDate:
          type: string
        proof:
          type: object
          nullable: true
      required:
        - id
        - '@context'
        - type
        - credentialSubject
        - issuer
        - issuanceDate
        - proof
    ExternalDocumentDTO:
      type: object
      properties:
        owner:
          type: string
        policyTag:
          type: string
        document:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/VCDocumentDTO'
      required:
        - owner
        - policyTag
        - document
    LogFilterDTO:
      type: object
      properties:
        type:
          type: string
          nullable: true
        startDate:
          type: string
          nullable: true
        endDate:
          type: string
          nullable: true
        attributes:
          nullable: true
          type: array
          items:
            type: string
        message:
          type: string
          nullable: true
        pageSize:
          type: number
          nullable: true
        pageIndex:
          type: number
          nullable: true
        sortDirection:
          type: string
          nullable: true
      required:
        - type
        - startDate
        - endDate
        - attributes
        - message
        - pageSize
        - pageIndex
        - sortDirection
    LogResultDTO:
      type: object
      properties:
        totalCount:
          type: number
        logs:
          type: array
          items:
            type: object
      required:
        - totalCount
        - logs
    ModuleDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        uuid:
          type: string
          nullable: false
        type:
          type: string
          nullable: false
        name:
          type: string
          nullable: false
        description:
          type: string
          nullable: false
        status:
          type: string
          nullable: false
        creator:
          type: string
          nullable: false
        owner:
          type: string
          nullable: false
        topicId:
          type: string
          nullable: false
        messageId:
          type: string
          nullable: false
        codeVersion:
          type: string
          nullable: false
        createDate:
          type: string
          nullable: false
        config:
          type: object
          nullable: true
      required:
        - id
        - uuid
        - type
        - name
        - description
        - status
        - creator
        - owner
        - topicId
        - messageId
        - codeVersion
        - createDate
        - config
    SchemaDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Schema name
        description:
          type: string
          example: Description
        entity:
          type: string
          enum:
            - NONE
            - VC
            - EVC
            - STANDARD_REGISTRY
            - USER
            - POLICY
            - MINT_TOKEN
            - RETIRE
            - WIPE_TOKEN
            - MINT_NFTOKEN
            - ISSUER
            - USER_ROLE
            - CHUNK
            - ACTIVITY_IMPACT
            - TOKEN_DATA_SOURCE
            - ROLE
            - USER_PERMISSIONS
          example: POLICY
        iri:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - UNPUBLISHED
            - ERROR
          example: DRAFT
        topicId:
          type: string
          example: 0.0.1
        version:
          type: string
          example: 1.0.0
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        messageId:
          type: string
          example: '0000000000.000000001'
        category:
          type: string
          enum:
            - POLICY
            - MODULE
            - SYSTEM
            - TAG
            - TOOL
          example: POLICY
        documentURL:
          type: string
          example: ipfs://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        contextURL:
          type: string
          example: ipfs://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        document:
          type: object
        context:
          type: object
      required:
        - id
        - uuid
        - name
        - description
        - entity
        - iri
        - status
        - topicId
        - version
        - owner
        - messageId
        - category
        - documentURL
        - contextURL
        - document
        - context
    ExportMessageDTO:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        messageId:
          type: string
        owner:
          type: string
      required:
        - uuid
        - name
        - description
        - messageId
        - owner
    ImportMessageDTO:
      type: object
      properties:
        messageId:
          type: string
        metadata:
          type: object
          nullable: true
      required:
        - messageId
        - metadata
    ModulePreviewDTO:
      type: object
      properties:
        module:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ModuleDTO'
        messageId:
          type: string
        schemas:
          nullable: true
          type: array
          items:
            type: object
        tags:
          nullable: true
          type: array
          items:
            type: object
        moduleTopicId:
          type: string
          nullable: true
      required:
        - module
        - messageId
        - schemas
        - tags
        - moduleTopicId
    BlockErrorsDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        errors:
          type: array
          items:
            type: string
        isValid:
          type: boolean
      required:
        - id
        - name
        - errors
        - isValid
    ValidationErrorsDTO:
      type: object
      properties:
        blocks:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/BlockErrorsDTO'
        errors:
          nullable: true
          type: array
          items:
            type: string
      required:
        - blocks
        - errors
    ModuleValidationDTO:
      type: object
      properties:
        module:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ModuleDTO'
        results:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - module
        - results
    BlockDTO:
      type: object
      properties:
        id:
          type: string
        blockType:
          type: string
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockDTO'
      required:
        - id
        - blockType
        - blocks
    ToolDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tool name
        description:
          type: string
          example: Description
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - PUBLISH_ERROR
          example: NEW
        creator:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        codeVersion:
          type: string
          example: 1.0.0
        createDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        config:
          $ref: '#/components/schemas/BlockDTO'
      required:
        - id
        - uuid
        - name
        - description
        - status
        - creator
        - owner
        - topicId
        - messageId
        - codeVersion
        - createDate
        - config
    ToolValidationDTO:
      type: object
      properties:
        tool:
          $ref: '#/components/schemas/ToolDTO'
        results:
          $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - tool
        - results
    ToolPreviewDTO:
      type: object
      properties:
        tool:
          $ref: '#/components/schemas/ToolDTO'
        schemas:
          type: array
          items:
            type: object
        tags:
          type: array
          items:
            type: object
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ToolDTO'
      required:
        - tool
        - schemas
        - tags
        - tools
    ProfileDTO:
      type: object
      properties:
        username:
          type: string
          example: username
        role:
          type: string
          enum: *ref_35
          example: USER
        permissionsGroup:
          example: *ref_36
          type: array
          items:
            type: string
        permissions:
          example: *ref_37
          type: array
          items:
            type: string
        did:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        parent:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        hederaAccountId:
          type: string
          example: 0.0.1
        confirmed:
          type: boolean
          example: true
        failed:
          type: boolean
          example: true
        topicId:
          type: string
          example: 0.0.1
        parentTopicId:
          type: string
          example: 0.0.1
        didDocument:
          type: object
          nullable: true
        vcDocument:
          type: object
          nullable: true
      required:
        - username
        - role
        - permissions
    SubjectDTO:
      type: object
      properties:
        '@context':
          nullable: true
          type: array
          items:
            type: string
        id:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
      required:
        - '@context'
    DidDocumentDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        context:
          nullable: true
          type: array
          items:
            type: string
        alsoKnownAs:
          nullable: true
          type: array
          items:
            type: string
        controller:
          nullable: true
          type: array
          items:
            type: string
        verificationMethod:
          nullable: true
          type: array
          items:
            type: object
        authentication:
          nullable: true
          type: array
          items:
            type: object
        assertionMethod:
          nullable: true
          type: array
          items:
            type: object
        keyAgreement:
          nullable: true
          type: array
          items:
            type: object
        capabilityInvocation:
          nullable: true
          type: array
          items:
            type: object
        capabilityDelegation:
          nullable: true
          type: array
          items:
            type: object
        service:
          nullable: true
          type: array
          items:
            type: object
      required:
        - id
        - context
        - alsoKnownAs
        - controller
        - verificationMethod
        - authentication
        - assertionMethod
        - keyAgreement
        - capabilityInvocation
        - capabilityDelegation
        - service
    DidKeyDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        key:
          type: string
          nullable: false
      required:
        - id
        - key
    CredentialsDTO:
      type: object
      properties:
        entity:
          type: string
          nullable: false
        hederaAccountId:
          type: string
          nullable: false
        hederaAccountKey:
          type: string
          nullable: false
        parent:
          type: string
          nullable: true
        vcDocument:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/SubjectDTO'
        didDocument:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/DidDocumentDTO'
        didKeys:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/DidKeyDTO'
      required:
        - entity
        - hederaAccountId
        - hederaAccountKey
    DidDocumentStatusDTO:
      type: object
      properties:
        valid:
          type: boolean
          nullable: false
        error:
          type: string
          nullable: true
        didDocument:
          type: object
          nullable: false
      required:
        - valid
        - error
        - didDocument
    DidKeyStatusDTO:
      type: object
      properties:
        id:
          type: string
          nullable: false
        key:
          type: string
          nullable: false
        valid:
          type: boolean
          nullable: false
      required:
        - id
        - key
        - valid
    DidDocumentWithKeyDTO:
      type: object
      properties:
        document:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/DidDocumentDTO'
        keys:
          nullable: false
          type: array
          items:
            $ref: '#/components/schemas/DidKeyDTO'
      required:
        - document
        - keys
    MigrationConfigPoliciesDTO:
      type: object
      properties:
        src:
          type: string
        dst:
          type: string
      required:
        - src
        - dst
    MigrationConfigDTO:
      type: object
      properties:
        policies:
          $ref: '#/components/schemas/MigrationConfigPoliciesDTO'
        vcs:
          type: array
          items:
            type: string
        vps:
          type: array
          items:
            type: string
        schemas:
          type: object
        groups:
          type: object
        roles:
          type: object
        blocks:
          type: object
        tokens:
          type: object
        migrateState:
          type: boolean
        migrateRetirePools:
          type: boolean
        editedVCs:
          type: object
        retireContractId:
          type: string
      required:
        - policies
        - vcs
        - vps
        - schemas
        - groups
        - roles
        - blocks
        - tokens
        - migrateState
        - migrateRetirePools
        - editedVCs
        - retireContractId
    PoliciesValidationDTO:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyDTO'
        isValid:
          type: string
        errors:
          $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - policies
        - isValid
        - errors
    PolicyValidationDTO:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/PolicyDTO'
        results:
          $ref: '#/components/schemas/ValidationErrorsDTO'
      required:
        - policy
        - results
    Object:
      type: object
      properties: {}
    PolicyPreviewDTO:
      type: object
      properties:
        module:
          $ref: '#/components/schemas/PolicyDTO'
        messageId:
          type: string
          example: '0000000000.000000001'
        schemas:
          type: array
          items:
            type: object
        tags:
          type: array
          items:
            type: object
        moduleTopicId:
          type: string
          example: 0.0.1
      required:
        - module
        - messageId
        - schemas
        - tags
        - moduleTopicId
    PolicyCategoryDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        name:
          type: string
          example: Large-Scale
        type:
          type: string
          example: PROJECT_SCALE
      required:
        - id
        - name
        - type
    VersionSchemaDTO:
      type: object
      properties:
        version:
          type: string
          example: 1.0.0
      required:
        - version
    MessageSchemaDTO:
      type: object
      properties:
        messageId:
          type: string
          example: '0000000000.000000001'
      required:
        - messageId
    ExportSchemaDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        name:
          type: string
          example: Schema name
        description:
          type: string
          example: Description
        version:
          type: string
          example: 1.0.0
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        messageId:
          type: string
          example: '0000000000.000000001'
      required:
        - id
        - name
        - description
        - version
        - owner
        - messageId
    SystemSchemaDTO:
      type: object
      properties:
        name:
          type: string
          example: Schema name
        entity:
          type: string
          enum:
            - STANDARD_REGISTRY
            - USER
          example: STANDARD_REGISTRY
      required:
        - name
        - entity
    SettingsDTO:
      type: object
      properties:
        ipfsStorageApiKey:
          type: string
        operatorId:
          type: string
        operatorKey:
          type: string
      required:
        - ipfsStorageApiKey
        - operatorId
        - operatorKey
    TagDTO:
      type: object
      properties:
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Tag label
        description:
          type: string
          example: Description
        owner:
          type: string
          example: DID
        date:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        status:
          type: string
          enum:
            - Draft
            - Published
            - History
          example: Published
        operation:
          type: string
          enum:
            - Create
            - Delete
          example: Create
        topicId:
          type: string
          example: 0.0.1
        messageId:
          type: string
          example: '0000000000.000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        uri:
          type: string
          example: ipfs://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        target:
          type: string
          example: '0000000000.000000001'
        localTarget:
          type: string
          example: '000000000000000000000001'
        document:
          type: object
      required:
        - uuid
        - name
        - description
        - owner
        - date
        - entity
        - status
        - operation
        - topicId
        - messageId
        - policyId
        - uri
        - target
        - localTarget
        - document
    TagFilterDTO:
      type: object
      properties:
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        target:
          type: string
          example: '0000000000.000000001'
        targets:
          example: '0000000000.000000001'
          type: array
          items:
            type: string
      required:
        - entity
        - target
        - targets
    TagMapDTO:
      type: object
      properties:
        entity:
          type: string
          enum:
            - Schema
            - Policy
            - Token
            - Module
            - Contract
            - PolicyDocument
          example: PolicyDocument
        target:
          type: string
          example: '0000000000.000000001'
        refreshDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagDTO'
      required:
        - entity
        - target
        - refreshDate
        - tags
    StatusDTO:
      type: object
      properties:
        message:
          type: string
          description: Text
        type:
          type: string
          description: Type
          enum:
            - Processing
            - Completed
            - Info
          example: Info
      required:
        - message
        - type
    TaskStatusDTO:
      type: object
      properties:
        action:
          type: string
          description: Task type
          example: Create policy
        userId:
          type: string
          description: User Id
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        expectation:
          type: number
          description: Expected count of task phases
          example: 0
        taskId:
          type: string
          description: Task Id
          example: 00000000-0000-0000-0000-000000000000
        date:
          type: string
          description: Date
          example: '1900-01-01T00:00:00.000Z'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/StatusDTO'
        result:
          type: object
        error:
          type: object
      required:
        - action
        - userId
        - expectation
        - taskId
        - date
        - statuses
        - result
        - error
    TokenDTO:
      type: object
      properties:
        tokenId:
          type: string
          example: 0.0.1
        tokenName:
          type: string
          example: Token name
        tokenSymbol:
          type: string
          example: Token symbol
        tokenType:
          type: string
          enum:
            - fungible
            - non-fungible
          example: non-fungible
        initialSupply:
          type: string
          example: '0'
        decimals:
          type: string
          example: '0'
        changeSupply:
          type: boolean
          description: Add Supply key
          example: true
        enableAdmin:
          type: boolean
          description: Add Admin key
          example: true
        enableFreeze:
          type: boolean
          description: Add Freeze key
          example: true
        enableKYC:
          type: boolean
          description: Add KYC key
          example: true
        enableWipe:
          type: boolean
          description: Add Wipe key
          example: true
      required:
        - tokenId
        - tokenName
        - tokenSymbol
        - tokenType
        - initialSupply
        - decimals
        - changeSupply
        - enableAdmin
        - enableFreeze
        - enableKYC
        - enableWipe
    TokenInfoDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        tokenId:
          type: string
          example: 0.0.1
        tokenName:
          type: string
          example: Token name
        tokenSymbol:
          type: string
          example: Token symbol
        tokenType:
          type: string
          enum:
            - fungible
            - non-fungible
          example: non-fungible
        decimals:
          type: string
          example: '0'
        associated:
          type: boolean
          description: ''
          example: true
        frozen:
          type: boolean
          description: ''
          example: true
        kyc:
          type: boolean
          description: ''
          example: true
        balance:
          type: string
          description: User balance
          example: '0'
        enableAdmin:
          type: boolean
          description: There is an Admin key
          example: true
        enableFreeze:
          type: boolean
          description: There is an Freeze key
          example: true
        enableKYC:
          type: boolean
          description: There is an KYC key
          example: true
        enableWipe:
          type: boolean
          description: There is an Wipe key
          example: true
      required:
        - id
        - tokenId
        - tokenName
        - tokenSymbol
        - tokenType
        - decimals
        - associated
        - frozen
        - kyc
        - balance
        - enableAdmin
        - enableFreeze
        - enableKYC
        - enableWipe
    ThemeRoleDTO:
      type: object
      properties:
        description:
          type: string
          example: Description
        text:
          type: string
          description: Text color
          pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
          example: '#000000'
        background:
          type: string
          description: Background color
          pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
          example: '#000000'
        border:
          type: string
          description: Border color
          pattern: (^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{8}$)
          example: '#000000'
        shape:
          type: string
          description: Object shape
          enum:
            - '0'
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
          example: '0'
        borderWidth:
          type: string
          description: Border width
          enum:
            - 0px
            - 1px
            - 2px
            - 3px
            - 4px
            - 5px
            - 6px
            - 7px
          example: 2px
        filterType:
          type: string
          description: Filter by type
          enum:
            - type
            - api
            - role
          example: type
        filterValue:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
      required:
        - description
        - text
        - background
        - border
        - shape
        - borderWidth
        - filterType
        - filterValue
    ThemeDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Theme name
        rules:
          type: array
          items:
            $ref: '#/components/schemas/ThemeRoleDTO'
      required:
        - id
        - uuid
        - name
        - rules
    VpDTO:
      type: object
      properties:
        '@context':
          type: array
          items:
            type: string
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        type:
          type: array
          items:
            type: string
        verifiableCredential:
          type: array
          items:
            type: object
        proof:
          type: object
      required:
        - '@context'
        - id
        - type
        - verifiableCredential
        - proof
    VpDocumentDTO:
      type: object
      properties:
        id:
          type: string
          example: '000000000000000000000001'
        policyId:
          type: string
          example: '000000000000000000000001'
        hash:
          type: string
          example: hash
        signature:
          type: number
          example: 0
        status:
          type: string
          enum:
            - NEW
            - ISSUE
            - REVOKE
            - SUSPEND
            - RESUME
            - FAILED
          example: NEW
        tag:
          type: string
          example: Block tag
        type:
          type: string
          example: Document type
        createDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        updateDate:
          type: string
          example: '1900-01-01T00:00:00.000Z'
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        document:
          $ref: '#/components/schemas/VpDTO'
      required:
        - id
        - policyId
        - hash
        - signature
        - status
        - tag
        - type
        - createDate
        - updateDate
        - owner
        - document
    WizardConfigDTO:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
        policy:
          type: string
          properties:
            name:
              type: string
            description:
              type: string
            topicDescription:
              type: string
            policyTag:
              type: string
        schemas:
          properties:
            name:
              type: string
            iri:
              type: string
            isApproveEnable:
              type: boolean
            isMintSchema:
              type: boolean
            mintOptions:
              type: object
              properties:
                tokenId:
                  type: string
                rule:
                  type: string
            dependencySchemaIri:
              type: string
            relationshipsSchemaIri:
              type: string
            initialRolesFor:
              type: array
              items:
                type: string
            rolesConfig:
              type: array
              items:
                type: object
                properties:
                  role:
                    type: string
                  isApprover:
                    type: boolean
                  isCreator:
                    type: boolean
                  gridColumns:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        title:
                          type: string
          type: array
          items:
            type: string
        trustChain:
          properties:
            role:
              type: string
            mintSchemaIri:
              type: string
            viewOnlyOwnDocuments:
              type: boolean
          type: array
          items:
            type: string
      required:
        - roles
        - policy
        - schemas
        - trustChain
    WizardResultDTO:
      type: object
      properties:
        policyId:
          type: string
        wizardConfig:
          $ref: '#/components/schemas/WizardConfigDTO'
      required:
        - policyId
        - wizardConfig
    WizardConfigAsyncDTO:
      type: object
      properties:
        saveState:
          type: boolean
        wizardConfig:
          $ref: '#/components/schemas/WizardConfigDTO'
      required:
        - saveState
        - wizardConfig
    WizardPreviewDTO:
      type: object
      properties:
        policyConfig:
          $ref: '#/components/schemas/PolicyDTO'
        wizardConfig:
          $ref: '#/components/schemas/WizardConfigDTO'
      required:
        - policyConfig
        - wizardConfig
    BrandingDTO:
      type: object
      properties:
        headerColor:
          type: string
        primaryColor:
          type: string
        companyName:
          type: string
        companyLogoUrl:
          type: string
        loginBannerUrl:
          type: string
        faviconUrl:
          type: string
        headerColor1:
          type: string
        termsAndConditions:
          type: string
      required:
        - headerColor
        - primaryColor
        - companyName
        - companyLogoUrl
        - loginBannerUrl
        - faviconUrl
        - headerColor1
        - termsAndConditions
    SuggestionsInputDTO:
      type: object
      properties:
        blockType:
          type: string
        children:
          nullable: true
          type: array
          items:
            type: object
      required:
        - blockType
        - children
    SuggestionsOutputDTO:
      type: object
      properties:
        next:
          type: string
        nested:
          type: string
      required:
        - next
        - nested
    SuggestionsConfigItemDTO:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - Policy
            - Module
        index:
          type: number
      required:
        - id
        - type
        - index
    SuggestionsConfigDTO:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/SuggestionsConfigItemDTO'
      required:
        - items
    NotificationDTO:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum:
            - INFO
            - ERROR
            - WARN
            - SUCCESS
        action:
          type: string
          enum:
            - POLICY_CONFIGURATION
            - POLICY_VIEW
            - POLICIES_PAGE
            - SCHEMAS_PAGE
            - TOKENS_PAGE
            - PROFILE_PAGE
        result:
          type: object
        read:
          type: boolean
        old:
          type: boolean
      required:
        - title
        - message
        - type
        - action
        - result
        - read
        - old
    ProgressDTO:
      type: object
      properties:
        action:
          type: string
        message:
          type: string
        progress:
          type: number
        type:
          type: string
          enum:
            - INFO
            - ERROR
            - WARN
            - SUCCESS
        taskId:
          type: string
      required:
        - action
        - message
        - progress
        - type
        - taskId
    ProjectDTO:
      type: object
      properties:
        id:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        registered:
          type: string
        title:
          type: string
        companyName:
          type: string
        sectoralScope:
          type: string
      required:
        - id
        - policyId
        - policyName
        - registered
        - title
        - companyName
        - sectoralScope
    CompareDocumentsV2DTO:
      type: object
      properties:
        projects:
          $ref: '#/components/schemas/CompareDocumentsDTO'
        presentations:
          $ref: '#/components/schemas/CompareDocumentsDTO'
      required:
        - projects
        - presentations
    PropertiesDTO:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        value:
          type: string
      required:
        - id
        - title
        - value
    RecordStatusDTO:
      type: object
      properties:
        type:
          type: string
        policyId:
          type: string
        uuid:
          type: string
        status:
          type: string
      required:
        - type
        - policyId
        - uuid
        - status
    RecordActionDTO:
      type: object
      properties:
        uuid:
          type: string
        policyId:
          type: string
        method:
          type: string
        action:
          type: string
        time:
          type: string
        user:
          type: string
        target:
          type: string
      required:
        - uuid
        - policyId
        - method
        - action
        - time
        - user
        - target
    ResultInfoDTO:
      type: object
      properties:
        tokens:
          type: number
        documents:
          type: number
      required:
        - tokens
        - documents
    ResultDocumentDTO:
      type: object
      properties:
        type:
          type: string
        schema:
          type: string
        rate:
          type: string
        documents:
          type: object
      required:
        - type
        - schema
        - rate
        - documents
    RunningResultDTO:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/ResultInfoDTO'
        total:
          type: number
        documents:
          $ref: '#/components/schemas/ResultDocumentDTO'
      required:
        - info
        - total
        - documents
    RunningDetailsDTO:
      type: object
      properties:
        left:
          type: object
        right:
          type: object
        total:
          type: number
        documents:
          type: object
      required:
        - left
        - right
        - total
        - documents
    RoleDTO:
      type: object
      properties:
        uuid:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Name
        description:
          type: string
          example: Description
        owner:
          type: string
          example: >-
            #did:hedera:testnet:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA_0.0.0000001
        permissions:
          type: string
          enum: &ref_38
            - ANALYTIC_POLICY_READ
            - ANALYTIC_MODULE_READ
            - ANALYTIC_TOOL_READ
            - ANALYTIC_SCHEMA_READ
            - ANALYTIC_DOCUMENT_READ
            - ARTIFACTS_FILE_READ
            - ARTIFACTS_FILE_CREATE
            - ARTIFACTS_FILE_DELETE
            - CONTRACTS_CONTRACT_READ
            - CONTRACTS_CONTRACT_EXECUTE
            - CONTRACTS_CONTRACT_MANAGE
            - MODULES_MODULE_READ
            - MODULES_MODULE_CREATE
            - MODULES_MODULE_UPDATE
            - MODULES_MODULE_DELETE
            - MODULES_MODULE_REVIEW
            - POLICIES_POLICY_READ
            - POLICIES_POLICY_CREATE
            - POLICIES_POLICY_UPDATE
            - POLICIES_POLICY_DELETE
            - POLICIES_POLICY_REVIEW
            - POLICIES_POLICY_EXECUTE
            - POLICIES_POLICY_MANAGE
            - SCHEMAS_SCHEMA_READ
            - SCHEMAS_SCHEMA_CREATE
            - SCHEMAS_SCHEMA_UPDATE
            - SCHEMAS_SCHEMA_DELETE
            - SCHEMAS_SCHEMA_REVIEW
            - TOOLS_TOOL_READ
            - TOOLS_TOOL_CREATE
            - TOOLS_TOOL_UPDATE
            - TOOLS_TOOL_DELETE
            - TOOLS_TOOL_REVIEW
            - TOKENS_TOKEN_READ
            - TOKENS_TOKEN_CREATE
            - TOKENS_TOKEN_UPDATE
            - TOKENS_TOKEN_DELETE
            - TOKENS_TOKEN_EXECUTE
            - TOKENS_TOKEN_MANAGE
            - TAGS_TAG_READ
            - TAGS_TAG_CREATE
            - SUGGESTIONS_SUGGESTIONS_READ
            - SUGGESTIONS_SUGGESTIONS_UPDATE
            - PERMISSIONS_ROLE_READ
            - PERMISSIONS_ROLE_CREATE
            - PERMISSIONS_ROLE_UPDATE
            - PERMISSIONS_ROLE_DELETE
            - PERMISSIONS_ROLE_MANAGE
            - ACCESS_POLICY_ALL
            - ACCESS_POLICY_ASSIGNED
            - ACCESS_POLICY_PUBLISHED
            - ACCESS_POLICY_ASSIGNED_AND_PUBLISHED
            - DELEGATION_ROLE_MANAGE
          example:
            - POLICIES_POLICY_READ
      required:
        - uuid
        - name
        - description
        - owner
        - permissions
    PermissionsDTO:
      type: object
      properties:
        name:
          type: string
          enum: *ref_38
          example: ANALYTIC_POLICY_READ
        category:
          type: string
          enum:
            - ACCOUNTS
            - SESSION
            - PROFILES
            - ANALYTIC
            - ARTIFACTS
            - POLICIES
            - BRANDING
            - CONTRACTS
            - DEMO
            - IPFS
            - LOG
            - MODULES
            - SETTINGS
            - SUGGESTIONS
            - TAGS
            - SCHEMAS
            - TOKENS
            - AUDIT
            - TOOLS
            - PERMISSIONS
            - ACCESS
            - DELEGATION
          example: ANALYTIC
        entity:
          type: string
          enum:
            - ACCOUNT
            - STANDARD_REGISTRY
            - USER
            - BALANCE
            - RESTORE
            - RECORD
            - POLICY
            - TOOL
            - DOCUMENT
            - SCHEMA
            - MODULE
            - FILE
            - CONFIG
            - CONTRACT
            - WIPE_REQUEST
            - WIPE_ADMIN
            - WIPE_MANAGER
            - WIPER
            - POOL
            - RETIRE_REQUEST
            - RETIRE_ADMIN
            - PERMISSIONS
            - KEY
            - LOG
            - MIGRATION
            - SETTINGS
            - SUGGESTIONS
            - TAG
            - SYSTEM_SCHEMA
            - THEME
            - TOKEN
            - TRUST_CHAIN
            - ROLE
          example: POLICY
        action:
          type: string
          enum:
            - ALL
            - READ
            - CREATE
            - UPDATE
            - DELETE
            - REVIEW
            - AUDIT
            - EXECUTE
            - MANAGE
            - ASSIGNED
            - PUBLISHED
            - ASSIGNED_AND_PUBLISHED
          example: READ
        disabled:
          type: boolean
          example: false
        dependOn:
          example:
            - POLICIES_POLICY_READ
          type: array
          items:
            type: string
      required:
        - name
        - category
        - entity
        - action
        - disabled
        - dependOn
    AssignPolicyDTO:
      type: object
      properties:
        policyIds:
          example:
            - '000000000000000000000001'
          type: array
          items:
            type: string
        assign:
          type: boolean
          example: true
      required:
        - policyIds
        - assign
