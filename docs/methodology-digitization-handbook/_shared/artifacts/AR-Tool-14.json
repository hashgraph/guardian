{"tenantId":"6667c3f4d7c28aa950ec4416","name":"AR Tool 14(5.0.7)","description":"AR Tool 14 (Estimation of carbon stocks and change in carbon stocks of trees and shrubs in A/R CDM project activities)","creator":"did:hedera:testnet:FGikPC1ksdDz4sHfEX34nn16UxJ4mbE9n6dPdGadgiyQ_0.0.4967862","owner":"did:hedera:testnet:FGikPC1ksdDz4sHfEX34nn16UxJ4mbE9n6dPdGadgiyQ_0.0.4967862","codeVersion":"1.5.1","tagsTopicId":"0.0.6471198","tools":[],"config":{"name":"AR Tool 14(5.0.0)","description":"AR Tool 14 (Estimation of carbon stocks and change in carbon stocks of trees and shrubs in A/R CDM project activities)","id":"8ac07049-cc77-427c-b894-dfccb523f7b3","blockType":"tool","permissions":[],"tag":"Tool","children":[{"id":"b7984eab-893a-497f-ba73-3e6d4c0b7ce0","blockType":"extractDataBlock","defaultActive":false,"permissions":["Role"],"onErrorAction":"no-action","action":"get","schema":"#632fd070-d788-49ae-889b-cd281c6c7194&1.0.0","tag":"get_ar_tool_14","children":[],"events":[],"artifacts":[]},{"id":"52974f49-497d-403b-9616-829da32590fe","blockType":"customLogicBlock","defaultActive":false,"permissions":["Role"],"onErrorAction":"no-action","uiMetaData":{},"expression":"/*\n * ---------------------------------------------------------------------------\n *  FIX  – helper to stop every divide‑by‑zero crash\n * ---------------------------------------------------------------------------\n */\nfunction safeDivide(numerator, denominator) {\n    // Return 0 instead of Infinity/NaN when denominator is 0\n    return denominator === 0 ? 0 : numerator / denominator;\n}\n/*  END‑FIX   ----------------------------------------------------------------*/\n\n\nfunction sumProduct(...arrays) {\n    // Ensure all arrays have the same length\n    if (!arrays.every((arr) => arr.length === arrays[0].length)) {\n        throw new Error('All arrays must be of the same length');\n    }\n\n    let sum = 0;\n    const length = arrays[0].length; // Assumes at least one array and all are the same length\n    for (let i = 0; i < length; i++) {\n        let product = 1; // Start product as 1 for each index i\n        for (let arr of arrays) {\n            product *= arr[i];\n        }\n        sum += product; // Add the product of all array elements at index i to sum\n    }\n    return sum;\n}\n\nfunction summation(values) {\n    let total = 0;\n    for (let i = 0; i < values.length; i++) {\n        total += values[i];\n    }\n    return total;\n}\n\nfunction getDiscount(uncertainty) {\n    if (uncertainty <= 10) {\n        return 0; // 0% discount\n    } else if (uncertainty > 10 && uncertainty <= 15) {\n        return 25; // 25% discount\n    } else if (uncertainty > 15 && uncertainty <= 20) {\n        return 50; // 50% discount\n    } else if (uncertainty > 20 && uncertainty <= 30) {\n        return 75; // 75% discount\n    } else if (uncertainty > 30) {\n        return 100; // 100% discount\n    } else {\n        return null; // in case of invalid uncertainty value\n    }\n}\n\nfunction calc_cs_in_shrubs_at_a_point_of_time(document) {\n    const cs_in_shrubs_at_a_point_of_time =\n        document.cs_in_shrubs_at_a_point_of_time;\n    const shrub_biomass_per_hectare_in_shrub_biomas_variables =\n        cs_in_shrubs_at_a_point_of_time.shrub_biomass_per_hectare_in_shrub_biomas_variables;\n\n    shrub_biomass_per_hectare_in_shrub_biomas_variables.forEach(\n        (variable) => {\n            variable.b_SHRUB_i =\n                variable.BDR_SF * variable.b_FOREST * variable.CC_SHRUB_i;\n        }\n    );\n\n    const biomass_shrubs_array =\n        shrub_biomass_per_hectare_in_shrub_biomas_variables.map(\n            (variable) => variable.b_SHRUB_i\n        );\n    const shrubs_area_array =\n        shrub_biomass_per_hectare_in_shrub_biomas_variables.map(\n            (variable) => variable.A_SHRUB_i\n        );\n\n    const result =\n        (44 / 12) *\n        sumProduct(biomass_shrubs_array, shrubs_area_array) *\n        cs_in_shrubs_at_a_point_of_time.CF_s *\n        (1 + cs_in_shrubs_at_a_point_of_time.R_s);\n\n    return result;\n}\n\nfunction calc_shrub_cs_change_bwt_two_points(document) {\n    const shrub_cs_change_bwt_two_points =\n        document.shrub_cs_change_bwt_two_points;\n    return (\n        shrub_cs_change_bwt_two_points.C_SHRUB_t2 -\n        shrub_cs_change_bwt_two_points.C_SHRUB_t1\n    );\n}\n\nfunction calc_change_in_cs_in_shrubs_in_a_year(document) {\n    const change_in_cs_in_shrubs_in_a_year =\n        document.change_in_cs_in_shrubs_in_a_year;\n    /*  FIX  – protect divide by zero on T  */\n    return safeDivide(\n        change_in_cs_in_shrubs_in_a_year.C_SHRUB_t2 -\n            change_in_cs_in_shrubs_in_a_year.C_SHRUB_t1,\n        change_in_cs_in_shrubs_in_a_year.T\n    );\n}\n\nfunction calc_difference_of_two_independent_stock(\n    document,\n    scenario\n) {\n    let delta_C_tree = document.C_TREE_t2 - document.C_TREE_t1;\n    let discount = 0;\n\n    if (delta_C_tree === 0) {\n        // protect but do not crash\n        return 0;\n    }\n\n    const numerator = Math.sqrt(\n        (document.u1 * document.C_TREE_t1) ** 2 +\n        (document.u2 * document.C_TREE_t2) ** 2\n    );\n\n    const delta_u_c = safeDivide(numerator, Math.abs(delta_C_tree));\n\n    const relative_uncertainty = safeDivide(delta_u_c, delta_C_tree) * 100;\n\n    // apply discount\n    const applied_discount = getDiscount(relative_uncertainty);\n\n    if (applied_discount !== null) {\n        discount = (applied_discount * delta_u_c) / 100;\n    }\n\n    return scenario === 'Project scenario'\n        ? delta_C_tree - discount\n        : delta_C_tree + discount;\n}\n\nfunction calc_direct_estimation_change_via_sample_plot(\n    document,\n    scenario\n) {\n    let discount = 0;\n\n    const mean_change_in_tree_biomass =\n        document.mean_change_in_tree_biomass;\n\n    mean_change_in_tree_biomass.forEach((variable) => {\n        const sum = variable.delta_b_TREE_p_i.reduce(\n            (accumulator, currentValue) => {\n                return accumulator + currentValue;\n            },\n            0\n        );\n\n        const total_sample_plot = variable.delta_b_TREE_p_i.length\n\n        variable.delta_b_TREE_i = sum / total_sample_plot;\n\n        const sumOfSquares = variable.delta_b_TREE_p_i.reduce(\n            (accumulator, currentValue) => {\n                return accumulator + Math.pow(currentValue, 2);\n            },\n            0\n        );\n\n        // Step 3: Calculate the numerator\n        const numerator = total_sample_plot * sumOfSquares - Math.pow(sum, 2);\n\n        // Step 4: Calculate the denominator (n_i * (n_i - 1))\n        const denominator = total_sample_plot * (total_sample_plot - 1);\n\n        variable.S_2_delta_i = numerator / denominator;\n\n    });\n\n    const w_i_array = mean_change_in_tree_biomass.map(\n        (variable) => variable.w_i\n    );\n    const delta_b_TREE_i_array = mean_change_in_tree_biomass.map(\n        (variable) => variable.delta_b_TREE_i\n    );\n\n    document.delta_b_TREE = sumProduct(w_i_array, delta_b_TREE_i_array);\n\n    const delta_S_2_i_array = mean_change_in_tree_biomass.map(variable => variable.S_2_delta_i / variable.delta_b_TREE_p_i.length);\n    const w_2_i_array = w_i_array.map(variable => Math.pow(variable, 2));\n\n    const summationForUncertainty = sumProduct(w_2_i_array, delta_S_2_i_array);\n    const sqrtSummation = Math.sqrt(summationForUncertainty);\n\n    /*  FIX  – protect divide by zero on delta_b_TREE  */\n    document.delta_u_C =\n        safeDivide(document.t_VAL * sqrtSummation, Math.abs(document.delta_b_TREE));\n\n    document.delta_B_TREE = document.A * document.delta_b_TREE;\n\n    let delta_C_tree =\n        (44 / 12) * document.CF_TREE * document.delta_B_TREE;\n\n    /*  FIX  – protect divide by zero on delta_C_tree  */\n    const relative_uncertainty =\n        safeDivide(document.delta_u_c, delta_C_tree) * 100;\n\n    // apply discount\n    const applied_discount = getDiscount(relative_uncertainty);\n\n    if (applied_discount !== null) {\n        discount = (applied_discount * document.delta_u_c) / 100;\n    }\n\n    return scenario === 'Project scenario'\n        ? delta_C_tree - discount\n        : delta_C_tree + discount;\n}\n\nfunction calc_estimation_by_proportionate_crown_cover(document) {\n    // only for baseline scenario\n\n    const mean_annual_change_in_carbon_stock_in_baseline =\n        document.mean_annual_change_in_carbon_stock_in_baseline;\n\n    mean_annual_change_in_carbon_stock_in_baseline.forEach(\n        (variable) => {\n            variable.delta_C_TREE_BSL_i =\n                (44 / 12) *\n                document.CF_TREE *\n                document.delta_b_FOREST *\n                (1 + document.R_TREE) *\n                variable.CC_TREE_BSL_i *\n                variable.A_i;\n        }\n    );\n\n    const delta_C_TREE_BSL_i_array =\n        mean_annual_change_in_carbon_stock_in_baseline.map(\n            (variable) => variable.delta_C_TREE_BSL_i\n        );\n\n    return summation(delta_C_TREE_BSL_i_array);\n}\n\nfunction calc_change_in_cs_in_trees_in_a_year(document) {\n    /*  FIX  – protect divide by zero on T  */\n    return safeDivide(\n        document.C_TREE_t2 - document.C_TREE_t1,\n        document.T\n    );\n}\n\n\nfunction calc_stratified_random_sampling(document, scenario) {\n    let discount = 0;\n    const stratified_random_sampling_variables = document.stratified_random_sampling_variables;\n\n    stratified_random_sampling_variables.forEach((variable) => {\n        const sum = variable.b_TREE_p_i.reduce(\n            (accumulator, currentValue) => {\n                return accumulator + currentValue;\n            },\n            0\n        );\n\n        const total_sample_plot = variable.b_TREE_p_i.length\n\n        variable.b_TREE_i = sum / total_sample_plot;\n\n        const sumOfSquares = variable.b_TREE_p_i.reduce(\n            (accumulator, currentValue) => {\n                return accumulator + Math.pow(currentValue, 2);\n            },\n            0\n        );\n\n        // Step 3: Calculate the numerator\n        const numerator = total_sample_plot * sumOfSquares - Math.pow(sum, 2);\n\n        // Step 4: Calculate the denominator (n_i * (n_i - 1))\n        const denominator = total_sample_plot * (total_sample_plot - 1);\n\n        variable.S_2_i = numerator / denominator;\n    });\n\n    const w_i_array = stratified_random_sampling_variables.map(\n        (variable) => variable.w_i\n    );\n    const b_TREE_i_array = stratified_random_sampling_variables.map(\n        (variable) => variable.b_TREE_i\n    );\n\n    document.b_TREE = sumProduct(w_i_array, b_TREE_i_array);\n\n    const S_2_i_array = stratified_random_sampling_variables.map(variable => variable.S_2_i / variable.b_TREE_p_i.length);\n    const w_2_i_array = w_i_array.map(variable => Math.pow(variable, 2));\n\n    const summationForUncertainty = sumProduct(w_2_i_array, S_2_i_array);\n    const sqrtSummation = Math.sqrt(summationForUncertainty);\n\n    /*  FIX  – protect divide by zero on b_TREE  */\n    document.u_c =\n        safeDivide(document.t_VAL * sqrtSummation, document.b_TREE);\n\n    document.B_TREE = document.A * document.b_TREE;\n\n\n    let C_tree = (44 / 12) * document.CF_TREE * document.B_TREE;\n\n    /*  FIX  – protect divide by zero on C_tree  */\n    const relative_uncertainty =\n        safeDivide(document.u_c, C_tree) * 100;\n\n    // apply discount\n    const applied_discount = getDiscount(relative_uncertainty);\n\n    if (applied_discount !== null) {\n        discount = (applied_discount * document.u_c) / 100;\n    }\n\n    return scenario === 'Project scenario'\n        ? C_tree - discount\n        : C_tree + discount;\n}\n\nfunction calc_double_sampling(document, scenario) {\n    let discount = 0;\n    const double_sampling_variables = document.double_sampling_variables;\n\n    double_sampling_variables.forEach((variable) => {\n        const sum = variable.b_TREE_p_i.reduce(\n            (accumulator, currentValue) => {\n                return accumulator + currentValue;\n            },\n            0\n        );\n\n        const total_sample_plot = variable.b_TREE_p_i.length\n\n        variable.b_TREE_i = (sum / total_sample_plot) + (variable.beta * (variable.x_across_all_sp - variable.x_sub_sample_sp))\n\n        const sumOfSquares = variable.b_TREE_p_i.reduce(\n            (accumulator, currentValue) => {\n                return accumulator + Math.pow(currentValue, 2);\n            },\n            0\n        );\n\n        // Step 3: Calculate the numerator\n        const numerator = total_sample_plot * sumOfSquares - Math.pow(sum, 2);\n\n        // Step 4: Calculate the denominator (n_i * (n_i - 1))\n        const denominator = total_sample_plot * (total_sample_plot - 1);\n\n        variable.S_2_i = (numerator / denominator) * (1 - (1 - document.alpha) * Math.pow(variable.rho, 2));\n    });\n\n    const w_i_array = double_sampling_variables.map(\n        (variable) => variable.w_i\n    );\n    const b_TREE_i_array = double_sampling_variables.map(\n        (variable) => variable.b_TREE_i\n    );\n\n    document.b_TREE = sumProduct(w_i_array, b_TREE_i_array);\n\n    const S_2_i_array = double_sampling_variables.map(variable => variable.S_2_i / variable.b_TREE_p_i.length);\n    const w_2_i_array = w_i_array.map(variable => Math.pow(variable, 2));\n\n    const summationForUncertainty = sumProduct(w_2_i_array, S_2_i_array);\n    const sqrtSummation = Math.sqrt(summationForUncertainty);\n\n    /*  FIX  – protect divide by zero on b_TREE  */\n    document.u_c =\n        safeDivide(document.t_VAL * sqrtSummation, document.b_TREE);\n\n    document.B_TREE = document.A * document.b_TREE;\n\n\n    let C_tree = (44 / 12) * document.CF_TREE * document.B_TREE;\n\n    /*  FIX  – protect divide by zero on C_tree  */\n    const relative_uncertainty =\n        safeDivide(document.u_c, C_tree) * 100;\n\n    // apply discount\n    const applied_discount = getDiscount(relative_uncertainty);\n\n    if (applied_discount !== null) {\n        discount = (applied_discount * document.u_c) / 100;\n    }\n\n    return scenario === 'Project scenario'\n        ? C_tree - discount\n        : C_tree + discount;\n}\n\nfunction calc_proportionate_crown_cover(document) {\n    const cs_in_preproject_tree_biomass_in_stratum_variables = document.cs_in_preproject_tree_biomass_in_stratum_variables;\n\n    cs_in_preproject_tree_biomass_in_stratum_variables.forEach((variable) => {\n        variable.C_TREE_BSL_i = (44 / 12) * variable.CF_TREE * variable.b_forest * (1 + variable.R_TREE) * variable.CC_TREE_BSL_i * variable.A_i;\n    });\n\n    const C_TREE_BSL_i_array = cs_in_preproject_tree_biomass_in_stratum_variables.map(variable => variable.C_TREE_BSL_i);\n\n    return summation(C_TREE_BSL_i_array);\n}\n\nfunction calc_updating_the_previous_stock(document, scenario) {\n    let discount = 0;\n    const C_tree_t2 = document.C_TREE_t1 + document.delta_C_TREE;\n\n    if (C_tree_t2 === 0) {\n        // protect but do not crash\n        return 0;\n    }\n\n    const numerator = Math.sqrt(\n        (document.u1 * document.C_TREE_t1) ** 2 +\n        (document.delata_u_C * document.delta_C_TREE) ** 2\n    );\n\n    /*  FIX  – protect divide by zero on C_tree_t2  */\n    document.u_2 = safeDivide(numerator, C_tree_t2);\n\n    const relative_uncertainty = safeDivide(document.u_2, C_tree_t2) * 100;\n\n    // apply discount\n    const applied_discount = getDiscount(relative_uncertainty);\n\n    if (applied_discount !== null) {\n        discount = (applied_discount * document.u_2) / 100;\n    }\n\n    return scenario === 'Project scenario'\n        ? C_tree_t2 - discount\n        : C_tree_t2 + discount;\n}\n\nfunction calc_ar_tool_14(document) {\n    let delta_C_SHRUB = 0;\n    let C_SHRUB_t = 0;\n    let delta_C_TREE = 0;\n    let C_TREE = 0;\n\n    const method_for_change_in_cs_in_shurbs =\n        document.method_for_change_in_cs_in_shurbs;\n\n    const method_for_change_in_cs_in_trees =\n        document.method_for_change_in_cs_in_trees;\n\n    const scenario_type = document.scenario_type;\n\n    if (\n        method_for_change_in_cs_in_trees === 'Between two points of time'\n    ) {\n        const change_in_cs_in_trees_btw_two_points_of_time =\n            document.change_in_cs_in_trees_btw_two_points_of_time;\n\n        const method_selection_cs_in_trees_bwt_two_points_of_time =\n            change_in_cs_in_trees_btw_two_points_of_time.method_selection_cs_in_trees_bwt_two_points_of_time;\n\n        if (\n            method_selection_cs_in_trees_bwt_two_points_of_time ===\n            'Difference of two independent stock estimations'\n        ) {\n            delta_C_TREE = calc_difference_of_two_independent_stock(\n                change_in_cs_in_trees_btw_two_points_of_time.difference_of_two_independent_stock,\n                scenario_type\n            );\n        } else if (\n            method_selection_cs_in_trees_bwt_two_points_of_time ===\n            'Direct estimation of change by re-measurement of sample plots'\n        ) {\n            delta_C_TREE = calc_direct_estimation_change_via_sample_plot(\n                change_in_cs_in_trees_btw_two_points_of_time.direct_estimation_change_via_sample_plot,\n                scenario_type\n            );\n        } else if (\n            method_selection_cs_in_trees_bwt_two_points_of_time ===\n            'Estimation by proportionate crown cover' &&\n            scenario_type === 'Baseline scenario'\n        ) {\n            delta_C_TREE = calc_estimation_by_proportionate_crown_cover(\n                change_in_cs_in_trees_btw_two_points_of_time.estimation_by_proportionate_crown_cover\n            );\n        } else {\n            delta_C_TREE = 0;\n        }\n    } else {\n        const change_in_cs_in_a_year = document.change_in_cs_in_a_year;\n        delta_C_TREE = calc_change_in_cs_in_trees_in_a_year(\n            change_in_cs_in_a_year\n        );\n    }\n\n    const cs_in_trees_at_point_of_time = document.cs_in_trees_at_point_of_time;\n\n    const method_used_for_estimating_cs_in_trees_at_a_point_of_time = cs_in_trees_at_point_of_time.method_used_for_estimating_cs_in_trees_at_a_point_of_time;\n\n    if (method_used_for_estimating_cs_in_trees_at_a_point_of_time === \"Measurement of sample plots\") {\n        const measurement_of_sample_plots = cs_in_trees_at_point_of_time.measurement_of_sample_plots;\n\n        if (measurement_of_sample_plots.sampling_design === \"Stratified random sampling\") {\n            const stratified_random_sampling = measurement_of_sample_plots.stratified_random_sampling;\n\n            C_TREE = calc_stratified_random_sampling(stratified_random_sampling, scenario_type);\n        } else {\n            const double_sampling = measurement_of_sample_plots.double_sampling;\n\n            C_TREE = calc_double_sampling(double_sampling, scenario_type);\n        }\n    } else if (method_used_for_estimating_cs_in_trees_at_a_point_of_time === \"Proportionate crown cover\") {\n        const proportionate_crown_cover = cs_in_trees_at_point_of_time.proportionate_crown_cover;\n\n        C_TREE = calc_proportionate_crown_cover(proportionate_crown_cover);\n    } else {\n        const updating_the_previous_stock = cs_in_trees_at_point_of_time.updating_the_previous_stock;\n\n        C_TREE = calc_updating_the_previous_stock(updating_the_previous_stock, scenario_type);\n    }\n\n    if (\n        method_for_change_in_cs_in_shurbs === 'Between two points of time'\n    ) {\n        delta_C_SHRUB = calc_shrub_cs_change_bwt_two_points(document);\n    } else {\n        delta_C_SHRUB = calc_change_in_cs_in_shrubs_in_a_year(document);\n    }\n\n    C_SHRUB_t = calc_cs_in_shrubs_at_a_point_of_time(document);\n\n    return Object.assign(document, {\n        delta_C_SHRUB: delta_C_SHRUB,\n        C_SHRUB_t: C_SHRUB_t,\n        delta_C_TREE: delta_C_TREE,\n        C_TREE: C_TREE\n    });\n}\nfunction adjustValues(document) {\n    const keys = Object.keys(document);\n    for (const key of keys) {\n        if (typeof document[key] === 'number') {\n            document[key] = isFinite(document[key]) ? document[key] : 0;\n        }\n        if (Array.isArray(document[key])) {\n            for (const i in document[key]) {\n                if (typeof document[key][i] === 'number') {\n                    document[key][i] = isFinite(document[key][i])\n                        ? document[key][i]\n                        : 0;\n                }\n                if (\n                    Object.prototype.toString.call(document[key][i]) ===\n                    '[object Object]'\n                ) {\n                    document[key][i] = adjustValues(document[key][i]);\n                }\n            }\n        }\n        if (\n            Object.prototype.toString.call(document[key]) ===\n            '[object Object]'\n        ) {\n            document[key] = adjustValues(document[key]);\n        }\n    }\n\n    return document;\n}\n\nfunction calc() {\n    done(\n        documents.map((document) =>\n            adjustValues(\n                calc_ar_tool_14(document.document.credentialSubject[0])\n            )\n        )\n    );\n}\ncalc();\n","documentSigner":"","idType":"UUID","outputSchema":"#632fd070-d788-49ae-889b-cd281c6c7194&1.0.0","unsigned":true,"selectedScriptLanguage":"JAVASCRIPT","tag":"calc_ar_tool_14","children":[],"events":[],"artifacts":[]},{"id":"16f57f36-48db-4989-adb1-ddb276fc23f1","blockType":"extractDataBlock","defaultActive":false,"permissions":["Role"],"onErrorAction":"no-action","action":"set","schema":"#632fd070-d788-49ae-889b-cd281c6c7194&1.0.0","tag":"set_ar_tool_14","children":[],"events":[{"target":"Tool","source":"set_ar_tool_14","input":"output_ar_tool_14","output":"RunEvent","actor":"","disabled":false}],"artifacts":[]}],"events":[{"target":"get_ar_tool_14","source":"Tool","input":"RunEvent","output":"input_ar_tool_14","actor":"","disabled":false}],"artifacts":[],"variables":[{"name":"Role","description":"","type":"Role"}],"inputEvents":[{"name":"input_ar_tool_14","description":""}],"outputEvents":[{"name":"output_ar_tool_14","description":""}],"innerEvents":[{"target":"get_ar_tool_14","source":"Tool","input":"RunEvent","output":"input_ar_tool_14","actor":"","disabled":false}]}}